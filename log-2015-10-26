Script started on Mon Oct 26 10:52:50 2015
bash: /path/to/your/virtualenvwrapper.sh: No such file or directory
[?1034hbash-3.2$ vi word2vec.c
[?1049h[?1h=[1;29r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[29;1H"word2vec.c" 703L, 39071C[>c[1;1H//  Copyright 2013 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>

#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
#define EXP_TABLE_SIZE 1000
#define MAX_EXP 6
#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */

const int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabulary[1;1H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hset number[?25l[1;1H[93m  1 [m//  Copyright 2013 Google Inc. All Rights Reserved.
[93m  2 [m//
[93m  3 [m//  Licensed under the Apache License, Version 2.0 (the "License");
[93m  4 [m//  you may not use this file except in compliance with the License.
[93m  5 [m//  You may obtain a copy of the License at
[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[28;1H[93m    [mary[1;5H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25h540[?25l[27m[m[H[2J[1;1H[93m528 [m[7C } /* 509Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„ÅØ„Åì„Åì„Åæ„Åß */
[93m529 [m[7C // Learn weights input -> hidden
[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[10;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t));
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();[14;7H[?12l[?25h[15;7H[16;7H[17;5H[18;5H[19;7H[20;7H[21;7H[22;7H[23;7H[24;7H[25;7H[26;7H[27;7H[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m555 [m  if (negative > 0) InitUnigramTable();[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m556 [m  start = clock();[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[28;1H[93m    [moid *)a);[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m559 [m  fo = fopen(output_file, "wb");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m560 [m  if (classes == 0) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m561 [m    // Save the word vectors[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m564 [m      fprintf(fo, "%s ", vocab[a].word);[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][28;1H[93m    [m, sizeof(real), 1, fo);[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[28;1H[93m    [m + b]);[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m567 [m      fprintf(fo, "\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m568 [m    }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[17;25H[46m{[m[28;1H[93m569 [m  [46m}[m else {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[16;25H{[27;7H}
[93m570 [m    // Run K-means on the word vectors[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m571 [m    int clcn = classes, iter = 10, closeid;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[28;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[28;1H[93m    [mÁõÆ„ÅßËß£Êîæ */[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m574 [m    real closev, x;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[28;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m577 [m    for (a = 0; a < iter; a++) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m581 [m[7C for (d = 0; d < layer1_size; d++) cent[layer1_size * cl[c] + d] += syn0[c * ll[28;1H[93m    [mayer1_size + d];[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m582 [m[7C centcn[cl[c]]++;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m583 [m      }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m584 [m      for (b = 0; b < clcn; b++) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m585 [m[7C closev = 0;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m586 [m[7C for (c = 0; c < layer1_size; c++) {[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m587 [m[9C cent[layer1_size * b + c] /= centcn[b];
[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m589 [m[7C }
[93m590 [m[7C closev = sqrt(closev);[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m591 [m[7C for (c = 0; c < layer1_size; c++) cent[layer1_size * b + c] /= closev;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m592 [m      }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m593 [m      for (c = 0; c < vocab_size; c++) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m594 [m[7C closev = -10;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m595 [m[7C closeid = 0;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m596 [m[7C for (d = 0; d < clcn; d++) {
[93m597 [m[9C x = 0;[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[28;1H[93m    [m layer1_size + b];[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m599 [m[9C if (x > closev) {[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m602 [m[9C }[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m603 [m[7C }[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m604 [m[7C cl[c] = closeid;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m605 [m      }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m606 [m    }[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m613 [m  fclose(fo);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m615 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m617 [m  int a;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m619 [m    if (a == argc - 1) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m620 [m      printf("Argument missing for %s\n", str);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m621 [m      exit(1);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m622 [m    }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m623 [m    return a;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[22;61H[46m{[m[28;1H[93m624 [m  [46m}[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[20;61H{[26;7H}
[93m625 [m  return -1;
[93m626 [m}[27;7H[?12l[?25h[?25l[18;50H[46m{[28;5H}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[17;50H{[27;5H}
[93m627 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m630 [m  if (argc == 1) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m632 [m    printf("Options:\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m633 [m    printf("Parameters for training:\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m634 [m    printf("\t-train <file>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m636 [m    printf("\t-output <file>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m638 [m    printf("\t-size <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m640 [m    printf("\t-window <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m653 [m    printf("\t-min-count <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;7H[?12l[?25h[?25l

:[?12l[?25h540[?25l[27m[m[H[2J[1;1H[93m528 [m[7C } /* 509Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„ÅØ„Åì„Åì„Åæ„Åß */
[93m529 [m[7C // Learn weights input -> hidden
[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[10;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t));
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();[14;7H[?12l[?25h[15;7H[16;7H[17;5H[18;5H[19;7H[20;7H[21;7H[22;7H[23;7H[24;7H[25;7H[26;7H[27;7H[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m555 [m  if (negative > 0) InitUnigramTable();[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m556 [m  start = clock();[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[28;1H[93m    [moid *)a);[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m559 [m  fo = fopen(output_file, "wb");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m560 [m  if (classes == 0) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m561 [m    // Save the word vectors[28;7H[?12l[?25h[27;7H[26;7H[25;7H[23;7H[22;7H[21;7H[20;7H[19;7H[18;7H[17;7H[16;7H[15;7H[14;7Hpthread_t *pt =[?25l [46m([11C)[14;23H[?12l[?25h[?25l[m([11C)[14;24H[?12l[?25hpthread_t [?25l[14;23H[46m([11C)[?12l[?25h[?25l[m[14;23H([11C)[?12l[?25hmallo[?25lc[46m([31C)[14;42H[?12l[?25h[?25l[m([31C)[14;43H[?12l[?25hnum_threads * sizeo[?25lf[46m([9C)[14;63H[?12l[?25h[?25l[m([9C)[14;64H[?12l[?25hpthread_[?25l[14;63H[46m([9C)[?12l[?25h[?25l[14;42H([m[20C([9C)[46m)[?12l[?25h[?25l[m[14;42H([31C)[?12l[?25h[?25l[29;1H/[?12l[?25hfree[?25l[27m[m[H[2J[1;1H[93m597 [m[9C x = 0;
[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[3;1H[93m    [m layer1_size + b];
[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo);
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;[14;9H[?12l[?25h[?25l[29;1H/free[15;9H[?12l[?25h[?25l[29;1H[16;9H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[2;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */
[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[4;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;
[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[10;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå[12;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[17;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[25;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {
[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[38;5;224msearch hit BOTTOM, continuing at TOP[14;11H[?12l[?25h[?25l[m[29;1H?free[29;6H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[2;1H[93m    [m layer1_size + b];
[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo);
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[38;5;224msearch hit TOP, continuing at BOTTOM[15;9H[?12l[?25h[?25l[m[29;1H?free[29;6H[K[29;1H[14;9H[?12l[?25h[?25l[29;1H[13;9H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m529 [m[7C // Learn weights input -> hidden
[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[9;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t));
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25h[?25l[29;1H/free[27m[m[H[2J[1;1H[93m597 [m[9C x = 0;
[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[3;1H[93m    [m layer1_size + b];
[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo);
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;[14;9H[?12l[?25h[?25l[29;1H?free[27m[m[H[2J[1;1H[93m529 [m[7C // Learn weights input -> hidden
[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[9;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t));
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25h[15;7H[16;5H[17;5H[18;7H[19;7H[20;7H[21;7H[22;7H[21;7H[68C[?25l[29;1H[1m-- INSERT --[21;76H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[22;63H[21;83H[22;63H[23;30H[24;80H[23;30H[22;63H[21;80H[?25l p */[?12l[?25h[?25lpt */[?12l[?25h[?25lth */[?12l[?25h[?25lhr */[?12l[?25h[?25lre */[?12l[?25h[?25lea */[?12l[?25h[?25lad */[21;87H[?12l[?25h[?25l[22;28r[22;1H[L[1;29r[21;86Hd( **[22;1H[93m    [m/[21;88H[?12l[?25h[?25l[46m()[m  [22;1H[93m    [m*/[21;89H[?12l[?25h[?25l  [22;1H[93m [21;88H[?12l[?25h[?25l[m[46m([m„Éû[22;4H[93m [m„É´„ÉÅ[46m)[m */[?12l[?25h[?25l„Çπ„É¨„ÉÉ„Éâ[46m)[m */[?12l[?25h[?25l„ÅÆ[46m)[m */[?12l[?25h[?25l„É©„Ç§„Éñ„É©„É™[46m)[m */[?12l[?25h[29;1H[K[22;27H[?25l[21;87H([22;29H)[?12l[?25h[?25l[29;1H/[?12l[?25hpthread[?25l[1;28r[1;1H[4M[1;29r[25;1H[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[28;1H[93m    [moid *)a);[29;1H[K[27;41H[?12l[?25h[?25l

/pthread[1;28r[28;1H
[1;29r[28;1H[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);[29;1H[K[28;41H[?12l[?25h[?25l
?pthread[26;41H[?12l[?25h[?25l


[16;80H[?12l[?25h[?25l[29;1H[16;64H[?12l[?25h[?25l[29;1H[16;24H[?12l[?25h[?25l[29;1H[16;7H[?12l[?25h[?25l[29;1H[10;7H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[23;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {[14;15H[?12l[?25h[?25l[29;1H/pthread[27m[m[H[2J[1;1H[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[8;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[21;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25h[?25l[29;1H?pthread[27m[m[H[2J[1;1H[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[23;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {[14;15H[?12l[?25h[?25l[29;1H/pthread[27m[m[H[2J[1;1H[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[8;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[21;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25h[?25l[29;1H?pthread[27m[m[H[2J[1;1H[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[23;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {[14;15H[?12l[?25h[?25l[29;1H/pthread[27m[m[H[2J[1;1H[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[8;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[21;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25h[15;5H[?25l[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) [46m{[m /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */[15;38H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;5H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) [46m{[m /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */[15;38H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;5H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) [46m{[m /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */[15;38H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;5H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) [46m{[m /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */[15;38H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m}
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;5H[?12l[?25h[?25l[29;1H[1m-- INSERT --[14;6H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l 3 */[?12l[?25h[?25l36 */[?12l[?25h[?25l63 */[?12l[?25h[?25l3Ë°åÁõÆ */[?12l[?25h[?25l„Åã„Çâ„ÅÆ */[?12l[?25h[?25lT */[?12l[?25h[?25lTr */[?12l[?25h[?25lra */[?12l[?25h[?25lai */[?12l[?25h[?25lin */[?12l[?25h[29;1H[K[14;27H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25h363[?25l[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */[15;5H[?12l[?25h[?25l[29;1H:[?12l[?25h543[?25l[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrain */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;5H[?12l[?25h} /* 363[2C[2C[2C[2C[2CTrai[?25l[29;1H[1m-- INSERT --[14;28H[?12l[?25h[?25l[mnM */[?12l[?25h[?25lMo */[?12l[?25h[?25lod */[?12l[?25h[?25lde */[?12l[?25h[?25lel */[?12l[?25h[?25llT */[?12l[?25h[?25lTh */[?12l[?25h[?25lhr */[?12l[?25h[?25lre */[?12l[?25h[?25lea */[?12l[?25h[?25lad */[?12l[?25h[?25ldÁµÇ„Çè„Çä */[?12l[?25h[29;1H[K[14;26H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hpthread[?25l[19;7H[?12l[?25h[?25l[29;1H?[13;7H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[23;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {[14;15H[?12l[?25h[?25l[29;1H?pthread[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[3;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[13;1H[93m    [moid *)a);
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][22;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[24;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[38;5;224msearch hit TOP, continuing at BOTTOM[14;41H[?12l[?25h[?25l[m[29;1H/pthread[29;9H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[23;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;15H[?12l[?25h[?25l[m[29;1H/pthread[29;9H[K[29;1H[27m[m[H[2J[1;1H[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[8;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL);
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[21;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25hpthread_exi[?25lt[46m([mNULL[46m)[?12l[?25h[?25l[m(NULL)[?12l[?25hNUL[?25l[46m([mNULL[46m)[?12l[?25h[?25l[m(NULL)[?12l[?25h[?25l[29;1H[1m-- INSERT --[14;26H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l Âëº„Å≥Âá∫„Åó„Åü */[?12l[?25h[?25l„Çπ„É¨„ÉÉ„Éâ„Çí */[?12l[?25h[?25lÁµÇ‰∫Ü */[?12l[?25h[29;1H[K[14;52H[?25l[?12l[?25h[3C[?25l[29;1H/[?12l[?25hther[?25l[29;5H[K[29;5H[?12l[?25h[?25l[29;4H[K[29;4H[?12l[?25hread[?25l[20;8H[?12l[?25h[?25l[29;1H?[14;8H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;48H[?12l[?25h[?25l[29;1H?thread[6;53H[?12l[?25h[?25l[29;1H[5;57H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[2;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[4;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[6;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[15;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[17;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[21;1H[93m    [m));
[93m386 [m      if (alpha < starting_alpha * 0.0001) alpha = starting_alpha * 0.0001;
[93m387 [m    }
[93m388 [m    if (sentence_length == 0) { /* ifÊñá(406Ë°åÁõÆ„Åæ„Åß),364Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØsentence_lengthh[25;1H[93m    [m == 0„Å†„Åå389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅßÊúÄÁµÇÁöÑ„Å´sentence_length„Åå1000„Å´„Å™„Çã */
[93m389 [m      while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(404Ë°åÁõÆ„Åæ„Åß) */
[93m390 [m[7C word = ReadWordIndex(fi); /* 114Ë°åÁõÆ„ÅßÂÆöÁæ©„ÅÆÂçòË™û„ÇíË™≠Âèñ„ÇäÔºåË™ûÂΩô‰∏≠„Åß„ÅÆÂçòË™û„ÅÆÁï™[94m>>[m[28;1H[93m    [mÂè∑„ÇíËøî„ÅôReadWordIndex */[14;58H[?12l[?25h[?25l[29;1H?thread[7;44H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[5;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[9;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[11;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[13;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[15;1H[93m    [m, min_reduce = 1;
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[18;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [20;1H[93m    [m0;
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[22;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */[14;78H[?12l[?25h[?25l[29;1H/thread[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;44H[?12l[?25h[?25l[29;1H?thread[27m[m[H[2J[1;1H[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[5;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[9;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[11;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[13;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[15;1H[93m    [m, min_reduce = 1;
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[18;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [20;1H[93m    [m0;
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[22;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */[14;78H[?12l[?25h[15;21H[16;5Hi[14;6H[15;21H[?25l[29;1H[1m-- INSERT --[15;22H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l n */[?12l[?25h[?25lnu */[?12l[?25h[?25lum */[?12l[?25h[?25lu */[15;31H[K[15;28H[?12l[?25h[?25ln */[15;30H[K[15;27H[?12l[?25h[?25l  */[15;29H[K[15;26H[?12l[?25h[?25l „Çπ„É¨„ÉÉ„ÉâÊï∞ */[?12l[?25h[?25ln */[?12l[?25h[?25lnu */[?12l[?25h[?25lum */[?12l[?25h[?25lm_ */[?12l[?25h[?25l_t */[?12l[?25h[?25lth */[?12l[?25h[?25lhr */[?12l[?25h[?25lre */[?12l[?25h[?25lea */[?12l[?25h[?25lad */[?12l[?25h[?25lds */[?12l[?25h[?25l  */[?12l[?25h[?25l = */[?12l[?25h[?25l  */[?12l[?25h[?25l 1 */[?12l[?25h[?25l12 */[?12l[?25h[29;1H[K[15;51H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hnum[?25l[29;4H[K[29;4H[?12l[?25h[?25l[29;3H[K[29;3H[?12l[?25h[?25l[29;2H[K[29;2H[?12l[?25hthread[?25l[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;44H[?12l[?25h[?25l[29;1H/[?12l[?25hfre[?25l[29;4H[K[29;4H[?12l[?25h[?25l[29;3H[K[29;3H[?12l[?25hseek[?25l[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;11H[?12l[?25h[?25l[29;1H/fseek[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m322 [m    i++;
[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END);
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeoo[22;1H[93m    [mf(real)); /*  */
[93m343 [m  if (syn0 == NULL) {printf("Memory allocation failed\n"); exit(1);}
[93m344 [m  if (hs) { /* hs=0„Çà„Çä„Åì„ÅÆifÊñá„ÅØFALSE */
[93m345 [m    a = posix_memalign((void **)&syn1, 128, (long long)vocab_size * layer1_size * sizz[26;1H[93m    [meof(real)); /* (long long)vocab_size * layer1_size * sizeof(real) bytes„ÅÆ„É°„É¢„É™„ÇíÂâ≤ÂΩì[27;1H[93m    [m„Å¶ÔºåÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„Çí(void **)&syn1„Å´Ââ≤ÂΩì„ÇãÔºéÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅØ128„ÅÆÂÄçÊï∞[28;1H[93m    [m */
[38;5;224msearch hit BOTTOM, continuing at TOP[13;7H[?12l[?25h[?25l[m[29;1H/fseek[29;7H[K[29;1H[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;7H[?12l[?25h[?25l[29;1H/fseek[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;11H[?12l[?25h[?25l[29;1H/fseek[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m322 [m    i++;
[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END);
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeoo[22;1H[93m    [mf(real)); /*  */
[93m343 [m  if (syn0 == NULL) {printf("Memory allocation failed\n"); exit(1);}
[93m344 [m  if (hs) { /* hs=0„Çà„Çä„Åì„ÅÆifÊñá„ÅØFALSE */
[93m345 [m    a = posix_memalign((void **)&syn1, 128, (long long)vocab_size * layer1_size * sizz[26;1H[93m    [meof(real)); /* (long long)vocab_size * layer1_size * sizeof(real) bytes„ÅÆ„É°„É¢„É™„ÇíÂâ≤ÂΩì[27;1H[93m    [m„Å¶ÔºåÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„Çí(void **)&syn1„Å´Ââ≤ÂΩì„ÇãÔºéÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅØ128„ÅÆÂÄçÊï∞[28;1H[93m    [m */
[38;5;224msearch hit BOTTOM, continuing at TOP[13;7H[?12l[?25h[?25l[m[29;1H/fseek[29;7H[K[29;1H[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;7H[?12l[?25h[?25l[29;1H/fseek[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;11H[?12l[?25h[?25l[29;1H/fseek[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m322 [m    i++;
[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END);
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeoo[22;1H[93m    [mf(real)); /*  */
[93m343 [m  if (syn0 == NULL) {printf("Memory allocation failed\n"); exit(1);}
[93m344 [m  if (hs) { /* hs=0„Çà„Çä„Åì„ÅÆifÊñá„ÅØFALSE */
[93m345 [m    a = posix_memalign((void **)&syn1, 128, (long long)vocab_size * layer1_size * sizz[26;1H[93m    [meof(real)); /* (long long)vocab_size * layer1_size * sizeof(real) bytes„ÅÆ„É°„É¢„É™„ÇíÂâ≤ÂΩì[27;1H[93m    [m„Å¶ÔºåÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„Çí(void **)&syn1„Å´Ââ≤ÂΩì„ÇãÔºéÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅØ128„ÅÆÂÄçÊï∞[28;1H[93m    [m */
[38;5;224msearch hit BOTTOM, continuing at TOP[13;7H[?12l[?25h[mfsee[?25lk[46m([16C)[13;12H[?12l[?25h[?25l[m([16C)[13;13H[?12l[?25hfin, 0, SEEK_EN[?25l[13;12H[46m([16C)[?12l[?25h[?25l[m[13;12H([16C)[?12l[?25h[?25l[29;1H[1m-- INSERT --[m[29;13H[K[13;31H[?12l[?25h[?25l;/[?12l[?25h[?25l[13;31H[K[13;31H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l [?12l[?25h[?25l  */[?12l[?25h [?25l „Éï„Ç°„Ç§„É´ */[?12l[?25h[?25lf */[?12l[?25h[?25lfi */[?12l[?25h[?25lin */[?12l[?25h[?25ln„ÅÆ */[?12l[?25h[?25l„Éï„Ç°„Ç§„É´ */[?12l[?25h[?25l1 */[?12l[?25h[?25l */ [?12l[?25h[?25l‰ΩçÁΩÆ */[?12l[?25h[?25lÊºîÁÆóÂ≠ê */[?12l[?25h[?25l„Çí */[?12l[?25h[?25lS */[?12l[?25h[?25lSE */[?12l[?25h[?25lEE */[?12l[?25h[?25lEK */[?12l[?25h[?25lK_ */[?12l[?25h[?25l_e */[?12l[?25h[?25l_ */ [?12l[?25h[?25l_E */[?12l[?25h[?25lEN */[?12l[?25h[?25lND */[?12l[?25h[?25lD„Çí */[?12l[?25h[?25lÂü∫Ê∫ñ„Å´ */[?12l[?25h[?25l0 */[?12l[?25h[?25l[14;28r[14;1H[L[1;29r[13;84H0„Éê„Ç§[94m>>[m[14;1H[93m    [m„Éà */[26;1H[94m@                                                                                        [27;1H@                                                                                        [28;1H@                                                                                        [14;7H[?12l[?25h[?25l[mÁßªÂãï */[?12l[?25h[29;1H[K[14;9H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hfseek[?25l[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;7H[?12l[?25h[?25l[29;1H/fseek[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;11H[?12l[?25h[?25l[29;1H?fseek[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;7H[?12l[?25h[?25l[29;1H/fseek[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;11H[?12l[?25h[?25l[29;1H/fseek[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END); /* „Éï„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§[94m>>[m[13;1H[93m    [m„ÉàÁßªÂãï */
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeoo[22;1H[93m    [mf(real)); /*  */
[93m343 [m  if (syn0 == NULL) {printf("Memory allocation failed\n"); exit(1);}
[93m344 [m  if (hs) { /* hs=0„Çà„Çä„Åì„ÅÆifÊñá„ÅØFALSE */
[93m345 [m    a = posix_memalign((void **)&syn1, 128, (long long)vocab_size * layer1_size * sizz[26;1H[93m    [meof(real)); /* (long long)vocab_size * layer1_size * sizeof(real) bytes„ÅÆ„É°„É¢„É™„ÇíÂâ≤ÂΩì[27;1H[93m    [m„Å¶ÔºåÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„Çí(void **)&syn1„Å´Ââ≤ÂΩì„ÇãÔºéÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅØ128„ÅÆÂÄçÊï∞[28;1H[93m    [m */
[38;5;224msearch hit BOTTOM, continuing at TOP[12;7H[?12l[?25h[?25l[m[29;1H/fseek[29;7H[K[29;1H[27m[m[H[2J[1;1H[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[2;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[3;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[9;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[11;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [13;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[22;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[24;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 11[28;1H[93m    [m));[14;7H[?12l[?25h[71C[?25l[29;1H[1m-- INSERT --[14;79H[?12l[?25h[?25l[m [?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;80H /* „Éï„Ç°„Ç§ [15;1H[93m    [m„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫[28;1H[94m@                                                                                        [15;44H[?12l[?25h[?25l[mÊ∫ñ„Å´0„Éê„Ç§>    „ÉàÁßªÂãï */[?12l[?25h[?25l „ÉàÁßªÂãï */[15;66H[K[15;57H[?12l[?25h[?25l „ÉàÁßªÂãï */[15;65H[K[15;56H[?12l[?25h[?25l „ÉàÁßªÂãï */[15;64H[K[15;55H[?12l[?25h[?25l>„ÉàÁßªÂãï */[15;63H[K[15;54H[?12l[?25h[?25l„ÉàÁßªÂãï */[15;62H[K[15;53H[?12l[?25h[?25li„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;61H[K[15;9H[?12l[?25h[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2CSEEK_END[2C[2C[2C[2C0[2C[2C[2C[2C[2C D[?25lN„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;60H[K[15;38H[?12l[?25h[?25lE„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;59H[K[15;37H[?12l[?25h[?25l_„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;58H[K[15;36H[?12l[?25h[?25l_S„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;37H[?12l[?25h[?25lSE„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;38H[?12l[?25h[?25lET„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§„ÉàÁßªÂãï */[15;39H[?12l[?25h[2C[2C[2C[2C0[?25l„Éê„Ç§„ÉàÁßªÂãï */[15;60H[K[15;47H[?12l[?25h[?25lf„Éê„Ç§„ÉàÁßªÂãï */[15;48H[?12l[?25h[?25lfi„Éê„Ç§„ÉàÁßªÂãï */[15;49H[?12l[?25h[?25lil„Éê„Ç§„ÉàÁßªÂãï */[15;50H[?12l[?25h[?25lle„Éê„Ç§„ÉàÁßªÂãï */[15;51H[?12l[?25h[?25le_„Éê„Ç§„ÉàÁßªÂãï */[15;52H[?12l[?25h[?25l_s„Éê„Ç§„ÉàÁßªÂãï */[15;53H[?12l[?25h[?25lsi„Éê„Ç§„ÉàÁßªÂãï */[15;54H[?12l[?25h[?25liz„Éê„Ç§„ÉàÁßªÂãï */[15;55H[?12l[?25h[?25lze„Éê„Ç§„ÉàÁßªÂãï */[15;56H[?12l[?25h[?25le „Éê„Ç§„ÉàÁßªÂãï */[15;57H[?12l[?25h[?25l /„Éê„Ç§„ÉàÁßªÂãï */[15;58H[?12l[?25h[?25l/ „Éê„Ç§„ÉàÁßªÂãï */[15;59H[?12l[?25h[?25l („Éê„Ç§„ÉàÁßªÂãï */[15;60H[?12l[?25h[?25l[46m()[m„Éê„Ç§„ÉàÁßªÂãï */[15;61H[?12l[?25h[?25l[?12l[?25h[?25l[46m([ml[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;61H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;62H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;63H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;64H[?12l[?25h[?25lg [46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;65H[?12l[?25h[?25l l[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;66H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;67H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;68H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;69H[?12l[?25h[?25l[1C[?12l[?25h[?25l[15;59H([9C)n„Éê„Ç§„ÉàÁßªÂãï */[15;71H[?12l[?25h[?25lnu„Éê„Ç§„ÉàÁßªÂãï */[15;72H[?12l[?25h[?25lum„Éê„Ç§„ÉàÁßªÂãï */[15;73H[?12l[?25h[?25lm_„Éê„Ç§„ÉàÁßªÂãï */[15;74H[?12l[?25h[?25l_t„Éê„Ç§„ÉàÁßªÂãï */[15;75H[?12l[?25h[?25lth„Éê„Ç§„ÉàÁßªÂãï */[15;76H[?12l[?25h[?25lhr„Éê„Ç§„ÉàÁßªÂãï */[15;77H[?12l[?25h[?25l[16;28r[16;1H[L[1;29r[15;76Hre„Éê„Ç§„ÉàÁßªÂãï **[16;1H[93m    [m/[15;78H[?12l[?25h[?25lea„Éê„Ç§„ÉàÁßªÂãï  [16;1H[93m    [m*/[15;79H[?12l[?25h[?25lad„Éê„Ç§„ÉàÁßªÂãï [16;1H[93m    [m */[15;80H[?12l[?25h[?25lds„Éê„Ç§„ÉàÁßª[94m>>[m[16;1H[93m    [mÂãï */[15;81H[?12l[?25h[?25ls „Éê„Ç§„ÉàÁßª [16;1H[93m [15;82H[?12l[?25h[?25l[m *„Éê„Ç§„Éà[94m>>[m[16;1H[93m    [mÁßªÂãï */[15;83H[?12l[?25h[?25l* „Éê„Ç§„Éà [16;1H[93m [15;84H[?12l[?25h[?25l[m („Éê„Ç§[94m>>[m[16;1H[93m    [m„ÉàÁßªÂãï */[15;85H[?12l[?25h[?25l[46m()[m„Éê„Ç§ [16;1H[93m [15;86H[?12l[?25h[?25l[m[3C  [16;1H[93m [15;85H[?12l[?25h[?25l[m[46m([ml[46m)[m„Éê[94m>>[m[16;1H[93m [m[3C„Ç§„ÉàÁßªÂãï */[15;86H[?12l[?25h[?25llo[46m)[m„Éê [16;1H[93m [15;87H[?12l[?25h[?25l[mon[46m)[m[94m>>[m[16;1H[93m [m[3C„Éê„Ç§„ÉàÁßªÂãï */[15;88H[?12l[?25h[?25lng[46m))[m[16;1H[93m [15;89H[?12l[?25h[?25l[mg  [16;1H[93m    [m[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;5H[?12l[?25h[?25l[93m [ml[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;6H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;7H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;8H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;9H[?12l[?25h[?25lg [46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;10H[?12l[?25h[?25lg[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[16;23H[K[16;9H[?12l[?25h[?25l[1C[?12l[?25h[?25l[15;84H(long  [16;1H[93m [m[7C)i„Éê„Ç§„ÉàÁßªÂãï */[16;11H[?12l[?25h[?25lid„Éê„Ç§„ÉàÁßªÂãï */[16;12H[?12l[?25h[29;1H[K[16;11H[?25l[?12l[?25h[?25l[29;1H?fseek[14;7H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END); /* „Éï„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§[94m>>[m[13;1H[93m    [m„ÉàÁßªÂãï */
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeoo[22;1H[93m    [mf(real)); /*  */
[93m343 [m  if (syn0 == NULL) {printf("Memory allocation failed\n"); exit(1);}
[93m344 [m  if (hs) { /* hs=0„Çà„Çä„Åì„ÅÆifÊñá„ÅØFALSE */
[93m345 [m    a = posix_memalign((void **)&syn1, 128, (long long)vocab_size * layer1_size * sizz[26;1H[93m    [meof(real)); /* (long long)vocab_size * layer1_size * sizeof(real) bytes„ÅÆ„É°„É¢„É™„ÇíÂâ≤ÂΩì[27;1H[93m    [m„Å¶ÔºåÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„Çí(void **)&syn1„Å´Ââ≤ÂΩì„ÇãÔºéÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅØ128„ÅÆÂÄçÊï∞[28;1H[93m    [m */[12;7H[?12l[?25h[?25l[29;1H/fseek[27m[m[H[2J[1;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[2;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[8;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[10;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[12;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï„Ç°„Ç§[14;1H[93m    [m„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (long  [15;1H[93m    [mlong)id„Éê„Ç§„ÉàÁßªÂãï */
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[23;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[25;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 1[28;1H[94m@                                                                                        [13;7H[?12l[?25h[?25l[m[29;1H/fseek[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß [21;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[23;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[25;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden
[93m425 [m      cw = 0;
[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[13;11H[?12l[?25h[71C[?25l[29;1H[1m-- INSERT --[13;83H[?12l[?25h[?25l[m [?12l[?25h[?25l[14;28r[14;1H[L[1;29r[13;84H /* „Éï[14;1H[93m    [m„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§>    „ÉàÁßªÂãï */[?12l[?25h[?25l „ÉàÁßªÂãï */[14;70H[K[14;61H[?12l[?25h[?25l „ÉàÁßªÂãï */[14;69H[K[14;60H[?12l[?25h[?25l „ÉàÁßªÂãï */[14;68H[K[14;59H[?12l[?25h[?25l>„ÉàÁßªÂãï */[14;67H[K[14;58H[?12l[?25h[?25l„ÉàÁßªÂãï */[14;66H[K[14;57H[?12l[?25h[?25l„Éê„Ç§„ÉàÁßªÂãï */[14;65H[K[14;52H[?12l[?25h[?25lf„Éê„Ç§„ÉàÁßªÂãï */[14;53H[?12l[?25h[?25lfi„Éê„Ç§„ÉàÁßªÂãï */[14;54H[?12l[?25h[?25lil„Éê„Ç§„ÉàÁßªÂãï */[14;55H[?12l[?25h[?25lle„Éê„Ç§„ÉàÁßªÂãï */[14;56H[?12l[?25h[?25le_„Éê„Ç§„ÉàÁßªÂãï */[14;57H[?12l[?25h[?25l_s„Éê„Ç§„ÉàÁßªÂãï */[14;58H[?12l[?25h[?25lsi„Éê„Ç§„ÉàÁßªÂãï */[14;59H[?12l[?25h[?25liz„Éê„Ç§„ÉàÁßªÂãï */[14;60H[?12l[?25h[?25lze„Éê„Ç§„ÉàÁßªÂãï */[14;61H[?12l[?25h[?25le „Éê„Ç§„ÉàÁßªÂãï */[14;62H[?12l[?25h[?25l /„Éê„Ç§„ÉàÁßªÂãï */[14;63H[?12l[?25h[?25l/ „Éê„Ç§„ÉàÁßªÂãï */[14;64H[?12l[?25h[?25l („Éê„Ç§„ÉàÁßªÂãï */[14;65H[?12l[?25h[?25l[46m()[m„Éê„Ç§„ÉàÁßªÂãï */[14;66H[?12l[?25h[?25l[?12l[?25h[?25l[46m([ml[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;66H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;67H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;68H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;69H[?12l[?25h[?25lg [46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;70H[?12l[?25h[?25l l[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;71H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;72H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;73H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[14;74H[?12l[?25h[?25l[1C[?12l[?25h[?25l[14;64H([9C)n„Éê„Ç§„ÉàÁßªÂãï */[14;76H[?12l[?25h[?25lnu„Éê„Ç§„ÉàÁßªÂãï */[14;77H[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;76Hum„Éê„Ç§„ÉàÁßªÂãï **[15;1H[93m    [m/[14;78H[?12l[?25h[?25lm_„Éê„Ç§„ÉàÁßªÂãï  [15;1H[93m    [m*/[14;79H[?12l[?25h[?25l_t„Éê„Ç§„ÉàÁßªÂãï [15;1H[93m    [m */[14;80H[?12l[?25h[?25lth„Éê„Ç§„ÉàÁßª[94m>>[m[15;1H[93m    [mÂãï */[14;81H[?12l[?25h[?25lhr„Éê„Ç§„ÉàÁßª [15;1H[93m [14;82H[?12l[?25h[?25l[mre„Éê„Ç§„Éà[94m>>[m[15;1H[93m    [mÁßªÂãï */[14;83H[?12l[?25h[?25lea„Éê„Ç§„Éà [15;1H[93m [14;84H[?12l[?25h[?25l[mad„Éê„Ç§[94m>>[m[15;1H[93m    [m„ÉàÁßªÂãï */[14;85H[?12l[?25h[?25lds„Éê„Ç§ [15;1H[93m [14;86H[?12l[?25h[?25l[ms „Éê[94m>>[m[15;1H[93m [m[3C„Ç§„ÉàÁßªÂãï */[14;87H[?12l[?25h[?25l *„Éê [15;1H[93m [14;88H[?12l[?25h[?25l[m* [94m>>[m[15;1H[93m [m[3C„Éê„Ç§„ÉàÁßªÂãï */[15;5H[?12l[?25h[?25l[14;88H (([15;1H[93m    [?12l[?25h[?25l[m[14;89H[46m(([m[15;1H[93m    [m[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;6H[?12l[?25h[?25l[?12l[?25h[?25l[93m [ml[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;6H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;7H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;8H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;9H[?12l[?25h[?25lg [46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;10H[?12l[?25h[?25l l[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;11H[?12l[?25h[?25llo[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;12H[?12l[?25h[?25lon[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;13H[?12l[?25h[?25lng[46m)[m„Éê„Ç§„ÉàÁßªÂãï */[15;14H[?12l[?25h[?25l[1C[?12l[?25h[?25l[14;89H(([15;1H[93m [m[12C)i„Éê„Ç§„ÉàÁßªÂãï */[15;16H[?12l[?25h[?25lid„Éê„Ç§„ÉàÁßªÂãï */[15;17H[?12l[?25h[?25l[14;89H[46m(([m[15;1H[93m [m[12C[46m)[?12l[?25h[?25l[?12l[?25h[?25l[m[14;89H(([15;1H[93m [m[12C)[?12l[?25h[?25l[14;89H[46m(([m[15;1H[93m [m[12C[46m)[15;5H[?12l[?25h[?25l[14;89H[?12l[?25h[?25l[m(([15;1H[93m [m[12C)[14;88H[?12l[?25h[?25l[14;64H[46m([9C)[m[14C(([15;1H[93m [14;75H[?12l[?25h[?25l[m[14C(([15;1H[93m [14;74H[?12l[?25h[?25l[m[14;64H([9C)[14C(([15;1H[93m [14;73H[?12l[?25h[?25l[m[46m([9C)[m[14C(([15;1H[93m [14;65H[?12l[?25h[?25l[m[24C(([15;1H[93m [14;64H[?12l[?25h[?25l[m([9C)[14C(([15;1H[93m [14;63H[?12l[?25h[mD[?25lN„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[15;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */[15;29H[K[14;43H[?12l[?25h[?25lE„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (loo[15;1H[93m    [mng long)id„Éê„Ç§„ÉàÁßªÂãï */[15;28H[K[14;42H[?12l[?25h[?25l_„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (lonn[15;1H[93m    [mg long)id„Éê„Ç§„ÉàÁßªÂãï */[15;27H[K[14;41H[?12l[?25h[?25l_S„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (loo[15;1H[93m    [mng long)id„Éê„Ç§„ÉàÁßªÂãï */[14;42H[?12l[?25h[?25lSE„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[15;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */[14;43H[?12l[?25h[?25lET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (([15;1H[93m    [mlong long)id„Éê„Ç§„ÉàÁßªÂãï */[14;44H[?12l[?25h[?25li„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[15;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */[15;29H[K[14;13H[?12l[?25h[29;1H[K[14;12H[?25l[?12l[?25h[?25l[29;1H/fseek[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END); /* „Éï„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§[94m>>[m[13;1H[93m    [m„ÉàÁßªÂãï */
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeoo[22;1H[93m    [mf(real)); /*  */
[93m343 [m  if (syn0 == NULL) {printf("Memory allocation failed\n"); exit(1);}
[93m344 [m  if (hs) { /* hs=0„Çà„Çä„Åì„ÅÆifÊñá„ÅØFALSE */
[93m345 [m    a = posix_memalign((void **)&syn1, 128, (long long)vocab_size * layer1_size * sizz[26;1H[93m    [meof(real)); /* (long long)vocab_size * layer1_size * sizeof(real) bytes„ÅÆ„É°„É¢„É™„ÇíÂâ≤ÂΩì[27;1H[93m    [m„Å¶ÔºåÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„Çí(void **)&syn1„Å´Ââ≤ÂΩì„ÇãÔºéÂâ≤ÂΩì„Åü„É°„É¢„É™„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅØ128„ÅÆÂÄçÊï∞[28;1H[93m    [m */
[38;5;224msearch hit BOTTOM, continuing at TOP[12;7H[?12l[?25h[?25l[m[29;1H/fseek[29;7H[K[29;1H[27m[m[H[2J[1;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[2;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[8;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[10;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[12;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï„Ç°„Ç§[14;1H[93m    [m„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (long  [15;1H[93m    [mlong)id„Éê„Ç§„ÉàÁßªÂãï */
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[23;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[25;1H[93m    [m;
[93m383 [m[7C fflush(stdout);
[93m384 [m      }
[93m385 [m      alpha = starting_alpha * (1 - word_count_actual / (real)(iter * train_words + 1[28;1H[94m@                                                                                        [13;7H[?12l[?25h[?25l[m[29;1H/fseek[27m[m[H[2J[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[3;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[6;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï[14;1H[93m    [m„Ç°„Ç§„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[15;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;
[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;
[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß [23;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */
[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[25;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[27;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden[13;11H[?12l[?25h[?25l[29;1H/[?12l[?25hpthread[?25l[27m[m[H[2J[1;1H[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[8;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL); /* Âëº„Å≥Âá∫„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü */
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[21;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;7H[?12l[?25h[?25l[29;1H/pthread[20;7H[?12l[?25h[?25l[29;1H?[14;7H[?12l[?25hpthread_exi[?25lt[46m([mNULL[46m)[?12l[?25h[?25l[m(NULL)[?12l[?25hNUL[?25l[46m([mNULL[46m)[?12l[?25h[?25l[m(NULL)[?12l[?25h; /* [2C[2C[2C[2C[2C[2C[15;41H[16;5H[15;41H[?25l[29;1H[K[29;1H/[?12l[?25hThread[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[28;1H[93m    [moid *)a);[29;1H[K[27;80H[?12l[?25h[?25l

?Thread[12;33H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */[15;21H[?12l[?25h[?25l[29;1H?Thread[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[5;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[15;1H[93m    [moid *)a);
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][24;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[26;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[38;5;224msearch hit TOP, continuing at BOTTOM[14;80H[?12l[?25h[?25l[m[29;1H/Thread[29;8H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[38;5;224msearch hit BOTTOM, continuing at TOP[15;21H[?12l[?25h[?25l[m[29;1H[K[29;1H/[?12l[?25hthread[?25l[1;28r[1;1H[4M[1;29r[25;1H[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï„Ç°„Ç§[26;1H[93m    [m„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (long  [27;1H[93m    [mlong)id„Éê„Ç§„ÉàÁßªÂãï */
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */[29;1H[K[25;44H[?12l[?25h[?25l[29;1H/thread[26;74H[?12l[?25h[?25l


[1;28r[1;1H[6M[1;29r[23;1H[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[29;1H[K[28;58H[?12l[?25h[?25l
/thread[27m[m[H[2J[1;1H[93m399 [m[9C if (ran < (next_random & 0xFFFF) / (real)65536) continue; /* ran < (next_raa[2;1H[93m    [mndom & 0xFFFF) / (real)65536 „ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶390Ë°åÁõÆ„Å´Êàª„Çã */
[93m400 [m[7C } /* 396Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñá„Åì„Åì„Åæ„Åß */
[93m401 [m[7C sen[sentence_length] = word; /* ÈÖçÂàósen„ÅÆÂêÑË¶ÅÁ¥†„Å´word„Çí‰ª£ÂÖ• */
[93m402 [m[7C sentence_length++; /* „Åì„Åì„Åßsentence_length„ÅåÂ¢ó„Åà„Çã */
[93m403 [m[7C if (sentence_length >= MAX_SENTENCE_LENGTH) break; /* sentence_length„ÅåMAX_SEE[7;1H[93m    [mNTENCE_LENGTH == 1000„Å´ÈÅî„Åó„ÅüÊôÇ389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ (i.e. ÈÖçÂàósen„ÅØMAX_SENN[8;1H[93m    [mTENCE_LENGTH + 1ÂÄã„ÅÆË¶ÅÁ¥†„ÅåÊúâ„Çã„ÅÆ„ÅßÔºåsen„ÅÆÂêÑË¶ÅÁ¥†„Å´word„Çí‰ª£ÂÖ•„ÅóÁµÇ„Çè„Å£„Åü„ÇâÁÑ°Èôê„É´„Éº„Éó„ÇíÊäú[9;1H[93m    [m„Åë„Çã) */
[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */
[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[12;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */
[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */
[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[15;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */
[93m408 [m      word_count_actual += word_count - last_word_count;
[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */
[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */
[93m411 [m      word_count = 0;
[93m412 [m      last_word_count = 0;
[93m413 [m      sentence_length = 0;
[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï[23;1H[93m    [m„Ç°„Ç§„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[24;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */
[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */
[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */
[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */
[93m418 [m    if (word == -1) continue;[14;57H[?12l[?25h[?25l[29;1H/thread[15;53H[?12l[?25h[?25l[29;1H[22;48H[?12l[?25h[?25l[29;1H[23;78H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[8;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL); /* Âëº„Å≥Âá∫„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü */
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[21;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();[14;8H[?12l[?25h[?25l[29;1H/[?12l[?25hpthread_[?25l[20;7H[?12l[?25h[?25l[29;1H[20;24H[?12l[?25h[?25l[29;1H[20;64H[?12l[?25h[?25l[29;1H[1;28r[1;1H[3M[1;29r[26;1H[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[28;1H[93m    [moid *)a);[29;1H[K[27;41H[?12l[?25h[?25l

/pthread_[1;28r[28;1H
[1;29r[28;1H[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);[29;1H[K[28;41H[?12l[?25h[?25l
/pthread_[38;5;224msearch hit BOTTOM, continuing at TOP[10;7H[?12l[?25h[?25l[m[29;1H/pthread_[29;10H[K[29;1H[16;7H[?12l[?25h[?25l[29;1H[16;24H[?12l[?25h[?25l[29;1H[16;64H[?12l[?25h[?25l[29;1H[26;41H[?12l[?25h[?25l


[28;41H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[10;7H[?12l[?25h[?25l[m[29;1H/pthread_[29;10H[K[29;1H[16;7H[?12l[?25h[?25l[29;1H[16;24H[?12l[?25h[?25l[29;1H[16;64H[?12l[?25h[?25l[29;1H[26;41H[?12l[?25h[?25l


[28;41H[?12l[?25h[?25l[29;1H[K[29;1H/[?12l[?25hTrainModelThread[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢ [2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[38;5;224msearch hit BOTTOM, continuing at TOP[15;11H[?12l[?25h[?25l[m[29;1H?TrainModelThread[29;18H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[5;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[15;1H[93m    [moid *)a);
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][24;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[26;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[38;5;224msearch hit TOP, continuing at BOTTOM[14;70H[?12l[?25h[?25l[m[29;1H/TrainModelThread[29;18H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢ [2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[38;5;224msearch hit BOTTOM, continuing at TOP[15;11H[?12l[?25h[?25l[m[29;1H?TrainModelThread[29;18H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[5;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[15;1H[93m    [moid *)a);
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][24;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[26;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[38;5;224msearch hit TOP, continuing at BOTTOM[14;70H[?12l[?25h[?25l[m[29;1H?TrainModelThread[29;18H[K[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 [m[29;1H[K[1;23H[?12l[?25h[?25l[29;1H/TrainModelThread[16;70H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[38;5;224msearch hit BOTTOM, continuing at TOP[15;11H[?12l[?25h[?25l[m[29;1H/TrainModelThread[29;18H[K[29;1H[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL); /* Âëº„Å≥Âá∫„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü */
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;23H[?12l[?25h[?25l[29;1H/TrainModelThread[1;28r[1;1H[2M[1;29r[27;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[28;1H[93m    [moid *)a);[29;1H[K[27;70H[?12l[?25h[?25l

/[?12l[?25hpthread[?25l[1;28r[28;1H
[1;29r[28;1H[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);[29;1H[K[28;41H[?12l[?25h[?25l
/pthread[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[23;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;15H[?12l[?25h[?25l[m[29;1H?pthread[29;9H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[3;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[13;1H[93m    [moid *)a);
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL);
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][22;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[24;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[38;5;224msearch hit TOP, continuing at BOTTOM[14;41H[?12l[?25h[?25l[m[29;1H?pthread[29;9H[K[29;1H[12;41H[?12l[?25h[13;13H[?25l[29;1H[1m-- INSERT --[13;14H[?12l[?25h[?25l[m [?12l[?25h[?25l .[?12l[?25h[?25l[13;15H[K[13;15H[?12l[?25h[?25l /[?12l[?25h[?25l/+[?12l[?25h[?25l [?12l[?25h[?25l[?12l[?25h[?25l[13;16H[K[13;16H[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l  */[?12l[?25h  [?25l */[13;21H[K[13;18H[?12l[?25h[?25l 0 */[?12l[?25h[?25l0< */[?12l[?25h[?25l0 */[13;22H[K[13;19H[?12l[?25h[?25l  */[?12l[?25h[?25l < */[?12l[?25h[?25l<= */[?12l[?25h[?25l  */[?12l[?25h[?25l 1 */[?12l[?25h[?25l  */[?12l[?25h[?25l M */[?12l[?25h[?25l  */[13;28H[K[13;25H[?12l[?25h[?25l < */[?12l[?25h[?25l  */[?12l[?25h[?25l n */[?12l[?25h[?25lnu */[?12l[?25h[?25lum */[?12l[?25h[?25lmm */[?12l[?25h[?25lm_ */[?12l[?25h[?25lm */[13;34H[K[13;31H[?12l[?25h[?25lm */[13;33H[K[13;30H[?12l[?25h[?25lm_ */[?12l[?25h[?25l_t */[?12l[?25h[?25lth */[?12l[?25h[?25lhr */[?12l[?25h[?25lre */[?12l[?25h[?25lea */[?12l[?25h[?25lad */[?12l[?25h[?25lds */[?12l[?25h[?25l  */[?12l[?25h[?25l */[13;41H[K[13;38H[?12l[?25h[?25ls„Åß */[?12l[?25h[?25lÊñ∞Ë¶è„Å´ */[?12l[?25h[?25l„Çπ„É¨„ÉÉ„Éâ„Çí */[?12l[?25h[?25l‰ΩúÊàê */[?12l[?25h[14;67H[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l „Çπ„É¨„ÉÉ„Éâ */[?12l[?25h[?25lp */[?12l[?25h[?25lpt */[?12l[?25h[?25lt[ */[?12l[?25h[?25l[1 */[?12l[?25h[?25l[46m[[m1[46m][m */[?12l[?25h[?25l[1 */[14;86H[K[14;83H[?12l[?25h[?25l[ */[14;85H[K[14;82H[?12l[?25h[?25l[a */[?12l[?25h[?25l[46m[[ma[46m][m */[?12l[?25h[?25l[a]„Åå */[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;86HÁµÇ‰∫Ü [15;1H[93m    [m */[?12l[?25h[?25l[93m [m„Åô„Çã„Åæ„Åß */[?12l[?25h[?25lÂÆüË°å„Çí */[?12l[?25h[?25l‰∏ÄÊôÇ */[?12l[?25h[?25lÂÅúÊ≠¢ */[?12l[?25h[14;88H[?25l[46m[[ma[46m][m[5C  [15;1H[93m [14;84H[?12l[?25h[?25l[m[5C  [15;1H[93m [14;83H[?12l[?25h[?25l[m[6C  [15;1H[93m [14;82H[?12l[?25h[?25l[m[7C  [15;1H[93m [14;81H[?12l[?25h[?25l[m[a][5C  [15;1H[93m [14;80H[?12l[?25h[?25l[m[14;53H[46m([11C)[m[23C  [15;1H[93m [14;66H[?12l[?25h[?25l[m[14;53H([11C)[23C  [15;1H[93m [12;66H[?12l[?25h[?25l[m[23Cvv[13;1H[93m [m[14;53H[46m([11C)[m[23C  [15;1H[93m [14;66H[?12l[?25h[?25l[m[14;53H([11C)[23C  [15;1H[93m [12;66H[?12l[?25h[mLL, TrainModelThread,[?25l [46m([mvv[13;1H[93m [m[8C[46m)[12;88H[?12l[?25h[?25l[m[1Cvv[13;1H[93m [12;89H[?12l[?25h[?25l[m(vv[13;1H[93m [m[8C)[13;5H[?12l[?25hoid [?25l[12;88H[46m([mvv[13;1H[93m [m[8C[46m)[?12l[?25h[?25l)[?12l[?25h[?25l[12;55H([m[32C(vv[13;1H[93m [m[8C)a[46m)[?12l[?25h[?25l)[?12l[?25h[?25l[m[12;55H([33Cvv[13;1H[93m [m[10C);[?12l[?25h /* 0 <= 1 < num_threads[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[?25la„Çí‰ΩúÊàê */[13;55H[?12l[?25h[?25l„Çí‰ΩúÊàê */[13;63H[K[13;54H[?12l[?25h[?25l(„Çí‰ΩúÊàê */[13;55H[?12l[?25h[?25l[46m()[m„Çí‰ΩúÊàê */[13;56H[?12l[?25h[?25l[?12l[?25h[?25l[46m([mI[46m)[m„Çí‰ΩúÊàê */[13;56H[?12l[?25h[?25lID[46m)[m„Çí‰ΩúÊàê */[13;57H[?12l[?25h[?25lD*[46m)[m„Çí‰ΩúÊàê */[13;58H[?12l[?25h[?25lD[46m)[m„Çí‰ΩúÊàê */[13;67H[K[13;57H[?12l[?25h[?25lD:[46m)[m„Çí‰ΩúÊàê */[13;58H[?12l[?25h[?25l: [46m)[m„Çí‰ΩúÊàê */[13;59H[?12l[?25h[?25l p[46m)[m„Çí‰ΩúÊàê */[13;60H[?12l[?25h[?25lpt[46m)[m„Çí‰ΩúÊàê */[13;61H[?12l[?25h[?25lt[[46m)[m„Çí‰ΩúÊàê */[13;62H[?12l[?25h[?25l[1[46m)[m„Çí‰ΩúÊàê */[13;63H[?12l[?25h[?25l[[46m)[m„Çí‰ΩúÊàê */[13;72H[K[13;62H[?12l[?25h[?25l[a[46m)[m„Çí‰ΩúÊàê */[13;63H[?12l[?25h[?25la][46m)[m„Çí‰ΩúÊàê */[13;64H[?12l[?25h[?25l[1C[?12l[?25h[?25l[13;54H([9C)[2C[?12l[?25h[2C[2C[?25l„Åó */[?12l[?25h[?25lÔºå */[?12l[?25h[?25lT */[?12l[?25h[?25lTr */[?12l[?25h[?25lra */[?12l[?25h[?25lai */[?12l[?25h[?25lin */[?12l[?25h[?25lnM */[?12l[?25h[?25lMo */[?12l[?25h[?25lod */[?12l[?25h[?25lde */[?12l[?25h[?25lel */[?12l[?25h[?25llT */[?12l[?25h[?25lTh */[13;87H[?12l[?25h[?25l[14;28r[14;1H[L[1;29r[13;86Hhr **[14;1H[93m    [m/[13;88H[?12l[?25h[?25lre  [14;1H[93m    [m*/[13;89H[?12l[?25h[?25leaa[14;1H[93m    [m */[?12l[?25h[?25l[93m [md */[?12l[?25h[?25ld„Çí */[?12l[?25h[?25lÂÆüË°å„Åô„Çã */[?12l[?25h[16;30H[15;88H[?25l[46m[[ma[46m][m[5C  [16;1H[93m [15;84H[?12l[?25h[?25l[m[5C  [16;1H[93m [15;83H[?12l[?25h[?25l[m[6C  [16;1H[93m [15;82H[?12l[?25h[?25l[m[7C  [16;1H[93m [15;81H[?12l[?25h[?25l[m[a][5C  [16;1H[93m [15;80H[?12l[?25h[?25l[mIpt[a]„ÅåÁµÇ[94m>>[m[16;1H[93m    [m‰∫Ü„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[15;80H[?12l[?25h[?25lIDpt[a]„ÅåÁµÇ [16;1H[93m [15;81H[?12l[?25h[?25l[mD:pt[a]„Åå[94m>>[m[16;1H[93m    [mÁµÇ‰∫Ü„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[15;82H[?12l[?25h[?25l: pt[a]„Åå [16;1H[93m [15;83H[?12l[?25h[?25l[m:pt[a]„Åå[94m>>[m[16;1H[93m [15;82H[?12l[?25h[?25l[m: pt[a]„Åå [16;1H[93m [15;83H[?12l[?25h[?25l[m:pt[a]„Åå[94m>>[m[16;1H[93m [15;82H[?12l[?25h[?25l[m: pt[a]„Åå [16;1H[93m [15;83H[?12l[?25h[?25l[m[15;53H[46m([11C)[m[23C  [16;1H[93m [15;66H[?12l[?25h[?25l[m[23C  [16;1H[93m [15;65H[?12l[?25h[?25l[m[15;53H([11C)[23C  [16;1H[93m [15;64H[?12l[?25h[?25l[m[46m[[ma[46m][m[30C  [16;1H[93m [15;59H[?12l[?25h[?25l[m[30C  [16;1H[93m [15;58H[?12l[?25h[?25l[m[31C  [16;1H[93m [15;57H[?12l[?25h[?25l[m[32C  [16;1H[93m [15;56H[?12l[?25h[?25l[m[a][30C  [16;1H[93m [15;55H[?12l[?25h[?25l[m[46m([11C)[m[23C  [16;1H[93m [15;54H[?12l[?25h[?25l[m[35C  [16;1H[93m [15;53H[?12l[?25h[?25l[m([11C)[23C  [16;1H[93m [12;53H[?12l[?25h[11;23H[10;44H[9;17H[8;39H[7;48H[6;53H[5;30H[4;53H[2;53H[1;16H[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m546 [m  long a, b, c, d;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m544 [m[28;1H[94m@                                                                                        [1;5H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m542 [m  pthread_exit(NULL); /* Âëº„Å≥Âá∫„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü */[28;1H[94m@                                                                                        [1;52H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[1;53H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[1;53H[?12l[?25h[2;53H[3;50H[2C[2C[?25l( */[?12l[?25h[?25l[46m()[m */[?12l[?25h[?25l[?12l[?25h[?25l[46m([m5[46m)[m */[?12l[?25h[?25l55[46m)[m */[?12l[?25h[?25l57[46m)[m */[?12l[?25h[?25l7Ë°åÁõÆ[46m)[m */[?12l[?25h[?25l„Å®[46m)[m */[?12l[?25h[?25l5[46m)[m */[?12l[?25h[?25l55[46m)[m */[?12l[?25h[?25l58[46m)[m */[?12l[?25h[?25l8Ë°åÁõÆ[46m)[m */[?12l[?25h[?25l„Å´[46m)[m */[?12l[?25h[?25lÈñ¢‰øÇ[46m)[m */[?12l[?25h[?25l[3;54H([22C)[4;48H[?12l[?25h[5;5H[6;42H[7;23H[8;16H[9;77H[11;63H[12;30H[?25l[13;77H[46m()[?12l[?25h[?25l[m()[14;48H[?12l[?25h[15;39H[16;17H[17;44H[18;23H[19;77H[22;77H[24;37H[22;77H[2CID: p[?25lt[46m[[ma[46m][m[1C  [23;1H[93m [22;85H[?12l[?25h[?25l[m[4C  [23;1H[93m [22;86H[?12l[?25h[?25l[m[3C  [23;1H[93m [22;87H[?12l[?25h[?25l[m[2C  [23;1H[93m [22;88H[?12l[?25h[?25l[m[a][1C  [23;1H[93m    [?12l[?25h[2C[2C[?25l[m(„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;10H[?12l[?25h[?25l[46m()[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;11H[?12l[?25h[?25l[?12l[?25h[?25l[46m([mT[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;11H[?12l[?25h[?25lTr[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;12H[?12l[?25h[?25lra[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;13H[?12l[?25h[?25lai[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;14H[?12l[?25h[?25lin[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;15H[?12l[?25h[?25lnM[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;16H[?12l[?25h[?25lMo[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;17H[?12l[?25h[?25lod[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;18H[?12l[?25h[?25lde[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;19H[?12l[?25h[?25lel[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;20H[?12l[?25h[?25llT[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;21H[?12l[?25h[?25lTh[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;22H[?12l[?25h[?25lhr[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;23H[?12l[?25h[?25lre[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;24H[?12l[?25h[?25lea[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;25H[?12l[?25h[?25lad[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;26H[?12l[?25h[?25ld„Åå[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;28H[?12l[?25h[?25l5[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;29H[?12l[?25h[?25l54[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;30H[?12l[?25h[?25l43[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;31H[?12l[?25h[?25l3Ë°åÁõÆ[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;35H[?12l[?25h[?25l„Åß[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;37H[?12l[?25h[?25l„Çπ„É¨„ÉÉ„Éâ„Çí[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;47H[?12l[?25h[?25lÁµÇ„Çè„Çâ„Åõ„Çã[46m)[m„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[23;57H[?12l[?25h[?25l[23;9H([47C)[24;37H[?12l[?25h[?25l[25;26H[?12l[?25h[26;33H[27;61H[?25l[28;43H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m564 [m      fprintf(fo, "%s ", vocab[a].word);[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][28;1H[93m    [m, sizeof(real), 1, fo);[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[28;1H[93m    [m + b]);[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m567 [m      fprintf(fo, "\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[21;42H[46m{[m[28;1H[93m568 [m    [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[20;42H{[27;9H}
[93m569 [m  } else {[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;[27;43H[?12l[?25h[?25l[26;15H[?12l[?25h[?25l[18;42H[46m{[25;9H}[?12l[?25h[?25l[m[18;42H{[25;9H}[24;29H[?12l[?25h[23;12H[21;28H[19;45H[?25l[18;42H[46m{[25;9H}[18;43H[?12l[?25h[?25l[m{[25;9H}[17;61H[?12l[?25h[16;33H[?25l[15;25H[46m{[26;7H}[15;26H[?12l[?25h[?25l[m{[26;7H}[14;37H[?12l[?25h[29;1H[K[14;36H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hfopen[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m260 [m  free(parent_node); /* parent_nodeÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m261 [m}
[93m262 
263 [mvoid LearnVocabFromTrainFile() { /* voidÂûãÈñ¢Êï∞LearnVocabFromTrainFile() */
[93m264 [m  char word[MAX_STRING];
[93m265 [m  FILE *fin; /* FILEÂûã„Éù„Ç§„É≥„Çøfin */
[93m266 [m  long long a, i; /* long longÂûãÂ§âÊï∞a, i */
[93m267 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[13;1H[93m    [mze„ÅÆÊôÇvocab_hash[a]„Å´-1„Çí‰ª£ÂÖ• */
[93m268 [m  fin = fopen(train_file, "rb"); /* train_file„ÇíË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */
[93m269 [m  if (fin == NULL) { /* „Éù„Ç§„É≥„Çøfin„ÅåNULL„ÅÆÊôÇ */
[93m270 [m    printf("ERROR: training data file not found!\n");
[93m271 [m    exit(1);
[93m272 [m  }
[93m273 [m  vocab_size = 0;
[93m274 [m  AddWordToVocab((char *)"</s>"); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m275 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m276 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞„Åßtrain_file„ÅÆÂçòË™û„ÇíË™≠„ÅøËæº„ÇÄ  [23;1H[93m    [m*/
[93m277 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m278 [m    train_words++; /* train_words„Å´1„ÇíË∂≥„Åô */
[93m279 [m    if ((debug_mode > 1) && (train_words % 100000 == 0)) { /* debug_mode > 1„Åã„Å§trainn[27;1H[93m    [m_words„Åå100000„ÅßÂâ≤Âàá„Çå„ÇãÊôÇ */
[93m280 [m      printf("%lldK%c", train_words / 1000, 13);
[38;5;224msearch hit BOTTOM, continuing at TOP[14;13H[?12l[?25h[?25l[m[29;1H?fopen[29;7H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå [13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;12H[?12l[?25h[?25l[m[29;1H/fopen[29;7H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m260 [m  free(parent_node); /* parent_nodeÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m261 [m}
[93m262 
263 [mvoid LearnVocabFromTrainFile() { /* voidÂûãÈñ¢Êï∞LearnVocabFromTrainFile() */
[93m264 [m  char word[MAX_STRING];
[93m265 [m  FILE *fin; /* FILEÂûã„Éù„Ç§„É≥„Çøfin */
[93m266 [m  long long a, i; /* long longÂûãÂ§âÊï∞a, i */
[93m267 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[13;1H[93m    [mze„ÅÆÊôÇvocab_hash[a]„Å´-1„Çí‰ª£ÂÖ• */
[93m268 [m  fin = fopen(train_file, "rb"); /* train_file„ÇíË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */
[93m269 [m  if (fin == NULL) { /* „Éù„Ç§„É≥„Çøfin„ÅåNULL„ÅÆÊôÇ */
[93m270 [m    printf("ERROR: training data file not found!\n");
[93m271 [m    exit(1);
[93m272 [m  }
[93m273 [m  vocab_size = 0;
[93m274 [m  AddWordToVocab((char *)"</s>"); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m275 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m276 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞„Åßtrain_file„ÅÆÂçòË™û„ÇíË™≠„ÅøËæº„ÇÄ  [23;1H[93m    [m*/
[93m277 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m278 [m    train_words++; /* train_words„Å´1„ÇíË∂≥„Åô */
[93m279 [m    if ((debug_mode > 1) && (train_words % 100000 == 0)) { /* debug_mode > 1„Åã„Å§trainn[27;1H[93m    [m_words„Åå100000„ÅßÂâ≤Âàá„Çå„ÇãÊôÇ */
[93m280 [m      printf("%lldK%c", train_words / 1000, 13);
[38;5;224msearch hit BOTTOM, continuing at TOP[14;13H[?12l[?25h[?25l[m[29;1H?fopen[29;7H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå [13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb");
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;12H[?12l[?25h[24C[?25l[m[29;1H[1m-- INSERT --[m[29;13H[K[14;37H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l o */[?12l[?25h[?25lou */[?12l[?25h[?25lut */[?12l[?25h[?25ltp */[?12l[?25h[?25lpu */[?12l[?25h[?25lut */[?12l[?25h[?25lt_ */[?12l[?25h[?25l_f */[?12l[?25h[?25lfi */[?12l[?25h[?25lil */[?12l[?25h[?25lle */[?12l[?25h[?25le„Çí */[?12l[?25h[?25l„Éê„Ç§„Éä„É™ */[?12l[?25h[?25l„É¢„Éº„Éâ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lÊõ∏Ëæº„Åø */[?12l[?25h[?25l */[14;77H[K[14;74H[?12l[?25h[?25lÂ∞ÇÁî® */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lÈñã„Åè */[?12l[?25h[29;1H[K[14;82H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hfopen[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m260 [m  free(parent_node); /* parent_nodeÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m261 [m}
[93m262 
263 [mvoid LearnVocabFromTrainFile() { /* voidÂûãÈñ¢Êï∞LearnVocabFromTrainFile() */
[93m264 [m  char word[MAX_STRING];
[93m265 [m  FILE *fin; /* FILEÂûã„Éù„Ç§„É≥„Çøfin */
[93m266 [m  long long a, i; /* long longÂûãÂ§âÊï∞a, i */
[93m267 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[13;1H[93m    [mze„ÅÆÊôÇvocab_hash[a]„Å´-1„Çí‰ª£ÂÖ• */
[93m268 [m  fin = fopen(train_file, "rb"); /* train_file„ÇíË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */
[93m269 [m  if (fin == NULL) { /* „Éù„Ç§„É≥„Çøfin„ÅåNULL„ÅÆÊôÇ */
[93m270 [m    printf("ERROR: training data file not found!\n");
[93m271 [m    exit(1);
[93m272 [m  }
[93m273 [m  vocab_size = 0;
[93m274 [m  AddWordToVocab((char *)"</s>"); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m275 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m276 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞„Åßtrain_file„ÅÆÂçòË™û„ÇíË™≠„ÅøËæº„ÇÄ  [23;1H[93m    [m*/
[93m277 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m278 [m    train_words++; /* train_words„Å´1„ÇíË∂≥„Åô */
[93m279 [m    if ((debug_mode > 1) && (train_words % 100000 == 0)) { /* debug_mode > 1„Åã„Å§trainn[27;1H[93m    [m_words„Åå100000„ÅßÂâ≤Âàá„Çå„ÇãÊôÇ */
[93m280 [m      printf("%lldK%c", train_words / 1000, 13);
[38;5;224msearch hit BOTTOM, continuing at TOP[14;13H[?12l[?25h[mfope[?25ln[46m([16C)[14;18H[?12l[?25h[?25l[m([16C)[14;19H[?12l[?25htrain_file, "rb[?25l[14;18H[46m([16C)[?12l[?25h[?25l[m[14;18H([16C)[?12l[?25h; /* train_file[2C[?25l[29;1H[1m-- INSERT --[m[29;13H[K[14;55H[?12l[?25h[?25l„Éê„Ç§„Å™„ÅÑË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;61H[?12l[?25h[?25lË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;78H[K[14;59H[?12l[?25h[?25lË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;76H[K[14;57H[?12l[?25h[?25lË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;74H[K[14;55H[?12l[?25h[?25lË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;72H[K[14;53H[?12l[?25h[?25l„Éê„Ç§„Éä„É™Ë™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;61H[?12l[?25h[?25l„É¢„Éº„ÉâË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;67H[?12l[?25h[?25l„ÅßË™≠Ëæº„É¢„Éº„Éâ„ÅßÈñã„Åè */[14;69H[?12l[?25h[2C[2C[2C[2C[2C[?25l„ÅßÈñã„Åè */[14;86H[K[14;77H[?12l[?25h[?25l„ÅßÈñã„Åè */[14;84H[K[14;75H[?12l[?25h[?25l„ÅßÈñã„Åè */[14;82H[K[14;73H[?12l[?25h[?25lÂ∞ÇÁî®„ÅßÈñã„Åè */[14;77H[?12l[?25h[29;1H[K[14;75H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hfopen[?25l[27m[m[H[2J[1;1H[93m289 [m  }
[93m290 [m  SortVocab(); /* 146Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüË™ûÂΩô„ÇíÂçòË™ûÊï∞„ÇíÁî®„ÅÑ„Å¶È†ªÂ∫¶È†Ü„Å´‰∏¶Êõø„Åà„ÇãÈñ¢Êï∞SortVocab(([3;1H[93m    [m) */
[93m291 [m  if (debug_mode > 0) {
[93m292 [m    printf("Vocab size: %lld\n", vocab_size);
[93m293 [m    printf("Words in train file: %lld\n", train_words);
[93m294 [m  }
[93m295 [m  file_size = ftell(fin);
[93m296 [m  fclose(fin);
[93m297 [m}
[93m298 
299 [mvoid SaveVocab() {
[93m300 [m  long long i;
[93m301 [m  FILE *fo = fopen(save_vocab_file, "wb");
[93m302 [m  for (i = 0; i < vocab_size; i++) fprintf(fo, "%s %lld\n", vocab[i].word, vocab[i].cc[16;1H[93m    [mn);
[93m303 [m  fclose(fo);
[93m304 [m}
[93m305 
306 [mvoid ReadVocab() { /* voidÂûãÈñ¢Êï∞ReadVocab */
[93m307 [m  long long a, i = 0;
[93m308 [m  char c;
[93m309 [m  char word[MAX_STRING];
[93m310 [m  FILE *fin = fopen(read_vocab_file, "rb"); /* Ë™≠Ëæº„É¢„Éº„Éâ„Åßread_vocab_file„ÇíÈñã„Åè */
[93m311 [m  if (fin == NULL) {
[93m312 [m    printf("Vocabulary file not found\n");
[93m313 [m    exit(1);
[93m314 [m  }[14;18H[?12l[?25hfope[?25ln[46m([21C)[14;23H[?12l[?25h[?25l[m([21C)[14;24H[?12l[?25hsave_vocab_file, "wb[?25l[14;23H[46m([21C)[?12l[?25h[?25l[m[14;23H([21C)[?12l[?25h[?25l[29;1H[1m-- INSERT --[14;47H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l s */[?12l[?25h[?25lsa */[?12l[?25h[?25lav */[?12l[?25h[?25lve */[?12l[?25h[?25le_ */[?12l[?25h[?25l_v */[?12l[?25h[?25lvo */[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb_ */[?12l[?25h[?25l_s */[?12l[?25h[?25lsi */[?12l[?25h[?25lil */[?12l[?25h[?25li */[14;67H[K[14;64H[?12l[?25h[?25ls */[14;66H[K[14;63H[?12l[?25h[?25l_ */[14;65H[K[14;62H[?12l[?25h[?25l_f */[?12l[?25h[?25lfi */[?12l[?25h[?25lil */[?12l[?25h[?25lle */[?12l[?25h[?25le„Çí */[?12l[?25h[?25l„Éê„Ç§„Éä„É™ */[?12l[?25h[?25l„É¢„Éº„Éâ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;84HÊõ∏Ëæº„Åø [15;1H[93m    [m */[?12l[?25h[?25l[14;88H **[15;1H[93m    [m/[15;6H[K[14;88H[?12l[?25h[?25lÂ∞Ç [15;1H[93m    [mÁî® */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lÈñã„Åè */[?12l[?25h[17;8H[18;18H[?25l[12;22H[46m{[19;5H}[?12l[?25h[?25l[m[12;22H{[19;5H}[20;5H[?12l[?25h[21;49H[22;26H[23;14H[24;29H[25;88H[?25l[26;25H[?12l[?25h[25;88H[?25lread_vocab_file„ÇíÈñã„Åè */[25;86H[K[25;62H[?12l[?25h[?25lread_vocab_file„ÇíÈñã„Åè */[25;84H[K[25;60H[?12l[?25h[?25lread_vocab_file„ÇíÈñã„Åè */[25;82H[K[25;58H[?12l[?25h[?25lread_vocab_file„ÇíÈñã„Åè */[25;80H[K[25;56H[?12l[?25h[?25lread_vocab_file„ÇíÈñã„Åè */[25;78H[K[25;54H[?12l[?25h[?25l read_vocab_file„ÇíÈñã„Åè */[25;76H[K[25;52H[?12l[?25hread_vocab_file[2C[?25l„Éê„Ç§„Éä„É™Èñã„Åè */[25;77H[?12l[?25h[?25l„É¢„Éº„ÉâÈñã„Åè */[25;83H[?12l[?25h[?25l[26;28r[26;1H[L[1;29r[25;83H„ÅßÈñã„Åè  [26;1H[93m    [m*/[25;85H[?12l[?25h[?25lË™≠Ëæº[94m>>[m[26;1H[93m    [mÈñã„Åè */[26;5H[?12l[?25h[?25l[93m [mÂ∞ÇÁî®Èñã„Åè */[26;9H[?12l[?25h[?25l„ÅßÈñã„Åè */[26;11H[?12l[?25h[29;1H[K[26;9H[?25l[?12l[?25h[?25l


/fopen[27m[m[H[2J[1;1H[93m317 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m318 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞ */
[93m319 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m320 [m    a = AddWordToVocab(word); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m321 [m    fscanf(fin, "%lld%c", &vocab[a].cn, &c); /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çøfin„Åã„ÇâË™≠Âá∫„Åó„ÅüÂÄ§„Çívoo[6;1H[93m    [mcab[a].cn„Å´ÂèñËæº„ÅøÔºå */
[93m322 [m    i++;
[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END); /* „Éï„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§[94m>>[m[20;1H[93m    [m„ÉàÁßªÂãï */
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeo[28;1H[94m@                                                                                        [14;13H[?12l[?25h[mfope[?25ln[46m([16C)[14;18H[?12l[?25h[?25l[m([16C)[14;19H[?12l[?25htrain_file, "rb[?25l[14;18H[46m([16C)[?12l[?25h[?25l[m[14;18H([16C)[?12l[?25h; /* [2C[2C[2C[2C[2C[2Ct[?25l[29;1H?fopen[14;13H[?12l[?25h[?25l[29;1H[1;28r[1;1H[9L[1;29r[1;1H[93m310 [m  FILE *fin = fopen(read_vocab_file, "rb"); /* read_vocab_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßË™≠Ëæº[94m>>[m[2;1H[93m    [mÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m311 [m  if (fin == NULL) {
[93m312 [m    printf("Vocabulary file not found\n");
[93m313 [m    exit(1);
[93m314 [m  }
[93m315 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[8;1H[93m    [mze„ÅÆÊôÇ */
[93m316 [m  vocab_size = 0;[28;1H[94m@                                                                                        [m[29;1H[K[1;19H[?12l[?25h[2;17H[1;87H[?25lÂá∫[94m>>[m[2;1H[93m [1;87H[?12l[?25h
    [2C[?25l[m[29;1H/fopen[23;13H[?12l[?25hffope[?25ln[46m([16C)[23;18H[?12l[?25h[?25l[m([16C)[23;19H[?12l[?25htrain_file, "rb[?25l[23;18H[46m([16C)[?12l[?25h[?25l[m[23;18H([16C)[?12l[?25h; /* [2C[2C[2C[?25l[29;1H?[23;13H[?12l[?25h[?25l[29;1H[1;19H[?12l[?25h[?25l[29;1H[1;28r[1;1H[11L[1;29r[1;1H[93m301 [m  FILE *fo = fopen(save_vocab_file, "wb"); /* save_vocab_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞Ç [2;1H[93m    [mÁî®„ÅßÈñã„Åè */
[93m302 [m  for (i = 0; i < vocab_size; i++) fprintf(fo, "%s %lld\n", vocab[i].word, vocab[i].cc[4;1H[93m    [mn);
[93m303 [m  fclose(fo);
[93m304 [m}
[93m305 
306 [mvoid ReadVocab() { /* voidÂûãÈñ¢Êï∞ReadVocab */
[93m307 [m  long long a, i = 0;
[93m308 [m  char c;
[93m309 [m  char word[MAX_STRING];[29;1H[K[1;18H[?12l[?25hfope[?25ln[46m([21C)[m[43C  [2;1H[93m [1;23H[?12l[?25h[?25l[m([21C)[43C  [2;1H[93m [1;24H[?12l[?25h[msave_vocab_file, "wb[?25l[1;23H[46m([21C)[m[43C  [2;1H[93m [1;45H[?12l[?25h[?25l[m[1;23H([21C)[43C  [2;1H[93m [1;46H[?12l[?25h[m; /* save_vocab_file[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[?25lÂá∫[1C  [2;1H[93m [1;86H[?12l[?25h[?25l[m[29;1H1 change; before #54  7 seconds ago[1;86HËæº[1C  [2;1H[93m [1;86H[?12l[?25h[?25l[m[29;1H?fope[29;7H[K[29;1H[1;18H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m260 [m  free(parent_node); /* parent_nodeÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m261 [m}
[93m262 
263 [mvoid LearnVocabFromTrainFile() { /* voidÂûãÈñ¢Êï∞LearnVocabFromTrainFile() */
[93m264 [m  char word[MAX_STRING];
[93m265 [m  FILE *fin; /* FILEÂûã„Éù„Ç§„É≥„Çøfin */
[93m266 [m  long long a, i; /* long longÂûãÂ§âÊï∞a, i */
[93m267 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[13;1H[93m    [mze„ÅÆÊôÇvocab_hash[a]„Å´-1„Çí‰ª£ÂÖ• */
[93m268 [m  fin = fopen(train_file, "rb"); /* train_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßË™≠ËæºÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m269 [m  if (fin == NULL) { /* „Éù„Ç§„É≥„Çøfin„ÅåNULL„ÅÆÊôÇ */
[93m270 [m    printf("ERROR: training data file not found!\n");
[93m271 [m    exit(1);
[93m272 [m  }
[93m273 [m  vocab_size = 0;
[93m274 [m  AddWordToVocab((char *)"</s>"); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m275 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m276 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞„Åßtrain_file„ÅÆÂçòË™û„ÇíË™≠„ÅøËæº„ÇÄ  [23;1H[93m    [m*/
[93m277 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m278 [m    train_words++; /* train_words„Å´1„ÇíË∂≥„Åô */
[93m279 [m    if ((debug_mode > 1) && (train_words % 100000 == 0)) { /* debug_mode > 1„Åã„Å§trainn[27;1H[93m    [m_words„Åå100000„ÅßÂâ≤Âàá„Çå„ÇãÊôÇ */
[93m280 [m      printf("%lldK%c", train_words / 1000, 13);[14;13H[?12l[?25hfope[?25ln[46m([16C)[14;18H[?12l[?25h[?25l[m([16C)[14;19H[?12l[?25htrain_file, "rb[?25l[14;18H[46m([16C)[?12l[?25h[?25l[m[14;18H([16C)[?12l[?25h; /* train_file[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[15;7H[14;7Hfin = fope[?25ln[46m([16C)[14;18H[?12l[?25h[?25l[m([16C)[14;19H[?12l[?25htrain_file, "rb[?25l[14;18H[46m([16C)[?12l[?25h[?25l[m[14;18H([16C)[?12l[?25h; /* train_file[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[?25lÂá∫[?12l[?25h[15;7H[?25l[29;1H?fopen[14;13H[?12l[?25h[?25l[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;12H[?12l[?25h[mfope[?25ln[46m([17C)[14;17H[?12l[?25h[?25l[m([17C)[14;18H[?12l[?25houtput_file, "wb[?25l[14;17H[46m([17C)[?12l[?25h[?25l[m[14;17H([17C)[?12l[?25h[?25l[29;1H?fopen[29;7H[K[29;1H[14;12H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[4;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[5;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[11;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[13;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[15;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï„Ç°„Ç§ [17;1H[93m    [m„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (long  [18;1H[93m    [mlong)id„Éê„Ç§„ÉàÁßªÂãï */
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[26;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[28;1H[93m    [m;[14;18H[?12l[?25hfope[?25ln[46m([16C)[14;23H[?12l[?25h[?25l[m([16C)[14;24H[?12l[?25htrain_file, "rb[?25l[14;23H[46m([16C)[?12l[?25h[?25l[m[14;23H([16C)[?12l[?25h; /* [2C[?25lÂá∫[?12l[?25h[?25l[29;1H/fopen[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;[14;12H[?12l[?25h[?25l[29;1H?fopen[27m[m[H[2J[1;1H[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[4;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[5;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[11;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[13;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âá∫„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥[15;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï„Ç°„Ç§ [17;1H[93m    [m„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (long  [18;1H[93m    [mlong)id„Éê„Ç§„ÉàÁßªÂãï */
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[26;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[28;1H[93m    [m;[14;18H[?12l[?25h[?25l[29;1H?fopen[27m[m[H[2J[1;1H[93m317 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m318 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞ */
[93m319 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m320 [m    a = AddWordToVocab(word); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m321 [m    fscanf(fin, "%lld%c", &vocab[a].cn, &c); /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çøfin„Åã„ÇâË™≠Âá∫„Åó„ÅüÂÄ§„Çívoo[6;1H[93m    [mcab[a].cn„Å´ÂèñËæº„ÅøÔºå */
[93m322 [m    i++;
[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âèñ„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END); /* „Éï„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§[94m>>[m[20;1H[93m    [m„ÉàÁßªÂãï */
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */
[93m340 [m  long long a, b;
[93m341 [m  unsigned long long next_random = 1;
[93m342 [m  a = posix_memalign((void **)&syn0, 128, (long long)vocab_size * layer1_size * sizeo[28;1H[94m@                                                                                        [14;13H[?12l[?25h[mfope[?25ln[46m([16C)[14;18H[?12l[?25h[?25l[m([16C)[14;19H[?12l[?25htrain_file, "rb[?25l[14;18H[46m([16C)[?12l[?25h[?25l[m[14;18H([16C)[?12l[?25h; /* [2C[?25lÂá∫[?12l[?25h[?25l[29;1H?fopen[14;13H[?12l[?25h[?25l[29;1H[1;28r[1;1H[9L[1;29r[1;1H[93m310 [m  FILE *fin = fopen(read_vocab_file, "rb"); /* read_vocab_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßË™≠Âá∫[94m>>[m[2;1H[93m    [mÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m311 [m  if (fin == NULL) {
[93m312 [m    printf("Vocabulary file not found\n");
[93m313 [m    exit(1);
[93m314 [m  }
[93m315 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[8;1H[93m    [mze„ÅÆÊôÇ */
[93m316 [m  vocab_size = 0;[28;1H[94m@                                                                                        [m[29;1H[K[1;19H[?12l[?25h[?25l[29;1H/fopen[23;13H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[4;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[5;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[11;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[13;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âá∫„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [15;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m373 [m  fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï„Ç°„Ç§ [17;1H[93m    [m„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (long  [18;1H[93m    [mlong)id„Éê„Ç§„ÉàÁßªÂãï */
[93m374 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(538Ë°åÁõÆ„Åæ„Åß) */
[93m375 [m    if (word_count - last_word_count > 10000) { /* 387Ë°åÁõÆ„Åæ„Åß */
[93m376 [m      word_count_actual += word_count - last_word_count;
[93m377 [m      last_word_count = word_count;
[93m378 [m      if ((debug_mode > 1)) { /* 384Ë°åÁõÆ„Åæ„Åß */
[93m379 [m[7C now=clock();
[93m380 [m[7C printf("%cAlpha: %f  Progress: %.2f%%  Words/thread/sec: %.2fk  ", 13, alpha,[26;1H[93m381 [m[8C word_count_actual / (real)(iter * train_words + 1) * 100,
[93m382 [m[8C word_count_actual / ((real)(now - start + 1) / (real)CLOCKS_PER_SEC * 1000)))[28;1H[93m    [m;[14;18H[?12l[?25h[?25l[29;1H/fopen[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;[14;12H[?12l[?25h[?25l[29;1H/fopen[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m260 [m  free(parent_node); /* parent_nodeÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m261 [m}
[93m262 
263 [mvoid LearnVocabFromTrainFile() { /* voidÂûãÈñ¢Êï∞LearnVocabFromTrainFile() */
[93m264 [m  char word[MAX_STRING];
[93m265 [m  FILE *fin; /* FILEÂûã„Éù„Ç§„É≥„Çøfin */
[93m266 [m  long long a, i; /* long longÂûãÂ§âÊï∞a, i */
[93m267 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[13;1H[93m    [mze„ÅÆÊôÇvocab_hash[a]„Å´-1„Çí‰ª£ÂÖ• */
[93m268 [m  fin = fopen(train_file, "rb"); /* train_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßË™≠Âá∫Â∞ÇÁî®„ÅßÈñã„Åè */
[93m269 [m  if (fin == NULL) { /* „Éù„Ç§„É≥„Çøfin„ÅåNULL„ÅÆÊôÇ */
[93m270 [m    printf("ERROR: training data file not found!\n");
[93m271 [m    exit(1);
[93m272 [m  }
[93m273 [m  vocab_size = 0;
[93m274 [m  AddWordToVocab((char *)"</s>"); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m275 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m276 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞„Åßtrain_file„ÅÆÂçòË™û„ÇíË™≠„ÅøËæº„ÇÄ  [23;1H[93m    [m*/
[93m277 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m278 [m    train_words++; /* train_words„Å´1„ÇíË∂≥„Åô */
[93m279 [m    if ((debug_mode > 1) && (train_words % 100000 == 0)) { /* debug_mode > 1„Åã„Å§trainn[27;1H[93m    [m_words„Åå100000„ÅßÂâ≤Âàá„Çå„ÇãÊôÇ */
[93m280 [m      printf("%lldK%c", train_words / 1000, 13);
[38;5;224msearch hit BOTTOM, continuing at TOP[14;13H[?12l[?25h[?25l[m[29;1H?fopen[29;7H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;12H[?12l[?25h[mfope[?25ln[46m([17C)[14;17H[?12l[?25h[?25l[m([17C)[14;18H[?12l[?25houtput_file, "wb[?25l[14;17H[46m([17C)[?12l[?25h[?25l[m[14;17H([17C)[?12l[?25h; /* o[?25l[29;1H[K[29;1H/[?12l[?25hfl[?25l[29;3H[K[29;3H[?12l[?25hclose[?25l[27m[m[H[2J[1;1H[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo);
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 [14;7H[?12l[?25h[?25l[29;1H[m/[?12l[?25hfopen[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m260 [m  free(parent_node); /* parent_nodeÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m261 [m}
[93m262 
263 [mvoid LearnVocabFromTrainFile() { /* voidÂûãÈñ¢Êï∞LearnVocabFromTrainFile() */
[93m264 [m  char word[MAX_STRING];
[93m265 [m  FILE *fin; /* FILEÂûã„Éù„Ç§„É≥„Çøfin */
[93m266 [m  long long a, i; /* long longÂûãÂ§âÊï∞a, i */
[93m267 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[13;1H[93m    [mze„ÅÆÊôÇvocab_hash[a]„Å´-1„Çí‰ª£ÂÖ• */
[93m268 [m  fin = fopen(train_file, "rb"); /* train_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßË™≠Âá∫Â∞ÇÁî®„ÅßÈñã„Åè */
[93m269 [m  if (fin == NULL) { /* „Éù„Ç§„É≥„Çøfin„ÅåNULL„ÅÆÊôÇ */
[93m270 [m    printf("ERROR: training data file not found!\n");
[93m271 [m    exit(1);
[93m272 [m  }
[93m273 [m  vocab_size = 0;
[93m274 [m  AddWordToVocab((char *)"</s>"); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m275 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m276 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞„Åßtrain_file„ÅÆÂçòË™û„ÇíË™≠„ÅøËæº„ÇÄ  [23;1H[93m    [m*/
[93m277 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m278 [m    train_words++; /* train_words„Å´1„ÇíË∂≥„Åô */
[93m279 [m    if ((debug_mode > 1) && (train_words % 100000 == 0)) { /* debug_mode > 1„Åã„Å§trainn[27;1H[93m    [m_words„Åå100000„ÅßÂâ≤Âàá„Çå„ÇãÊôÇ */
[93m280 [m      printf("%lldK%c", train_words / 1000, 13);
[38;5;224msearch hit BOTTOM, continuing at TOP[14;13H[?12l[?25h[?25l[m[29;1H?fopen[29;7H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][21;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[23;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;12H[?12l[?25h[mfope[?25ln[46m([17C)[14;17H[?12l[?25h[?25l[m([17C)[14;18H[?12l[?25houtput_file, "wb[?25l[14;17H[46m([17C)[?12l[?25h[?25l[m[14;17H([17C)[?12l[?25h; /* output_file[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[?25l[29;1H[1m-- INSERT --[m[29;13H[K[14;85H[?12l[?25h[?25lÔºå */[?12l[?25h[?25l6 */[14;87H[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;86H61 **[15;1H[93m    [m/[14;88H[?12l[?25h[?25l13  [15;1H[93m    [m*/[14;89H[?12l[?25h[?25l3[94m>>[m[15;1H[93m    [mË°åÁõÆ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lÈñâ„Åò„Çã */[?12l[?25h[29;1H[K[15;15H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25h613[?25l[27m[m[H[2J[1;1H[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo);
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 [14;7H[?12l[?25h[10C[?25l[m[29;1H[1m-- INSERT --[14;18H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l 5 */[?12l[?25h[?25l55 */[?12l[?25h[?25l59 */[?12l[?25h[?25l9Ë°åÁõÆ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lÈñã„ÅÑ„Åü */[?12l[?25h[?25lf */[?12l[?25h[?25lfo */[?12l[?25h[?25lo„Çí */[?12l[?25h[?25lÈñâ„Åò„Çã */[?12l[?25h[29;1H[K[14;45H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25h559[?25l[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[15;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][22;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[24;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors[14;7H[?12l[?25hfo = fope[?25ln[46m([17C)[m[53C[94m>>[m[15;1H[93m [14;17H[?12l[?25h[?25l[m([17C)[53C[94m>>[m[15;1H[93m [14;18H[?12l[?25h[moutput_file, "wb[?25l[14;17H[46m([17C)[m[53C[94m>>[m[15;1H[93m [14;35H[?12l[?25h[?25l[m[14;17H([17C)[53C[94m>>[m[15;1H[93m [14;36H[?12l[?25h[m; /* output_file[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C[2C61[15;5H[2C[2C[2C[2C[2C[2C *[?25l[16;25H[46m{[27;7H}[16;25H[?12l[?25h[?25l[29;1H[m/[?12l[?25hclasses[?25l[1;28r[28;1H
[1;29r[15;25H{[26;7H}

[93m571 [m    int clcn = classes, iter = 10, closeid;[29;1H[K[28;20H[?12l[?25h[?25l
?classes[15;11H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[4;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[6;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[8;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[10;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[13;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [15;1H[93m    [m0;
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[17;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;[14;80H[?12l[?25h[?25l[29;1H/classes[27m[m[H[2J[1;1H[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[8;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[9;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[11;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[13;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][20;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[22;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[?25l[m[29;1H?classes[27m[m[H[2J[1;1H[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[4;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[6;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[8;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[10;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[13;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [15;1H[93m    [m0;
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[17;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;[14;80H[?12l[?25h[15;6H[?25l[29;1H[1m-- INSERT --[15;7H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*?[?12l[?25h?[?25l[15;13H[K[15;13H[?12l[?25h[?25l*/[?12l[?25h [?25l c */[?12l[?25h[?25lcl */[?12l[?25h[?25lla */[?12l[?25h[?25las */[?12l[?25h[?25lss */[?12l[?25h[?25lse */[?12l[?25h[?25les */[?12l[?25h[?25l  */[?12l[?25h[?25l = */[?12l[?25h[?25l  */[?12l[?25h[?25l 0 */[?12l[?25h[?25l  */[?12l[?25h[?25l ( */[?12l[?25h[?25l[46m()[m */[?12l[?25h[?25l[?12l[?25h[?25l[46m([m6[46m)[m */[?12l[?25h[?25l61[46m)[m */[?12l[?25h[?25l19[46m)[m */[?12l[?25h[?25l9Ë°åÁõÆ[46m)[m */[?12l[?25h[?25l„Åß[46m)[m */[?12l[?25h[?25l‰ΩøÁî®[46m)[m */[?12l[?25h[29;1H[K[15;35H[?25l[15;23H([13C)[?12l[?25h[?25l[29;1H/[?12l[?25hclasses[?25l[27m[m[H[2J[1;1H[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[8;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[9;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[11;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[13;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][20;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[22;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[?25l[29;1H[m?[?12l[?25h [14;11H[?25l[29;1H?classes[27m[m[H[2J[1;1H[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[4;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[6;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[8;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[10;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[13;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [15;1H[93m    [m0; /* classes = 0 (619Ë°åÁõÆ„Åß‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[17;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;[15;11H[?12l[?25h[?25l[29;1H/classes[27m[m[H[2J[1;1H[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[8;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[9;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[11;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[13;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][20;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[22;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[?25l[m[29;1H/classes[27;20H[?12l[?25h[?25l

?[14;11H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[4;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[6;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[8;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[10;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[13;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [15;1H[93m    [m0; /* classes = 0 (619Ë°åÁõÆ„Åß‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[17;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;[15;11H[?12l[?25h[?25l[29;1H?classes[14;80H[?12l[?25h[?25l[29;1H/[15;11H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[8;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[9;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[11;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[13;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][20;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[22;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[?25l[m[29;1H?classes[27m[m[H[2J[1;1H[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[4;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[6;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[8;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[10;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[13;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [15;1H[93m    [m0; /* classes = 0 (619Ë°åÁõÆ„Åß‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[17;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;[15;11H[?12l[?25hclasses = 0[?25l [46m([13C)[15;23H[?12l[?25h[?25l[m([13C)[15;24H[?12l[?25h61[?25l(5[?12l[?25h5[10C[?25l56[?12l[?25h6[?25l60[?12l[?25h[?25l[29;1H[1m-- INSERT --[15;25H[?12l[?25h[?25l[m5h60Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;26H[?12l[?25h[?25lhh60Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;27H[?12l[?25h[?25lh60Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;42H[K[15;26H[?12l[?25h[?25l560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;41H[K[15;25H[?12l[?25h[?25l[46m([13C)[15;24H[?12l[?25h[?25l[m 560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;40H[K[15;23H[?12l[?25h[?25l0560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;39H[K[15;22H[?12l[?25h[?25l 560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;38H[K[15;21H[?12l[?25h[?25l=560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;37H[K[15;20H[?12l[?25h[?25l 560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;36H[K[15;19H[?12l[?25h[?25ls560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;35H[K[15;18H[?12l[?25h[?25le560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;34H[K[15;17H[?12l[?25h[?25ls560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;33H[K[15;16H[?12l[?25h[?25ls560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;32H[K[15;15H[?12l[?25h[?25la560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;31H[K[15;14H[?12l[?25h[?25ll560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;30H[K[15;13H[?12l[?25h[?25lc560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;29H[K[15;12H[?12l[?25h[?25l 560Ë°åÁõÆ„Åß‰ΩøÁî®) */[15;28H[K[15;11H[?12l[?25h560[2C[2C[2C[?25lc‰ΩøÁî®) */[15;21H[?12l[?25h[?25lcl‰ΩøÁî®) */[15;22H[?12l[?25h[?25lla‰ΩøÁî®) */[15;23H[?12l[?25h[?25las‰ΩøÁî®) */[15;24H[?12l[?25h[?25lss‰ΩøÁî®) */[15;25H[?12l[?25h[?25lse‰ΩøÁî®) */[15;26H[?12l[?25h[?25les‰ΩøÁî®) */[15;27H[?12l[?25h[?25ls„Çí‰ΩøÁî®) */[15;29H[?12l[?25h[29;1H[K[15;27H[?25l[?12l[?25h[?25l[29;1H/classes[27m[m[H[2J[1;1H[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[8;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[9;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[11;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[13;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][20;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[22;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[mclass[?25l[29;1H?classes[14;11H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[4;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[6;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[8;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[10;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[13;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [15;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[17;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;[15;20H[?12l[?25h[?25l[29;1H/classes[27m[m[H[2J[1;1H[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[8;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[9;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[11;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[13;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) {
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) {
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][20;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[22;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[?25l[m[14C[46m{[25;7H}[14;25H[?12l[?25h[?25l[m[29;1H[1m-- INSERT --[14;26H[?12l[?25h[?25l[m{[25;7H}[14;27H[?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l 4 */[?12l[?25h[?25l44 */[?12l[?25h[?25l4Ë°åÁõÆ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lc */[?12l[?25h[?25lcl */[?12l[?25h[?25lla */[?12l[?25h[?25las */[?12l[?25h[?25lss */[?12l[?25h[?25lse */[?12l[?25h[?25les */[?12l[?25h[?25l  */[?12l[?25h[?25l = */[?12l[?25h[?25l  */[?12l[?25h[?25l 0 */[?12l[?25h0[?25l  */[14;51H[K[14;48H[?12l[?25h[?25l */[14;50H[K[14;47H[?12l[?25h[?25l  */[14;49H[K[14;46H[?12l[?25h[?25l */[14;48H[K[14;45H[?12l[?25h[?25le */[14;47H[K[14;44H[?12l[?25h[?25ls */[14;46H[K[14;43H[?12l[?25h[?25ls */[14;45H[K[14;42H[?12l[?25h[?25la */[14;44H[K[14;41H[?12l[?25h[?25ll */[14;43H[K[14;40H[?12l[?25h[?25lc */[14;42H[K[14;39H[?12l[?25h[?25l */[14;41H[K[14;38H[?12l[?25h[?25l */[14;39H[K[14;36H[?12l[?25h[?25l„Çà„Çä */[?12l[?25h[?25lÂ∏∏„Å´ */[?12l[?25h[?25lT */[?12l[?25h[?25lTR */[?12l[?25h[?25lRU */[?12l[?25h[?25lUE */[?12l[?25h[2C[2C[?25lTRUE */[14;49H[K[14;42H[?12l[?25h[?25lTRUE */[14;47H[K[14;40H[?12l[?25h[?25lcTRUE */[14;41H[?12l[?25h[?25lclTRUE */[14;42H[?12l[?25h[?25llaTRUE */[14;43H[?12l[?25h[?25lasTRUE */[14;44H[?12l[?25h[?25lssTRUE */[14;45H[?12l[?25h[?25lseTRUE */[14;46H[?12l[?25h[?25lesTRUE */[14;47H[?12l[?25h[?25ls TRUE */[14;48H[?12l[?25h[?25l 0TRUE */[14;49H[?12l[?25h[?25l0 TRUE */[14;50H[?12l[?25h[?25l0TRUE */[14;56H[K[14;49H[?12l[?25h[?25l TRUE */[14;55H[K[14;48H[?12l[?25h[?25l =TRUE */[14;49H[?12l[?25h[?25l= TRUE */[14;50H[?12l[?25h[?25l 0TRUE */[14;51H[?12l[?25h[?25l0„Çà„ÇäTRUE */[14;55H[?12l[?25h[?25lclasses = 0„Çà„ÇäTRUE */[14;60H[K[14;38H[?12l[?25h[?25lclasses = 0„Çà„ÇäTRUE */[14;58H[K[14;36H[?12l[?25h[?25l„ÅÆclasses = 0„Çà„ÇäTRUE */[14;38H[?12l[?25h[15;33H[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l w */[?12l[?25h[?25lwo */[?12l[?25h[?25lor */[?12l[?25h[?25lrd */[?12l[?25h */[?25l[15;43H[K[15;43H[?12l[?25h[?25l[15;42H[K[15;42H[?12l[?25h[?25l[?12l[?25h[?25l[15;40H[K[15;40H[?12l[?25h[?25l[15;39H[K[15;39H[?12l[?25h[?25l[15;38H[K[15;38H[?12l[?25h[?25l[15;37H[K[15;37H[?12l[?25h[?25l[?12l[?25h[?25l[15;35H[K[15;35H[?12l[?25h[?25l[15;34H[K[15;34H[?12l[?25h[?25l[?12l[?25h[16;33H", vocab_size, layer1_siz[?25l[16;16H[46m([42C)[?12l[?25h[?25l)[?12l[?25h[?25l[m[16;16H([42C)[17;42H[46m{[24;9H}[17;43H[?12l[?25h[?25l[m{[24;9H}[18;45H[?12l[?25h[19;60H[21;60H[23;29H[?25l[17;42H[46m{[24;9H}[?12l[?25h[?25l[m[17;42H{[24;9H}[25;15H[?12l[?25h[?25l[17;42H[46m{[24;9H}[?12l[?25h[?25l[m[17;42H{[24;9H}[23;29H[?12l[?25h[21;60H[19;60H[18;45H[?25l[17;42H[46m{[24;9H}[17;43H[?12l[?25h[?25l[m{a[24;9H}[17;44H[?12l[?25h[?25l[46m{[m[17;43H[K[24;9H[46m}[17;43H[?12l[?25h[?25l[m{[24;9H}[17;44H[?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h [?25l a */[?12l[?25h[?25l  */[?12l[?25h[?25l < */[?12l[?25h[?25l<- */[?12l[?25h[?25l< */[17;53H[K[17;50H[?12l[?25h[?25l  */[17;52H[K[17;49H[?12l[?25h[?25l */[17;51H[K[17;48H[?12l[?25h[?25l  */[17;50H[K[17;47H[?12l[?25h[?25l 0 */[?12l[?25h[?25l  */[?12l[?25h[?25l < */[?12l[?25h[?25l<= */[?12l[?25h[?25l  */[?12l[?25h[?25l a */[?12l[?25h[?25l  */[?12l[?25h[?25l < */[?12l[?25h[?25l  */[?12l[?25h[?25l v */[?12l[?25h[?25lvo */[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb_ */[?12l[?25h[?25l_s */[?12l[?25h[?25lsi */[?12l[?25h[?25liz */[?12l[?25h[?25lze */[?12l[?25h *[?25le„ÅÆ */[?12l[?25h[?25lÊôÇ */[?12l[?25h[18;45H[17;70H[?25l[46m{[24;9H}[17;43H[?12l[?25h[?25l[?12l[?25h[?25l[17;13H([26C)[m {[24;9H}[17;41H[?12l[?25h[?25l[?12l[?25h[?25l[17;13H([26C)[?12l[?25h[?25l[46m([26C)[17;14H[?12l[?25h[?25l[?12l[?25h[?25l[m([26C)[17;12H[?12l[?25h[16;5H    fprint[?25lf[46m([42C)[16;16H[?12l[?25h[?25l([?12l[?25h[?25l[m([42C)[16;18H[?12l[?25ho, "[17;22H[16;22H[29;1H[K[16;21H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hll[?25l[29;3H[K[29;3H[?12l[?25h[?25l[29;2H[K[29;2H[?12l[?25h$[?25l[29;2H[K[29;2H[?12l[?25h%lld[?25l[16;22H[?12l[?25h[?25l[29;1H?[27m[m[H[2J[1;1H[93m315 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_sii[2;1H[93m    [mze„ÅÆÊôÇ */
[93m316 [m  vocab_size = 0;
[93m317 [m  while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m318 [m    ReadWord(word, fin); /* 72Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüReadWordÈñ¢Êï∞ */
[93m319 [m    if (feof(fin)) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */
[93m320 [m    a = AddWordToVocab(word); /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„ÇãÈñ¢Êï∞AddWordToVocab */
[93m321 [m    fscanf(fin, "%lld%c", &vocab[a].cn, &c); /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çøfin„Åã„ÇâË™≠Âá∫„Åó„ÅüÂÄ§„Çívoo[9;1H[93m    [mcab[a].cn„Å´ÂèñËæº„ÅøÔºå */
[93m322 [m    i++;
[93m323 [m  }
[93m324 [m  SortVocab();
[93m325 [m  if (debug_mode > 0) {
[93m326 [m    printf("Vocab size: %lld\n", vocab_size);
[93m327 [m    printf("Words in train file: %lld\n", train_words);
[93m328 [m  }
[93m329 [m  fin = fopen(train_file, "rb"); /* Ë™≠Âá∫„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„Åè */
[93m330 [m  if (fin == NULL) {
[93m331 [m    printf("ERROR: training data file not found!\n");
[93m332 [m    exit(1);
[93m333 [m  }
[93m334 [m  fseek(fin, 0, SEEK_END); /* „Éï„Ç°„Ç§„É´fin„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_END„ÇíÂü∫Ê∫ñ„Å´0„Éê„Ç§[94m>>[m[23;1H[93m    [m„ÉàÁßªÂãï */
[93m335 [m  file_size = ftell(fin);
[93m336 [m  fclose(fin);
[93m337 [m}
[93m338 
339 [mvoid InitNet() { /* voidÈñ¢Êï∞IniNet() */[15;38H[?12l[?25h[?25l[29;1H?%lld[14;29H[?12l[?25h[?25l[29;1H[8;22H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m291 [m  if (debug_mode > 0) {
[93m292 [m    printf("Vocab size: %lld\n", vocab_size);
[93m293 [m    printf("Words in train file: %lld\n", train_words);
[93m294 [m  }
[93m295 [m  file_size = ftell(fin);
[93m296 [m  fclose(fin);
[93m297 [m}
[93m298 
299 [mvoid SaveVocab() {
[93m300 [m  long long i;
[93m301 [m  FILE *fo = fopen(save_vocab_file, "wb"); /* save_vocab_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞Ç[12;1H[93m    [mÁî®„ÅßÈñã„Åè */
[93m302 [m  for (i = 0; i < vocab_size; i++) fprintf(fo, "%s %lld\n", vocab[i].word, vocab[i].cc[14;1H[93m    [mn);
[93m303 [m  fclose(fo);
[93m304 [m}
[93m305 
306 [mvoid ReadVocab() { /* voidÂûãÈñ¢Êï∞ReadVocab */
[93m307 [m  long long a, i = 0;
[93m308 [m  char c;
[93m309 [m  char word[MAX_STRING];
[93m310 [m  FILE *fin = fopen(read_vocab_file, "rb"); /* read_vocab_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßË™≠Âá∫[94m>>[m[23;1H[93m    [mÂ∞ÇÁî®„ÅßÈñã„Åè */
[93m311 [m  if (fin == NULL) {
[93m312 [m    printf("Vocabulary file not found\n");
[93m313 [m    exit(1);
[93m314 [m  }
[93m315 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1; /* 0 <= a < vocab_hash_si[28;1H[94m@                                                                                        [13;56H[?12l[?25h[?25l[m[29;1H?%lld[3;38H[?12l[?25h[?25l[29;1H[2;29H[?12l[?25h[?25l[29;1H[1;28r[1;1H[13L[1;29r[1;1H[93m280 [m      printf("%lldK%c", train_words / 1000, 13);
[93m281 [m      fflush(stdout);
[93m282 [m    }
[93m283 [m    i = SearchVocab(word); /* 103Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüË™ûÂΩô‰∏≠„ÅÆÂçòË™û„ÅÆ‰ΩçÁΩÆ„ÇíËøî„ÅôÈñ¢Êï∞SearchVocaa[5;1H[93m    [mb */
[93m284 [m    if (i == -1) { /* i == -1„ÅÆÊôÇ */
[93m285 [m      a = AddWordToVocab(word);
[93m286 [m      vocab[a].cn = 1;
[93m287 [m    } else vocab[i].cn++;
[93m288 [m    if (vocab_size > vocab_hash_size * 0.7) ReduceVocab();
[93m289 [m  }
[93m290 [m  SortVocab(); /* 146Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüË™ûÂΩô„ÇíÂçòË™ûÊï∞„ÇíÁî®„ÅÑ„Å¶È†ªÂ∫¶È†Ü„Å´‰∏¶Êõø„Åà„ÇãÈñ¢Êï∞SortVocab(([13;1H[93m    [m) */[29;1H[K[1;19H[?12l[?25h[?25l[29;1H?%lld[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[6;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[7;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[9;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[11;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* 44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUE */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size);
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇ */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word);
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][18;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[20;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[27;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[28;1H[94m@                                                                                        [m[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[14;27H[?12l[?25h[m%lld\n"[26C[?25l[29;1H[1m-- INSERT --[m[29;13H[K[14;61H[?12l[?25h[?25l [?12l[?25h[?25l ?[?12l[?25h[?25l[14;62H[K[14;62H[?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l f */[?12l[?25h[?25lfo */[?12l[?25h[?25lo„Å´ */[?12l[?25h[?25lv */[?12l[?25h[?25lvo */[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb_ */[?12l[?25h[?25l_s */[?12l[?25h[?25lsi */[?12l[?25h[?25liz */[?12l[?25h[?25lze */[?12l[?25h[?25le„Å® */[?12l[?25h[?25ll */[?12l[?25h[?25lla */[?12l[?25h[?25lay */[?12l[?25h[?25lye */[?12l[?25h[?25ler */[?12l[?25h[?25lr1 */[14;87H[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;86H1_ **[15;1H[93m    [m/[14;88H[?12l[?25h[?25l_s  [15;1H[93m    [m*/[14;89H[?12l[?25h[?25lsii[15;1H[93m    [m */[?12l[?25h[?25l[93m [mz */[?12l[?25h[?25lze */[?12l[?25h[?25le„Çí */[?12l[?25h[?25ll */[?12l[?25h[?25llo */[?12l[?25h[?25lon */[?12l[?25h[?25lng */[?12l[?25h[?25l  */[?12l[?25h[?25l l */[?12l[?25h[?25llo */[?12l[?25h[?25lon */[?12l[?25h[?25lng */[?12l[?25h[?25lgÂûã */[?12l[?25h[?25l„Åß */[?12l[?25h[?25l„Åù„Çå„Åû„Çå */[?12l[?25h[?25lÊõ∏„ÅçÂá∫„Åó */[?12l[?25h[16;73H[17;45H[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l f */[?12l[?25h[?25lfo */[?12l[?25h[?25lo„Å´ */[?12l[?25h[?25lv */[?12l[?25h[?25lvo */[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb[ */[?12l[?25h[?25l[a */[?12l[?25h[?25l[46m[[ma[46m][m */[?12l[?25h[?25l[a]. */[?12l[?25h[?25l.w */[?12l[?25h[?25lwo */[?12l[?25h[?25lor */[?12l[?25h[?25lrd */[?12l[?25h[?25ld„Çí */[?12l[?25h[?25lÊñáÂ≠óÂàó */[?12l[?25h[?25l„Å®„Åó„Å¶ */[?12l[?25h[?25lÂá∫Âäõ */[?12l[?25h[16;73H[14;46H[29;1H[K[14;43H[?25l[?12l[?25h[15;40H[2C[?25l„ÅçÂá∫„Åó */[15;39H[K[15;30H[?12l[?25h[?25lÂá∫„Åó */[15;37H[K[15;30H[?12l[?25h[?25l„Åó */[15;35H[K[15;30H[?12l[?25h[?25l */[15;33H[K[15;30H[?12l[?25h[?25l[29;1H[1m-- INSERT --[15;31H[?12l[?25h[?25l[mÂá∫Âäõ */[?12l[?25h[16;73H[17;87H[19;28H[29;1H[K[19;27H[?25l[?12l[?25h[20;11H[18;11H[17;11H[18;11H[20;11H[?25l[29;1H/[?12l[?25hbinary[?25l[27m[m[H[2J[1;1H[93m651 [m    printf("\t-iter <int>\n");
[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");
[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[5;1H[93m    [m 5\n");
[93m655 [m    printf("\t-alpha <float>\n");
[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[8;1H[93m    [m05 for CBOW\n");
[93m657 [m    printf("\t-classes <int>\n");
[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[11;1H[93m    [mes is 0 (vectors are written)\n");
[93m659 [m    printf("\t-debug <int>\n");
[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");
[93m661 [m    printf("\t-binary <int>\n");
[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");
[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[20;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[23;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[26;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }[14;20H[?12l[?25h[?25l[29;1H/binary[15;51H[?12l[?25h[?25l[29;1H[26;27H[?12l[?25h[?25l


[1;28r[1;1H[12M[1;29r[17;1H[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[21;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[22;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[24;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[26;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[28;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);[29;1H[K[28;33H[?12l[?25h[?25l
/binary[28;60H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[5;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[9;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[11;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[13;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[15;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[18;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [20;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[22;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[?25l[m[29;1H/binary[29;8H[K[29;1H[27m[m[H[2J[1;1H[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[5;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[13;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {
[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[93m171 [m    vocab[a].point = (int *)calloc(MAX_CODE_LENGTH, sizeof(int));
[93m172 [m  }
[93m173 [m}
[93m174 
175 [m// Reduces the vocabulary by removing infrequent tokens
[93m176 [mvoid ReduceVocab() {
[93m177 [m  int a, b = 0;
[93m178 [m  unsigned int hash;
[93m179 [m  for (a = 0; a < vocab_size; a++) if (vocab[a].cn > min_reduce) {
[93m180 [m    vocab[b].cn = vocab[a].cn;
[93m181 [m    vocab[b].word = vocab[a].word;
[93m182 [m    b++;[14;34H[?12l[?25h[?25l[29;1H/binary[27m[m[H[2J[1;1H[93m184 [m  vocab_size = b;
[93m185 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m186 [m  for (a = 0; a < vocab_size; a++) {
[93m187 [m    // Hash will be re-computed, as it is not actual
[93m188 [m    hash = GetWordHash(vocab[a].word);
[93m189 [m    while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m190 [m    vocab_hash[hash] = a;
[93m191 [m  }
[93m192 [m  fflush(stdout);
[93m193 [m  min_reduce++;
[93m194 [m}
[93m195 
196 [m// Create binary Huffman tree using the word counts /* Ë™ûÊï∞„ÇíÁî®„ÅÑ„Å¶2ÂÄ§HuffmanÊú®„Çí‰ΩúÊàê[14;1H[93m    [m */
[93m197 [m// Frequent words will have short uniqe binary codes /* È´òÈ†ªÂ∫¶„ÅÆÂçòË™û„Å´Áü≠„ÅÑ‰∏ÄÊÑèÁöÑ„Å™2ÈÄ≤ [16;1H[93m    [mÊï∞„ÇíÂâ≤ÂΩì„Çã */
[93m198 [mvoid CreateBinaryTree() { /* voidÈñ¢Êï∞CreateBinaryTree() */
[93m199 [m  long long a, b, i, min1i, min2i, pos1, pos2, point[MAX_CODE_LENGTH];
[93m200 [m  char code[MAX_CODE_LENGTH]; /* charÂûãcode[ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑MAX_CODE_LENGTH] */
[93m201 [m  long long *count = (long long *)calloc(vocab_size * 2 + 1, sizeof(long long)); /* ll[21;1H[93m    [mong longÂûã„Éù„Ç§„É≥„Çøcount„Å´(vocab_size * 2 * 1) * (long long)ÂàÜ„ÅÆ„É°„É¢„É™„ÇíÁ¢∫‰øù */
[93m202 [m  long long *binary = (long long *)calloc(vocab_size * 2 + 1, sizeof(long long)); /*  [23;1H[93m    [mlong longÂûã„Éù„Ç§„É≥„Çøbinary„Å´(vocab_size * 2 * 1) * (long long)ÂàÜ„ÅÆ„É°„É¢„É™„ÇíÁ¢∫‰øù */
[93m203 [m  long long *parent_node = (long long *)calloc(vocab_size * 2 + 1, sizeof(long long)))[25;1H[93m    [m; /* long longÂûã„Éù„Ç§„É≥„Çøparent_node„Å´(vocab_size * 2 * 1) * (long long)ÂàÜ„ÅÆ„É°„É¢„É™„ÇíÁ¢∫[26;1H[93m    [m‰øù */
[93m204 [m  for (a = 0; a < vocab_size; a++) count[a] = vocab[a].cn; /* „Éù„Ç§„É≥„Çøcount„ÅÆ0 <= a <<[28;1H[93m    [m vocab_sizeÁï™ÁõÆ„Å´„Å´vocab[a].cn„Çí‰ª£ÂÖ• */[13;15H[?12l[?25h[?25l[29;1H/binary[15;45H[?12l[?25h[?25l[29;1H[22;18H[?12l[?25h[?25l[29;1H[23;24H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m226 [m[7C pos1--;
[93m227 [m      } else { /* count[pos1] >= count[pos2]„ÅÆÊôÇ */
[93m228 [m[7C min2i = pos2;
[93m229 [m[7C pos2++;
[93m230 [m      }
[93m231 [m    } else { /* pos1„ÅåË≤†„ÅÆÊôÇ */
[93m232 [m      min2i = pos2;
[93m233 [m      pos2++;
[93m234 [m    }
[93m235 [m    count[vocab_size + a] = count[min1i] + count[min2i]; /* count[vocab_size + a]„Å´coo[11;1H[93m    [munt[min1i] + count[min2i]„Çí‰ª£ÂÖ• */
[93m236 [m    parent_node[min1i] = vocab_size + a; /* min1i„ÅÆË¶™„Éé„Éº„Éâ„Å´vocab_size + a „Çí‰ª£ÂÖ• */[13;1H[93m237 [m    parent_node[min2i] = vocab_size + a; /* min2i„ÅÆË¶™„Éé„Éº„Éâ„Å´vocab_size + a „Çí‰ª£ÂÖ• */[14;1H[93m238 [m    binary[min2i] = 1;
[93m239 [m  }
[93m240 [m  // Now assign binary code to each vocabulary word /* Ë™ûÂΩô„ÅÆÂêÑÂçòË™û„Å´‰∫åÈÄ≤Ê≥ï„Ç≥„Éº„Éâ„ÇíÂâ≤[17;1H[93m    [mÂΩì */
[93m241 [m  for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇ */
[93m242 [m    b = a;
[93m243 [m    i = 0;
[93m244 [m    while (1) { /* ÁÑ°Èôê„É´„Éº„Éó */
[93m245 [m      code[i] = binary[b]; /* code[i]„Å´binary[b](ÊúÄÂàù„ÅØb=a)„Çí‰ª£ÂÖ• */
[93m246 [m      point[i] = b; /* pont[i]„Å´b„Çí‰ª£ÂÖ•*/
[93m247 [m      i++;
[93m248 [m      b = parent_node[b]; /* b„Å´parent_node„Çí‰ª£ÂÖ• */
[93m249 [m      if (b == vocab_size * 2 - 2) break; /* b == vocab_size * 2 - 2„ÅÆÊôÇÁÑ°Èôê„É´„Éº„Éó„Åã[94m>>[m[27;1H[93m    [m„ÇâËÑ±Âá∫ */
[93m250 [m    }[14;9H[?12l[?25h[?25l[29;1H/binary[16;21H[?12l[?25h[?25l[29;1H[22;21H[?12l[?25h[?25l[29;1H[22;44H[?12l[?25h[?25l[29;1H[1;28r[1;1H[9M[1;29r[20;1H[93m251 [m    vocab[a].codelen = i;
[93m252 [m    vocab[a].point[0] = vocab_size - 2;
[93m253 [m    for (b = 0; b < i; b++) {
[93m254 [m      vocab[a].code[i - b - 1] = code[b];
[93m255 [m      vocab[a].point[i - b] = point[b] - vocab_size;
[93m256 [m    }
[93m257 [m  }
[93m258 [m  free(count); /* countÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m259 [m  free(binary); /* binaryÂàÜ„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[29;1H[K[28;12H[?12l[?25h[?25l
/binary[28;24H[?12l[?25h[?25l
[27m[m[H[2J[1;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[2;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[3;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[5;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[7;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* 44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUE */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[11;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇ */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][15;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[17;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[24;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[26;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>[28;1H@                                                                                        [14;15H[?12l[?25h[?25l[m[29;1H/binary[27m[m[H[2J[1;1H[93m651 [m    printf("\t-iter <int>\n");
[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");
[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[5;1H[93m    [m 5\n");
[93m655 [m    printf("\t-alpha <float>\n");
[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[8;1H[93m    [m05 for CBOW\n");
[93m657 [m    printf("\t-classes <int>\n");
[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[11;1H[93m    [mes is 0 (vectors are written)\n");
[93m659 [m    printf("\t-debug <int>\n");
[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");
[93m661 [m    printf("\t-binary <int>\n");
[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");
[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[20;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[23;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[26;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }[14;20H[?12l[?25h[?25l[29;1H/binary[15;51H[?12l[?25h[?25l[29;1H?[14;20H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[2;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[3;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[5;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[7;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* 44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUE */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[11;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇ */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][15;1H[93m    [m, sizeof(real), 1, fo);
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[17;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[24;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[26;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>[28;1H@                                                                                        [14;15H[?12l[?25h[mbinar[?25l[46m([mbinary[46m)[m[67C]][15;1H[93m [14;21H[?12l[?25h[?25l[m[14;14H(binary)[67C]][15;1H[93m [14;22H[?12l[?25h[m for[?25l [46m([27C)[m[33C]][15;1H[93m [14;27H[?12l[?25h[?25l[m([27C)[33C]][15;1H[93m [14;28H[?12l[?25h[mb = 0[16;33H[14;33H[15;27H[?25l[29;1H[1m-- INSERT --[15;28H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ */[?12l[?25h[29;1H[K[15;44H[?25l[?12l[?25h[?25l[29;1H/binary[27m[m[H[2J[1;1H[93m651 [m    printf("\t-iter <int>\n");
[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");
[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[5;1H[93m    [m 5\n");
[93m655 [m    printf("\t-alpha <float>\n");
[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[8;1H[93m    [m05 for CBOW\n");
[93m657 [m    printf("\t-classes <int>\n");
[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[11;1H[93m    [mes is 0 (vectors are written)\n");
[93m659 [m    printf("\t-debug <int>\n");
[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");
[93m661 [m    printf("\t-binary <int>\n");
[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");
[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[20;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[23;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[26;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }[14;20H[?12l[?25h[?25l[29;1H/binary[15;51H[?12l[?25h[?25l[29;1H[26;27H[?12l[?25h[?25l


[1;28r[1;1H[12M[1;29r[17;1H[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[21;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[22;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[24;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[26;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[28;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);[29;1H[K[28;33H[?12l[?25h[?25l
/binary[28;60H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[5;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´ [9;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[11;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[13;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[15;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12 */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[18;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [20;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[22;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[mbinary = 0, cbow = [15;54H[?25l[29;1H[1m-- INSERT --[m[29;13H[K[15;52H[?12l[?25h[?25l2Ôºå */[?12l[?25h[?25lb */[?12l[?25h[?25lbi */[?12l[?25h[?25lin */[?12l[?25h[?25lna */[?12l[?25h[?25lar */[?12l[?25h[?25lry */[?12l[?25h[?25l  */[?12l[?25h[?25l = */[?12l[?25h[?25l  */[?12l[?25h[?25l 0 */[?12l[?25h[?25l  */[?12l[?25h[?25l „ÅØ */[?12l[?25h[?25l0„ÅØ */[15;69H[K[15;64H[?12l[?25h[2C[?25l5 */[?12l[?25h[?25l56 */[?12l[?25h[?25l64 */[?12l[?25h[?25l6 */[15;71H[K[15;68H[?12l[?25h[?25l65 */[?12l[?25h[?25l5Ë°åÁõÆ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25l‰ΩøÁî® */[?12l[?25h[29;1H[K[15;77H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25h565[?25l[27m[m[H[2J[1;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[2;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[3;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[5;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[7;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* 44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUE */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[11;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇ */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][15;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[17;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[24;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[26;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[mif[?25l [46m([mbinary[46m)[m[67C]][15;1H[93m [14;14H[?12l[?25h[?25l[m(binary)[67C]][15;1H[93m [14;15H[?12l[?25h[mbinar[?25l[46m([mbinary[46m)[m[67C]][15;1H[93m [14;21H[?12l[?25h[?25l[m[14;14H(binary)[67C]][15;1H[93m [14;22H[?12l[?25h[m f[?25l[29;1H/[?12l[?25h565[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[5;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´ [9;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[11;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[13;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[15;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[18;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [20;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[22;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[38;5;224msearch hit BOTTOM, continuing at TOP[15;66H[?12l[?25h[?25l[m[29;1H[K[29;1H:[?12l[?25h565[?25l[27m[m[H[2J[1;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[2;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[3;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[5;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[7;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* 44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUE */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[11;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇ */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][15;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[17;1H[93m    [m + b]);
[93m567 [m      fprintf(fo, "\n");
[93m568 [m    }
[93m569 [m  } else {
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[24;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[26;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>[28;1H@                                                                                        [14;11H[?12l[?25h[mif[15;48H[?25l[29;1H[1m-- INSERT --[15;47H[?12l[?25h[?25l[m4 */[?12l[?25h[?25l41 */[?12l[?25h[?25l1Ë°åÁõÆ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25l */[15;55H[K[15;52H[?12l[?25h[?25l„Çà„Çä */[?12l[?25h[?25lb */[?12l[?25h[?25lbi */[?12l[?25h[?25lin */[?12l[?25h[?25lna */[?12l[?25h[?25lar */[?12l[?25h[?25lry */[?12l[?25h[?25ly= */[?12l[?25h[?25l=0 */[?12l[?25h[?25l0Ôºå */[?12l[?25h[?25l==0Ôºå */[15;63H[?12l[?25h=[?25ly ==0Ôºå */[15;63H[?12l[?25h==[?25l= 0Ôºå */[?12l[?25h0[2C[?25l0 */[?12l[?25h[?25l0< */[?12l[?25h[?25l<= */[?12l[?25h[?25l0 <= */[?12l[?25h<=[?25l  */[?12l[?25h[?25l b */[?12l[?25h[?25l  */[?12l[?25h[?25l < */[?12l[?25h[?25l  */[?12l[?25h[?25l l */[?12l[?25h[?25lla */[?12l[?25h[?25lay */[?12l[?25h[?25lys */[?12l[?25h[?25lse */[?12l[?25h[?25ls */[15;85H[K[15;82H[?12l[?25h[?25ly */[15;84H[K[15;81H[?12l[?25h[?25lye */[?12l[?25h[?25ler */[?12l[?25h[?25lr1 */[?12l[?25h[?25l1_ */[?12l[?25h[?25l_s */[?12l[?25h[?25lsi */[15;87H[?12l[?25h[?25l[16;28r[16;1H[L[1;29r[15;86Hiz **[16;1H[93m    [m/[15;88H[?12l[?25h[?25lze  [16;1H[93m    [m*/[15;89H[?12l[?25h[?25le[94m>>[m[16;1H[93m    [m„ÅÆ */[?12l[?25h[?25lÊôÇ */[?12l[?25h[?25lf */[?12l[?25h[?25lfo */[?12l[?25h[?25lo„Å´ */[?12l[?25h[?25l„Éù„Ç§„É≥„Çø */[?12l[?25h[?25ls */[?12l[?25h[?25lsy */[?12l[?25h[?25lyn */[?12l[?25h[?25ln0 */[?12l[?25h[?25l0[ */[?12l[?25h[?25l[a */[?12l[?25h[?25l  */[?12l[?25h[?25l * */[?12l[?25h[?25l  */[?12l[?25h[?25l l */[?12l[?25h[?25lla */[?12l[?25h[?25lay */[?12l[?25h[?25lye */[?12l[?25h[?25ler */[?12l[?25h[?25lr1 */[?12l[?25h[?25l1_ */[?12l[?25h[?25l_s */[?12l[?25h[?25lsi */[?12l[?25h[?25liz */[?12l[?25h[?25lze */[?12l[?25h[?25l  */[?12l[?25h[?25l + */[?12l[?25h[?25l  */[?12l[?25h[?25l b */[?12l[?25h[?25lb: */[?12l[?25h[?25lb */[16;48H[K[16;45H[?12l[?25h[?25l[16;25H[46m[[m[18Cb[46m][m */[?12l[?25h[?25l[16;25H[[19C]„Åã„Çâ */[?12l[?25h[?25ls */[?12l[?25h[?25lsi */[?12l[?25h[?25liz */[?12l[?25h[?25lze */[?12l[?25h[?25leo */[?12l[?25h[?25lof */[?12l[?25h[?25lf( */[?12l[?25h[?25l(r */[?12l[?25h[?25lre */[?12l[?25h[?25lea */[?12l[?25h[?25lal */[?12l[?25h[?25l[46m([mreal[46m)[m */[?12l[?25h[?25l(real)„Éê„Ç§„Éà */[?12l[?25h[?25lÂçò‰Ωç„Åß */[?12l[?25h[?25lÂçò‰Ωç„Åß */[16;75H[K[16;66H[?12l[?25h[?25lÂçò‰Ωç„Åß */[16;73H[K[16;64H[?12l[?25h[?25l[16;56H[46m([mreal[46m)[mÂçò‰Ωç„Åß */[16;71H[K[16;62H[?12l[?25h[?25l(real)bÂçò‰Ωç„Åß */[16;63H[?12l[?25h[?25lbiÂçò‰Ωç„Åß */[16;64H[?12l[?25h[?25lbÂçò‰Ωç„Åß */[16;72H[K[16;63H[?12l[?25h[?25lbyÂçò‰Ωç„Åß */[16;64H[?12l[?25h[?25lytÂçò‰Ωç„Åß */[16;65H[?12l[?25h[?25lteÂçò‰Ωç„Åß */[16;66H[?12l[?25h[?25lesÂçò‰Ωç„Åß */[16;67H[?12l[?25h[?25l[16;56H[46m([mreal[46m)[?12l[?25h[?25l[m(real) bytesÂçò‰Ωç„Åß */[16;63H[?12l[?25hbytes[2C[2C[2C[?25l1 */[?12l[?25h[?25l1ÂÄã„ÅÆ */[?12l[?25h[?25l„Éá„Éº„Çø„Çí */[16;87H[?12l[?25h[?25l[17;28r[17;1H[L[1;29r[16;87HÊõ∏[94m>>[m[17;1H[93m    [mËæº„Åø */[?12l[?25h[19;12H[17;9H[19;12H[?25l;a[?12l[?25h[?25l[19;12H[K[19;12H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ */[?12l[?25h[?25lÂãï„Åã„Å™„ÅÑ */[?12l[?25h[20;29H[?25l[12;42H[46m{[21;9H}[?12l[?25h[?25l[m[12;42H{[21;9H}[20;29H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l f */[?12l[?25h[?25lfo */[?12l[?25h[?25lo„Å´ */[?12l[?25h[?25lÊîπË°å */[?12l[?25h[?25l„Çí */[?12l[?25h[?25lÂá∫Âäõ */[?12l[?25h[18;47H[14;47H[13;47H[14;47H[18;47H[20;47H[?25l[12;42H[46m{[21;9H}[?12l[?25h[?25l[?12l[?25h[?25l[m[12;42H{[21;9H}[?12l[?25h[?25l[8;25H[46m{[22;7H}[?12l[?25h[m[29;1H[K[22;7H[?25l[?12l[?25h[?25l[8;25H{[22;7H}[21;7H[?12l[?25h [?25l[12;42H[46m{[21;9H}[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[m[29;1H[1m-- INSERT --[12;43H[?12l[?25h[?25l[m{a /* 0 <= a < vocab_size„ÅÆÊôÇ */[21;9H}[12;44H[?12l[?25h[?25l[46m{[m /* 0 <= a < vocab_size„ÅÆÊôÇ */[12;73H[K[21;9H[46m}[12;43H[?12l[?25h[?25l[m{[21;9H}[12;44H[?12l[?25h/* 0 <= a < vocab_size[2C[2C[?25l, */[?12l[?25h[?25l[12;72H[K[13;5H */[13;11H[K[14;10H fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */[14;88H[K[15;1H[93m566 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][16;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„Çà„Çäbinary == 0Ôºå0 <= b < layer1_size[94m>>[m[17;1H[93m    [m„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏[94m>>[m[18;1H[93m    [mËæº„Åø */[18;12H[K[19;1H[93m567[m[1C      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[20;1H[93m   [m[1C + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */[20;41H[K[21;8H   fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */[22;6H   }[22;10H[K[23;6H } else {[23;16H[K[24;8H // Run K-means on the word vectors[24;43H[K[25;12H clcn = classes, iter = 10, closeid;[25;48H[K[26;1H[93m573 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[27;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */[27;24H[K[28;1H[93m574 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[28;1H[94m@                                                                                        [13;5H[?12l[?25h[?25l[m[12;71H */[13;5H      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */[14;10H if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][15;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„Çà„Çäbinary == 0Ôºå0 <= b < layer1_size[94m>>[m[16;1H[93m    [m„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏[94m>>[m[17;1H[93m    [mËæº„Åø */ [17;13H[K[18;1H[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[19;1H[93m   [m[1C + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */[19;41H[K[20;1H[93m567[m[1C      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */[21;8H }[21;11H[K[22;6H } else {[23;6H   // Run K-means on the word vectors[24;8H int clcn = classes, iter = 10, closeid;[25;12H *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[26;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */[26;23H[K[27;1H[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[28;1H[93m    [mÁõÆ„ÅßËß£Êîæ */[28;16H[K[12;71H[?12l[?25h[?25l */[12;73H[K[12;70H[?12l[?25h[?25lÔºå */[?12l[?25h[?25l5 */[?12l[?25h[?25l56 */[?12l[?25h[?25l68 */[?12l[?25h[?25l8Ë°åÁõÆ */[?12l[?25h[?25l„Åæ„Åß */[?12l[?25h[13;82H[14;83H[18;83H[14;83H[13;82H[12;83H[29;1H[K[12;79H[?25l[?12l[?25h[?25l[46m{[21;9H}[12;42H[?12l[?25h[?25l[m{[21;9H}[12;85H[?12l[?25h[?25l[46m{[21;9H}[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[m[29;1H[1m-- INSERT --[21;10H[?12l[?25h[?25l[m[12;42H{[21;9H} [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l 5 */[?12l[?25h[?25l56 */[?12l[?25h[?25l63 */[?12l[?25h[?25l3Ë°åÁõÆ */[?12l[?25h[?25l„Åã„Çâ„ÅÆ */[?12l[?25h[?25lf */[?12l[?25h[?25lfo */[?12l[?25h[?25lor */[?12l[?25h[?25lrÂàÜ */[?12l[?25h[?25lr */[21;33H[K[21;30H[?12l[?25h[?25lrÊñá */[?12l[?25h[?25l„Åì„Åì„Åæ„Åß */[?12l[?25h[?25l[22;15H[?12l[?25h[23;38H[?25l[22;15H[?12l[?25h[?25l[8;25H[46m{[22;7H}[?12l[?25h[m[29;1H[K[22;7H[?25l[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H[?12l[?25h[?25l[22;7H[?12l[?25h[?25l[8;25H{[22;7H}[23;7H[?12l[?25h[24;7H[23;7H[?25l[8;25H[46m{[22;7H}[?12l[?25h[?25l[m[8;25H{[22;7H}[21;7H[?12l[?25h[20;7H[18;7H[14;7H[13;7H [14;8H   if[?25l [46m([mbinary[46m)[m[67C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;14H[?12l[?25h[?25l[m(binary)[67C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;15H[?12l[?25h[mbinar[?25l[46m([mbinary[46m)[m[67C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;21H[?12l[?25h[?25l[m[14;14H(binary)[67C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;22H[?12l[?25h[m for[?25l [46m([27C)[m[33C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;27H[?12l[?25h[?25l[m([27C)[33C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;28H[?12l[?25h[mb = 0; b < layer1_size; b+[?25l[14;27H[46m([27C)[m[33C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;55H[?12l[?25h[?25l[m[14;27H([27C)[33C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;56H[?12l[?25h[m fwrit[?25le[46m([m[25C]][15;1H[93m [m[24C[46m)[m[62C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;63H[?12l[?25h[?25l[m([25C]][15;1H[93m [m[24C)[62C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;64H[?12l[?25h[m&syn[?25l0[46m[[19C]][m[15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;69H[?12l[?25h[?25l[m[[19C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;70H[?12l[?25h[ma * layer1_size + [?25l[14;69H[46m[[19C]][m[15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;89H[?12l[?25h[?25l[m[14;69H[[19C]][15;1H[93m [m[87C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;5H[?12l[?25h[m, sizeo[?25lf[46m([mreal[46m)[m[70C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;13H[?12l[?25h[?25l[m(real)[70C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;14H[?12l[?25h[mrea[?25l[46m([mreal[46m)[m[70C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;18H[?12l[?25h[?25l[m(real)[70C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;19H[?12l[?25h[m, 1, f[?25l[14;63H[46m([m[25C]][15;1H[93m [m[24C[46m)[m[62C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;26H[?12l[?25h[?25l[m[14;63H([25C]][15;1H[93m [m[24C)[62C[94m>>[m[16;1H[93m [m[87C[94m>>[m[17;1H[93m [15;27H[?12l[?25h[m; /* [2C[2C[2C[2C[2C[2C[2C41[2C[2C[2C[2C[?25l[29;1H[1m-- INSERT --[15;57H[?12l[?25h[?25l[mbinary == 0Ôºå0 <= b < layer1_size„ÅÆ[94m>>[m[16;1H[93m    [mÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏Ëæº[94m>>[m[17;1H[93m    [m„Åø */[17;10H[K[15;54H[?12l[?25h[?25lbinary == 0Ôºå0 <= b < layer1_size„ÅÆÊôÇff[16;1H[93m    [mo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏Ëæº„Åø **[17;1H[93m    [m/ [17;8H[K[15;52H[?12l[?25h[?25l„ÅÆbinary == 0Ôºå0 <= b < layer1_size„ÅÆ[94m>>[m[16;1H[93m    [mÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏Ëæº[94m>>[m[17;1H[93m    [m„Åø */[15;54H[?12l[?25hbinary =[?25l= 0Ôºå0 <= b < layer1_size„ÅÆÊôÇ[16;4H[93m [mfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏Ëæº„Åø  [17;1H[93m    [m*/[17;8H[K[15;61H[?12l[?25h= 0[?25l0„Çà„ÇäÔºå0 <= b < layer1_sizee[16;1H[93m    [m„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø„ÇíÊõ∏[94m>>[m[17;1H[93m    [mËæº„Åø */[15;68H[?12l[?25h[?25lÂãï„ÅèÔºå0 <= b < layer1__[16;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[17;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */[15;72H[?12l[?25h[19;41H[20;50H[?25l[20;18H[46m([8C)[?12l[?25h[?25l[?12l[?25h[?25l[m[20;18H([8C)[?12l[?25h[?25l[46m([8C)[20;19H[?12l[?25h[?25l[?12l[?25h[?25l[m([8C)[20;17H[?12l[?25h[?25l[12;42H[46m{[21;9H}[?12l[?25h[m[29;1H[K[21;8H[?25l[12;42H{[21;9H}[?12l[?25h[?25l[12;42H[46m{[21;9H}[12;42H[?12l[?25h[?25l[m[29;1H[1m-- INSERT --[12;43H[?12l[?25h[?25l[m{a /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */[21;9H}[12;44H[?12l[?25h[?25l[46m{[m /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */[12;86H[K[21;9H[46m}[12;43H[?12l[?25h[?25l[m{[21;9H}[12;44H[?12l[?25h/* 0 <=[?25l[46m{[21;9H}[12;43H[?12l[?25h[?25l[?12l[?25h[?25l[12;13H([26C)[m {[21;9H}[12;41H[?12l[?25h[?25l[12;13H([26C)% { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */[12;42H[?12l[?25h[?25l[12;13H[46m([26C)[m { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */[12;86H[K[12;41H[?12l[?25h[29;1H[K[12;40H[?25l[?12l[?25h[?25l[12;13H([26C)[?12l[?25h[?25l [46m{[21;9H}[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[21;9H[?12l[?25h[?25l[12;42H[?12l[?25h[?25l[m{[21;9H}[10;42H[?12l[?25h[9;32H[8;42H[?25l[46m{[22;7H}[8;25H[?12l[?25h[?25l[m{[22;7H}[8;26H[?12l[?25h /* [?25l[29;1H[1m-- INSERT --[8;31H[?12l[?25h[?25l[m „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUE */[8;44H[?12l[?25h[9;33H[10;44H[12;44H[?25l[13;18H[46m([24C)[?12l[?25h[?25l[m[13;18H([24C)[12;44H[?12l[?25h[10;44H[9;33H[8;44H[9;33H[10;44H[12;44H[?25l[13;18H[46m([24C)[?12l[?25h[?25l[m[13;18H([24C)[14;44H[?12l[?25h[18;44H[20;43H[21;43H[?25l[22;15H[?12l[?25h[21;14H[20;14H[18;14H[?25l[14;14H[46m([mbinary[46m)[m[67C]][15;1H[93m [m[87C__[16;1H[93m [m[87C[94m>>[m[17;1H[93m [14;14H[?12l[?25h[?25l[m(binary)[67C]][15;1H[93m [m[87C__[16;1H[93m [m[87C[94m>>[m[17;1H[93m [13;14H[?12l[?25h[?25l[m[12;13H[46m([26C)[12;14H[?12l[?25h[?25l[m([26C)[10;14H[?12l[?25h[9;14H[8;14H[6;14Hpe[?25ln[46m([17C)[m[53C[94m>>[m[7;1H[93m [6;17H[?12l[?25h[?25l[m[72C[94m>>[m[7;1H[93m [6;18H[?12l[?25h[?25l[m([17C)[53C[94m>>[m[7;1H[93m [6;19H[?12l[?25h[8;19H[9;19H[8;19H[m== [?25l[8;10H[46m([12C)[?12l[?25h[?25l)[?12l[?25h[?25l[m[8;10H([12C) [46m{[22;7H}[8;25H[?12l[?25h[?25l{[?12l[?25h[?25l[m{[22;7H}[8;27H[?12l[?25h/* [2C[2C[2C[2C[2C[2C[2C44[2C[2C[2Cclasses = 0[2C[2CTRUERUE[?25lEÔºå */[?12l[?25h[?25l5 */[?12l[?25h[?25l56 */[?12l[?25h[?25l69 */[?12l[?25h[?25l9Ë°åÁõÆ */[?12l[?25h[?25l„Åæ„Åß */[?12l[?25h[9;33H[10;84H[12;84H[13;84H[14;84H[18;84H[20;50H[21;43H[?25l[22;15H[?12l[?25h[?25l{[?12l[?25h[?25l{a[?12l[?25h[?25l[22;15H[K[22;15H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ */[?12l[?25h[?25lc */[?12l[?25h[?25lcl */[?12l[?25h[?25lla */[?12l[?25h[?25las */[?12l[?25h[?25lss */[?12l[?25h[?25lse */[?12l[?25h[?25len */[?12l[?25h[?25le */[22;42H[K[22;39H[?12l[?25h[?25les */[?12l[?25h[?25l  */[?12l[?25h[?25l = */[?12l[?25h[?25l== */[?12l[?25h[?25l  */[?12l[?25h[?25l 0 */[?12l[?25h[?25l0„Çà„Çä */[?12l[?25h[?25lÂãï„Åã„Å™„ÅÑ */[?12l[?25h[?25lÔºÅ */[?12l[?25h[23;16H[22;13H[21;13H[20;13H[18;13H[14;13H[13;13H[?25l[12;13H[46m([26C)[12;13H[?12l[?25h[?25l[m([26C)[10;13H[?12l[?25h[9;13H[8;13H[9;13H[10;13H[?25l[76Cii[11;1H[93m [m[12;13H[46m([26C)[12;13H[?12l[?25h[?25l[m([26C)[13;13H[?12l[?25h[14;13H[18;13H[20;13H[21;13H[22;13H[23;13H[24;13H[25;13H[27;13H[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[28;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */[26;13H[?12l[?25h[27;13H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m576 [m    for [46m([ma = 0; a < vocab_size; a++[46m)[m cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {[27;13H[?12l[?25h[?25l([26C)[28;13H[46m([20C)[28;13H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;13H([20C)
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;[27;13H[?12l[?25h[28;13H[?25l[1;28r[28;1H
[1;29r[28;1H[93m580 [m      for (c = 0; c < vocab_size; c++) {[28;13H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m581 [m[7C for (d = 0; d < layer1_size; d++) cent[layer1_size * cl[c] + d] += syn0[c * ll[27;1H[93m    [mayer1_size + d];
[93m582 [m[7C centcn[cl[c]]++;[26;13H[?12l[?25h[28;13H[26;13H[25;13H[24;13H[23;13H[?25l[22;13H[46m([20C)[22;13H[?12l[?25h[?25l[21;13H([26C)[m[22;13H([20C)[21;13H[?12l[?25h[?25l([26C)[19;13H[?12l[?25h[18;13H[16;13H[14;13H[13;13H[12;13H[11;13H[10;13H[11;13H[12;13H[13;13H[14;13H[16;13H[18;13H[19;13H[?25l[76C[94m>>[m[20;1H[93m [m[21;13H[46m([26C)[21;13H[?12l[?25h[?25l[m([26C)[22;13H[46m([20C)[22;13H[?12l[?25h[?25l[m([20C)[23;13H[?12l[?25h[24;13H[25;13H[26;13H[28;13H[?25l[1;28r[28;1H
[1;29r[24;44H[46m{[m[28;1H[93m583 [m      [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[23;44H{[27;11H}
[93m584 [m      for (b = 0; b < clcn; b++) {[28;13H[?12l[?25h[?25l[1;28r[1;1H[4M[1;29r[25;1H[93m585 [m[7C closev = 0;
[93m586 [m[7C for (c = 0; c < layer1_size; c++) {
[93m587 [m[9C cent[layer1_size * b + c] /= centcn[b];
[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];[25;13H[?12l[?25h[26;13H[25;13Hclosev = 0;[26;24H[25;24H[24;24H[?25l[19;44H[46m{[23;11H}[?12l[?25h[?25l[m[19;44H{[22;22H[46m[[mc[46m][m[23;11H}[22;24H[?12l[?25h[?25l[c][20;24H[?12l[?25h[19;24H[18;24H[17;24H[16;24H[15;24H[13;24H[12;24H[13;24H[15;24H[16;24H[17;24H[18;24H[19;24H[20;24H[?25l[65Cll[21;1H[93m [m[22;22H[46m[[mc[46m][?12l[?25h[?25l[19;44H{[m[22;22H[c][23;11H[46m}[?12l[?25h[?25l[m[19;44H{[23;11H}[24;24H[?12l[?25h[25;24H[24;24H[?25l[19;44H[46m{[23;11H}[?12l[?25h[?25l[m[19;44H{[22;22H[46m[[mc[46m][m[23;11H}[22;24H[?12l[?25h[?25l[c][20;24H[?12l[?25h[?25l[65Cll[21;1H[93m [m[22;22H[46m[[mc[46m][?12l[?25h[?25l[m[c][20;24H[?12l[?25h[19;24H[18;24H[17;24H[16;24H[15;24H[13;24H[12;24H[10;24H[12;24H[13;24H[12;24H[10;24H[?25l[8;23H[46m([mint *[46m)[m[59C[94m>>[m[9;1H[93m [8;24H[?12l[?25h[?25l[m(int *)[59C[94m>>[m[9;1H[93m [7;24H[?12l[?25h[6;24H[7;24H[?25l[m[8;23H[46m([mint *[46m)[m[59C[94m>>[m[9;1H[93m [8;24H[?12l[?25h[?25l[m(int *)[59C[94m>>[m[9;1H[93m [10;24H[?12l[?25h[12;24H[13;24H[15;24H[16;24H[17;24H[18;24H[19;24H[20;24H[?25l[m[65Cll[21;1H[93m [m[22;22H[46m[[mc[46m][?12l[?25h[?25l[m[c][20;24H[?12l[?25h[19;24H[18;24H[17;24H[16;24H[15;24H[13;24H[12;24H[10;24H[?25l[8;23H[46m([mint *[46m)[m[59C[94m>>[m[9;1H[93m [8;24H[?12l[?25h[?25l[m(int *)[59C[94m>>[m[9;1H[93m [7;24H[?12l[?25h[6;24H[5;23H[?25l[?12l[?25h[m[29;1H[K[5;13H[?25l[?12l[?25h [?25l[27m[m[H[2J[1;1H[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}[14;7H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[3;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][7;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[8;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[9;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[11;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */
[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */
[93m569 [m  } else [46m{[m /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[18;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å [20;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[23;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */
[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {[14;14H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}[14;7H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[3;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][7;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[8;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[9;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[11;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */
[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */
[93m569 [m  } else [46m{[m /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[18;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å [20;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[23;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */
[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {[14;14H[?12l[?25h[?25l{[?12l[?25h /* [?25l[27m[m[H[2J[1;1H[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}[14;7H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[3;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][7;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[8;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[9;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[11;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */
[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */
[93m569 [m  } else [46m{[m /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[18;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å [20;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[23;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */
[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {[14;14H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}[14;7H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[3;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][7;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[8;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[9;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[11;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */
[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */
[93m569 [m  } else [46m{[m /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[18;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å [20;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[23;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */
[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {[14;14H[?12l[?25h[?25l{[?12l[?25h /* [?25l[29;1H[1m-- INSERT --[14;21H[?12l[?25h[?25l[m 6„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[14;20H[?12l[?25h[?25l61„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[14;21H[?12l[?25h[?25l12„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[14;22H[?12l[?25h[?25l2Ë°åÁõÆ„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[14;26H[?12l[?25h[?25l„Åæ„Åß„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[14;30H[?12l[?25h[?25lÔºå„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[14;32H[?12l[?25h[?25l[?12l[?25h[15;14H[16;14H[17;14H[19;14H[21;14H[22;14H[?25l[75C[94m>>[m[23;1H[93m [m[24;13H[46m([26C)[24;14H[?12l[?25h[?25l[m([26C)[25;13H[46m([20C)[25;14H[?12l[?25h[?25l[m([20C)[26;14H[?12l[?25h[27;14H[26;14H[?25l[25;13H[46m([20C)[25;14H[?12l[?25h[?25l[24;13H([26C)[m[25;13H([20C)[24;14H[?12l[?25h[?25l([26C)[24;15H[?12l[?25h = 0; a < vocab_size; a+[?25l[24;13H[46m([26C)[?12l[?25h[?25l[m[24;13H([26C)[25;37H[?12l[?25h[26;40H[27;40H[28;40H[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m581 [m[7C for (d = 0; d < layer1_size; d++) cent[layer1_size * cl[c] + d] += syn0[c * ll[27;1H[93m    [mayer1_size + d];
[93m582 [m[7C centcn[cl[c]]++;[26;40H[?12l[?25h[28;29H[?25l[1;28r[28;1H
[1;29r[24;44H[46m{[m[28;1H[93m583 [m      [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[23;44H{[27;11H}
[93m584 [m      for (b = 0; b < clcn; b++) {[?12l[?25h[?25l[1;28r[1;1H[4M[1;29r[25;1H[93m585 [m[7C closev = 0;
[93m586 [m[7C for (c = 0; c < layer1_size; c++) {
[93m587 [m[9C cent[layer1_size * b + c] /= centcn[b];
[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];[25;24H[?12l[?25h[26;40H[?25l[27;19H[46m[[19C][?12l[?25h[?25l[m[27;19H[[19C][28;40H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[24;47H[46m{[m


[93m589 [m[7C [46m}[m
[93m590 [m[7C closev = sqrt(closev);[27;14H[?12l[?25h[?25l[24;47H{[27;13H}[28;35H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m591 [m[7C for (c = 0; c < layer1_size; c++) cent[layer1_size * b + c] /= closev;[28;40H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[20;38H[46m{[m[28;1H[93m592 [m      [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[19;38H{[27;11H}
[93m593 [m      for (c = 0; c < vocab_size; c++) {[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m594 [m[7C closev = -10;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m595 [m[7C closeid = 0;[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m596 [m[7C for (d = 0; d < clcn; d++) {
[93m597 [m[9C x = 0;[27;40H[?12l[?25h[28;21H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[28;1H[93m    [m layer1_size + b];[27;40H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m599 [m[9C if (x > closev) {[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;[27;28H[?12l[?25h[28;29H[?25l[1;28r[28;1H
[1;29r[25;31H[46m{[m


[93m602 [m[9C [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[20;40H[46m{[m[24;31H{[27;15H}
[93m603 [m[7C [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[19;40H{[27;13H}
[93m604 [m[7C cl[c] = closeid;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[15;44H[46m{[m[28;1H[93m605 [m      [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[14;44H{[27;11H}
[93m606 [m    }[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);[27;36H[?12l[?25h[?25l[28;13H[46m([26C)[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;13H([26C)
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;39H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;39H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;40H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */[28;39H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m615 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[28;40H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m617 [m  int a;[?12l[?25h[27;40H[26;5H[25;40H[24;39H[23;30H[22;40H[21;39H[20;39H[29;1H[K[20;37H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25hw[?25l"word2vec.c" 703L, 40850C written[20;37H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hq[?25l[29;1H[K[29;1H[?1l>[?12l[?25h[?1049lbash-3.2$ exit
exit

Script done on Mon Oct 26 13:14:55 2015
Script started on Mon Oct 26 13:15:09 2015
bash: /path/to/your/virtualenvwrapper.sh: No such file or directory
[?1034hbash-3.2$ exit
exit

Script done on Mon Oct 26 13:15:13 2015
Script started on Mon Oct 26 13:55:43 2015
bash: /path/to/your/virtualenvwrapper.sh: No such file or directory
[?1034hbash-3.2$ exitvi word2vec.c[4Ptest.cword2vec.c[4Ptest.cword2vec.c
[?1049h[?1h=[1;29r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[29;1H"word2vec.c" 703L, 40850C[>c[1;1H//  Copyright 2013 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>

#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
#define EXP_TABLE_SIZE 1000
#define MAX_EXP 6
#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */

const int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabulary[1;1H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hset number[?25l[1;1H[93m  1 [m//  Copyright 2013 Google Inc. All Rights Reserved.
[93m  2 [m//
[93m  3 [m//  Licensed under the Apache License, Version 2.0 (the "License");
[93m  4 [m//  you may not use this file except in compliance with the License.
[93m  5 [m//  You may obtain a copy of the License at
[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[28;1H[93m    [mary[1;5H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25h50[?25l[29;3H[K[29;3H[?12l[?25h50[?25l[27m[m[H[2J[1;1H[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL); /* Âëº„Å≥Âá∫„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü(557Ë°åÁõÆ„Å®558Ë°åÁõÆ„Å´Èñ¢‰øÇ) */
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû[12;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[22;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[23;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[25;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[27;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUEÔºå569Ë°åÁõÆ„Åæ„Åß */[14;7H[?12l[?25h[15;7H[16;7H[17;7H[18;7H[19;7H[20;7H[21;7H[24;7H[26;7H[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m561 [m    // Save the word vectors[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[28;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */[28;7H[?12l[?25h[?25l[1;28r[1;1H[4M[1;29r[25;1H[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][26;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[27;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[28;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */[25;7H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[27;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */[26;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[14;25H[46m{[m[28;1H[93m569 [m  [46m}[m else { /* 612Ë°åÁõÆ„Åæ„ÅßÔºå„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[13;25H{[27;7H}
[93m570 [m    // Run K-means on the word vectors[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m571 [m    int clcn = classes, iter = 10, closeid;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[28;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å[28;1H[93m    [mÁõÆ„ÅßËß£Êîæ */[27;7H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[28;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */[26;7H[?12l[?25h[27;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m580 [m      for (c = 0; c < vocab_size; c++) {[28;7H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m581 [m[7C for (d = 0; d < layer1_size; d++) cent[layer1_size * cl[c] + d] += syn0[c * ll[27;1H[93m    [mayer1_size + d];
[93m582 [m[7C centcn[cl[c]]++;[26;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m583 [m      }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m584 [m      for (b = 0; b < clcn; b++) {[28;7H[?12l[?25h[?25l[1;28r[1;1H[4M[1;29r[25;1H[93m585 [m[7C closev = 0;
[93m586 [m[7C for (c = 0; c < layer1_size; c++) {
[93m587 [m[9C cent[layer1_size * b + c] /= centcn[b];
[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];[25;7H[?12l[?25h[26;7H[27;7H[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m589 [m[7C }
[93m590 [m[7C closev = sqrt(closev);[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m591 [m[7C for (c = 0; c < layer1_size; c++) cent[layer1_size * b + c] /= closev;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m592 [m      }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m593 [m      for (c = 0; c < vocab_size; c++) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m594 [m[7C closev = -10;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m595 [m[7C closeid = 0;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m596 [m[7C for (d = 0; d < clcn; d++) {
[93m597 [m[9C x = 0;[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[28;1H[93m    [m layer1_size + b];[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m599 [m[9C if (x > closev) {[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m602 [m[9C }[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m603 [m[7C }[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m604 [m[7C cl[c] = closeid;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m605 [m      }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m606 [m    }[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);[27;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m615 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m617 [m  int a;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m619 [m    if (a == argc - 1) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m620 [m      printf("Argument missing for %s\n", str);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m621 [m      exit(1);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m622 [m    }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m623 [m    return a;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[22;61H[46m{[m[28;1H[93m624 [m  [46m}[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[20;61H{[26;7H}
[93m625 [m  return -1;
[93m626 [m}[27;7H[?12l[?25h[?25l[18;50H[46m{[28;5H}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[17;50H{[27;5H}
[93m627 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m630 [m  if (argc == 1) {[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m632 [m    printf("Options:\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m633 [m    printf("Parameters for training:\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m634 [m    printf("\t-train <file>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m636 [m    printf("\t-output <file>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m638 [m    printf("\t-size <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m640 [m    printf("\t-window <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m653 [m    printf("\t-min-count <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[28;7H[?12l[?25h[27;7H[26;7H[25;7H[23;7H[22;7H[20;7H[19;7H[17;7H[16;7H[15;7H[14;7H[13;7H[12;7H[10;7H[9;7H[8;7H[7;7H[5;7H[3;7H[2;7H[1;7H[?25l[1;28r[1;1H[L[1;29r[1;1H[93m640 [m    printf("\t-window <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m638 [m    printf("\t-size <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m636 [m    printf("\t-output <file>\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m634 [m    printf("\t-train <file>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m633 [m    printf("Parameters for training:\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m632 [m    printf("Options:\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m630 [m  if (argc == 1) {[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m627 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m626 [m}[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m625 [m  return -1;[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m624 [m  }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m623 [m    return a;[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m622 [m    }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m621 [m      exit(1);[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m620 [m      printf("Argument missing for %s\n", str);[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m619 [m    if (a == argc - 1) {[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m617 [m  int a;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m615 [?12l[?25h[2;7H[3;7H[4;7H[5;7H[6;7H[7;7H[8;7H[9;7H[?25l[m[4;61H[46m{[10;7H}[?12l[?25h[?25l[m[4;61H{[10;7H}[11;7H[?12l[?25h[?25l[2;50H[46m{[12;5H}[?12l[?25h[?25l[m[2;50H{[12;5H}[13;5H[?12l[?25h[14;7H[15;7H[16;7H[17;7H  print[?25lf[46m([43C)[17;15H[?12l[?25h[?25l[m([43C)[17;16H[?12l[?25h"WOR[18;20H[19;20H[20;20H[21;20H[22;20H[23;20H[24;20H[25;20H[26;20H[27;20H[28;20H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[27;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m653 [m    printf("\t-min-count <int>\n");[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m663 [m    printf("\t-save-vocab <file>\n");[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the tra[28;1H[94m@                                                                                        [27;20H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[27;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");[26;20H[?12l[?25h[28;20H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[28;1H[93m    [mram model)\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m669 [m    printf("\nExamples:\n");[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[28;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m671 [m    return 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m672 [m  }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m673 [m  output_file[46m[[m0[46m][m = 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[27;18H[0]
[93m674 [m  save_vocab_file[0] = 0;[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m675 [m  read_vocab_file[0] = 0;[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[28;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1])[28;1H[94m@                                                                                        [27;20H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[28;1H[93m    [m;[27;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[28;1H[93m    [mgv[i + 1]);[27;20H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[27;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;20H[?12l[?25h[28;20H[?25l[1;28r[28;1H
[1;29r[28;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m683 [m  if (cbow) alpha = 0.05;[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[28;1H[93m    [m]);[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[27;20H[?12l[?25h[28;20H[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [26;20H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[27;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [27;20H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[27;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m695 [m  vocab_hash = [46m([mint *[46m)[mcalloc(vocab_hash_size, sizeof(int));[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[27;20H(int *)
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));[28;20H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {[28;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[28;1H[93m    [me exp() table[27;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([28;1H[93m    [mx) = x / (x + 1)[27;20H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[22;44H[46m{[m[27;1H[93m700 [m  [46m}[m
[93m701 [m  TrainModel();[27;7H[?12l[?25h[?25l[22;44H{[27;7H}[28;19H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m702 [m  return 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m703 [m}[?12l[?25h[27;15H[26;19H[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[23;20H[?12l[?25h[21;20H[20;20H[21;20H[23;20H[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[26;19H[?12l[?25h[27;15H[26;19H[?25l


/[?12l[?25hTrainModel[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m352 [m    if (syn1neg == NULL) {printf("Memory allocation failed\n"); exit(1);} /* ‰∏ä„Åß„É°„É¢[2;1H[93m    [m„É™„ÅÆÂâ≤ÂΩì„Å´Â§±Êïó„Åó„ÅüÊôÇ„Å´Ë°®Á§∫ */
[93m353 [m    for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) /* 0 <= a < voo[4;1H[93m    [mcab_size & 0 <= b < layer1_size„ÅÆÊôÇ */
[93m354 [m     syn1neg[a * layer1_size + b] = 0;
[93m355 [m  }
[93m356 [m  for (a = 0; a < vocab_size; a++) for (b = 0; b < layer1_size; b++) {
[93m357 [m    next_random = next_random * (unsigned long long)25214903917 + 11;
[93m358 [m    syn0[a * layer1_size + b] = (((next_random & 0xFFFF) / (real)65536) - 0.5) / layee[10;1H[93m    [mr1_size;
[93m359 [m  }
[93m360 [m  CreateBinaryTree(); /* 198Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüCreateBinaryTree()„ÅßHuffmanÊú®„ÇíÁîüÊàê */
[93m361 [m}
[93m362 
363 [mvoid *TrainModelThread(void *id) { /* 543Ë°åÁõÆ„Åæ„Åß„ÅÇ„Çã */
[93m364 [m  long long a, b, d, cw, word, last_word, sentence_length = 0, sentence_position = 0;[17;1H[93m365 [m  long long word_count = 0, last_word_count = 0, sen[MAX_SENTENCE_LENGTH + 1]; /* ÈÖç[94m>>[m[18;1H[93m    [mÂàósen„ÅØ1001ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊåÅ„Å§ */
[93m366 [m  long long l1, l2, c, target, label, local_iter = iter; /* 44Ë°åÁõÆ„Çà„Çäiter == 5 */
[93m367 [m  unsigned long long next_random = (long long)id;
[93m368 [m  real f, g; /* realÂûãÂ§âÊï∞f, g (skip-gramÁ≠â„ÅßÈ†ªÂá∫) */
[93m369 [m  clock_t now;
[93m370 [m  real *neu1 = (real *)calloc(layer1_size, sizeof(real)); /* *neu1„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤[94m>>[m[24;1H[93m    [mÂΩìÔºå 540Ë°åÁõÆ„ÅßËß£Êîæ*/
[93m371 [m  real *neu1e = (real *)calloc(layer1_size, sizeof(real)); /* *neu1e„Å´„É°„É¢„É™„ÇíÂãïÁöÑ„Å´[94m>>[m[26;1H[93m    [mÂâ≤ÂΩìÔºå541Ë°åÁõÆ„ÅßËß£Êîæ */
[93m372 [m  FILE *fi = fopen(train_file, "rb"); /* Ë™≠Âá∫„É¢„Éº„Éâ„Åßtrain_file„ÇíÈñã„ÅçÔºå„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥ [28;1H[93m    [m„Çøfi„Å´‰ª£ÂÖ•Ôºå374Ë°åÁõÆ„Åã„Çâ538Ë°åÁõÆ„Åæ„Åß„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅÆÂæå539Ë°åÁõÆ„ÅßÈñâ„Åò„Çã */
[38;5;224msearch hit BOTTOM, continuing at TOP[15;11H[?12l[?25h[?25l[m[29;1H/TrainModel[29;12H[K[29;1H[27m[m[H[2J[1;1H[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[7;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */
[93m539 [m  fclose(fi); /* 372Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åütrain_file„ÇíÈñâ„Åò„Çã */
[93m540 [m  free(neu1); /* 370Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m541 [m  free(neu1e); /* 371Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüneu1e„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m542 [m  pthread_exit(NULL); /* Âëº„Å≥Âá∫„Åó„Åü„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü(557Ë°åÁõÆ„Å®558Ë°åÁõÆ„Å´Èñ¢‰øÇ) */
[93m543 [m} /* 363Ë°åÁõÆ„Åã„Çâ„ÅÆTrainModelThreadÁµÇ„Çè„Çä */
[93m544 
545 [mvoid TrainModel() { /* 614Ë°åÁõÆ„Åæ„Åß */
[93m546 [m  long a, b, c, d;
[93m547 [m  FILE *fo;
[93m548 [m  pthread_t *pt = (pthread_t *)malloc(num_threads * sizeof(pthread_t)); /* pthread(„Éû [20;1H[93m    [m„É´„ÉÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„É©„Ç§„Éñ„É©„É™) */
[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();[14;23H[?12l[?25h[?25l[29;1H/TrainModel[16;10H[?12l[?25h[?25l[29;1H[1;28r[1;1H[3M[1;29r[26;1H[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[27;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[28;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */[29;1H[K[26;70H[?12l[?25h[?25l


/TrainModel[27;75H[?12l[?25h[?25l

[1;28r[1;1H[2M[1;29r[27;1H[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[28;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */[29;1H[K[28;10H[?12l[?25h[?25l
/TrainModel[27m[m[H[2J[1;1H[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */[14;22H[?12l[?25h[?25l[29;1H/TrainModel[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel();
[93m702 [m  return 0;
[93m703 [m}[26;7H[?12l[?25h[12C[?25l


[1m-- INSERT --[26;20H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l 5 */[?12l[?25h[?25l54 */[?12l[?25h[?25l45 */[?12l[?25h[?25l5Ë°åÁõÆ */[?12l[?25h[?25l„ÅÆ */[?12l[?25h[?25lT */[?12l[?25h[?25lTr */[?12l[?25h[?25lra */[?12l[?25h[?25lai */[?12l[?25h[?25lin */[?12l[?25h[?25lnM */[?12l[?25h[?25lMo */[?12l[?25h[?25lod */[?12l[?25h[?25lde */[?12l[?25h[?25lel */[?12l[?25h[?25ll„Çí */[?12l[?25h[?25lÈñã„Åè */[?12l[?25h[?25lTrainModel„ÇíÈñã„Åè */[26;50H[K[26;31H[?12l[?25h[?25l„ÅßTrainModel„ÇíÈñã„Åè */[26;33H[?12l[?25h[?25lÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */[26;41H[?12l[?25h[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[23;41H[?12l[?25h[21;41H[20;41H[?25l[19;18H[46m([mreal *[46m)[?12l[?25h[m[29;1H[K[19;24H[?25l(real *)[?12l[?25h[?25l[29;1H/[?12l[?25hs[?25l[29;2H[K[29;2H[?12l[?25hexpTable[?25l[21;9H[?12l[?25h[?25l[29;1H?[19;7H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m515 [m[11C target = table[(next_random >> 16) % table_size]; /* target„Å´table[(next__[2;1H[93m    [mrandom >> 16) % table_size]„Çí‰ª£ÂÖ• */
[93m516 [m[11C if (target == 0) target = next_random % (vocab_size - 1) + 1;
[93m517 [m[11C if (target == word) continue; /* target == word„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶510[94m>>[m[5;1H[93m    [mË°åÁõÆ„Å´Êàª„Çã */
[93m518 [m[11C label = 0;
[93m519 [m[9C }
[93m520 [m[9C l2 = target * layer1_size;
[93m521 [m[9C f = 0;
[93m522 [m[9C for (c = 0; c < layer1_size; c++) f += syn0[c + l1] * syn1neg[c + l2];
[93m523 [m[9C if (f > MAX_EXP) g = (label - 1) * alpha;
[93m524 [m[9C else if (f < -MAX_EXP) g = (label - 0) * alpha;
[93m525 [m[9C else g = (label - expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP  [14;1H[93m    [m/ 2))]) * alpha;
[93m526 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1neg[c + l2];
[93m527 [m[9C for (c = 0; c < layer1_size; c++) syn1neg[c + l2] += g * syn0[c + l1];
[93m528 [m[7C } /* 509Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„ÅØ„Åì„Åì„Åæ„Åß */
[93m529 [m[7C // Learn weights input -> hidden
[93m530 [m[7C for (c = 0; c < layer1_size; c++) syn0[c + l1] += neu1e[c];
[93m531 [m      }
[93m532 [m    } /* 483Ë°åÁõÆ„Åã„Çâ„ÅÆskip-gramÁµÇ„Çè„Çä */
[93m533 [m    sentence_position++; /* sentence_position„ÅØ„Åì„Åì„Åß1Â¢ó„Åà„Çã */
[93m534 [m    if (sentence_position >= sentence_length) {
[93m535 [m      sentence_length = 0;
[93m536 [m      continue; /* sentence_position >= sentence_length„ÅÆÊôÇsentence_length = 0„Å®„Åó„Åü[94m>>[m[26;1H[93m    [m‰∏ä„ÅßÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„ÅóÔºå375Ë°åÁõÆ„Å´Êàª„Çã */
[93m537 [m    }
[93m538 [m  } /* 374Ë°åÁõÆ„Åã„ÇâÁÑ°Èôê„É´„Éº„ÉóÁµÇ„Çä */[13;33H[?12l[?25h[?25l[29;1H?expTable[27m[m[H[2J[1;1H[93m491 [m[7C for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m492 [m[7C // HIERARCHICAL SOFTMAX /* ÈöéÂ±§ÁöÑ„ÇΩ„Éï„Éà„Éû„ÉÉ„ÇØ„Çπ */
[93m493 [m[7C if (hs) for (d = 0; d < vocab[word].codelen; d++) { /* 507Ë°åÁõÆ„Åæ„Åß(„Éá„Éï„Ç©„É´„Éà[4;1H[93m    [m„Å†„Å®hs == 0„Å†„Åã„ÇâÂãï„Åã„Å™„ÅÑÔºÅ) */
[93m494 [m[9C f = 0; /* realÂûãÂ§âÊï∞f(368Ë°åÁõÆ„ÅßÂÆ£Ë®ÄÊ∏à)„Å´0„Çí‰ª£ÂÖ• */
[93m495 [m[9C l2 = vocab[word].point[d] * layer1_size;
[93m496 [m[9C // Propagate hidden -> output /* hidden„Åã„Çâoutput„Å´ÂèçÊò† */
[93m497 [m[9C for (c = 0; c < layer1_size; c++) f += syn0[c + l1] * syn1[c + l2];
[93m498 [m[9C if (f <= -MAX_EXP) continue; /* f <= -MAX_EXP(== -6, 23Ë°åÁõÆ)„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠[94m>>[m[10;1H[93m    [m„ÉÉ„Éó */
[93m499 [m[9C else if (f >= MAX_EXP) continue; /* f >= MAX_EXP(== 6, 23Ë°åÁõÆ)„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ[94m>>[m[12;1H[93m    [m„Ç≠„ÉÉ„Éó */
[93m500 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))]; //[14;1H[93m    [m* -MAX_EXP < f < MAX_EXP„ÅÆÊôÇ f„Å´expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX__[15;1H[93m    [mEXP / 2))]„Çí‰ª£ÂÖ• */
[93m501 [m[9C // 'g' is the gradient multiplied by the learning rate /* 'g'„ÅØÂãæÈÖç„Å®Â≠¶ÁøíÊØî[17;1H[93m    [m„ÅÆÁ©ç */
[93m502 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;
[93m503 [m[9C // Propagate errors output -> hidden /* „Ç®„É©„Éº„Çíoutput„Åã„Çâhidden„Å´ÂèçÊò† */
[93m504 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];
[93m505 [m[9C // Learn weights hidden -> output /* Èáç„Åø„ÇíÂ≠¶Áøí„Åó„Å¶hiden„Åã„Çâ */
[93m506 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * syn0[c + l1];
[93m507 [m[7C } /* 493Ë°åÁõÆ„Åã„Çâ */
[93m508 [m[7C // NEGATIVE SAMPLING /* „Éç„Ç¨„ÉÜ„Ç£„Éñ„Çµ„É≥„Éó„É™„É≥„Ç∞ */
[93m509 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) { /* 528Ë°åÁõÆ„Åæ„Åß(„Éá„Éï„Ç©[94m>>[m[26;1H[93m    [m„É´„Éà„Å†„Å®negative == 5„Å†„Åã„Çâ„Åì„Å£„Å°„ÅåÂãï„Åè) */
[93m510 [m[9C if (d == 0) { /* „É´„Éº„Éó„ÅÆÊúÄÂàù„Å†„Åë */
[93m511 [m[11C target = word;[14;37H[?12l[?25h[?25l[29;1H?expTable[13;24H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m456 [m[11C label = 1;
[93m457 [m[9C } else {
[93m458 [m[11C next_random = next_random * (unsigned long long)25214903917 + 11;
[93m459 [m[11C target = table[(next_random >> 16) % table_size];
[93m460 [m[11C if (target == 0) target = next_random % (vocab_size - 1) + 1;
[93m461 [m[11C if (target == word) continue;
[93m462 [m[11C label = 0;
[93m463 [m[9C }
[93m464 [m[9C l2 = target * layer1_size;
[93m465 [m[9C f = 0;
[93m466 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1neg[c + l2];
[93m467 [m[9C if (f > MAX_EXP) g = (label - 1) * alpha;
[93m468 [m[9C else if (f < -MAX_EXP) g = (label - 0) * alpha;
[93m469 [m[9C else g = (label - expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP  [15;1H[93m    [m/ 2))]) * alpha;
[93m470 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1neg[c + l2];
[93m471 [m[9C for (c = 0; c < layer1_size; c++) syn1neg[c + l2] += g * neu1[c];
[93m472 [m[7C }
[93m473 [m[7C // hidden -> in
[93m474 [m[7C for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {
[93m475 [m[9C c = sentence_position - window + a;
[93m476 [m[9C if (c < 0) continue;
[93m477 [m[9C if (c >= sentence_length) continue;
[93m478 [m[9C last_word = sen[c];
[93m479 [m[9C if (last_word == -1) continue;
[93m480 [m[9C for (c = 0; c < layer1_size; c++) syn0[c + last_word * layer1_size] += neu11[27;1H[93m    [me[c];
[93m481 [m[7C }[14;33H[?12l[?25h[?25l[29;1H?expTable[1;28r[1;1H[12L[1;29r[1;1H[93m444 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))];
[93m445 [m[9C // 'g' is the gradient multiplied by the learning rate
[93m446 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;
[93m447 [m[9C // Propagate errors output -> hidden
[93m448 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];
[93m449 [m[9C // Learn weights hidden -> output
[93m450 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * neu1[c];
[93m451 [m[7C }
[93m452 [m[7C // NEGATIVE SAMPLING
[93m453 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) {
[93m454 [m[9C if (d == 0) {
[93m455 [m[11C target = word;[29;1H[K[1;24H[?12l[?25h[?25l[29;1H?expTable[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;[14;35H[?12l[?25h[?25l[29;1H?expTable[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[23;38H[?12l[?25h[?25l[m[29;1H?expTable[29;10H[K[29;1H[23;23H[?12l[?25h[?25l[29;1H[23;9H[?12l[?25h[?25l[29;1H[21;9H[?12l[?25h[?25l[29;1H[19;7H[?12l[?25h[?25l[29;1H/[21;9H[?12l[?25h[?25l[29;1H[23;9H[?12l[?25h[?25l[29;1H[23;23H[?12l[?25h[?25l[29;1H[23;38H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;
[38;5;224msearch hit BOTTOM, continuing at TOP[14;35H[?12l[?25h[?25l[m[29;1H?expTable[29;10H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[23;38H[?12l[?25h[?25l[m[29;1H/expTable[29;10H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;
[38;5;224msearch hit BOTTOM, continuing at TOP[14;35H[?12l[?25h[?25l[m[29;1H?expTable[29;10H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[23;38H[?12l[?25h[?25l[m[29;1H/expTable[29;10H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;
[38;5;224msearch hit BOTTOM, continuing at TOP[14;35H[?12l[?25h[?25l[m[29;1H?expTable[29;10H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[23;38H[?12l[?25h[?25l[m[29;1H/expTable[29;10H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;
[38;5;224msearch hit BOTTOM, continuing at TOP[14;35H[?12l[?25h[?25l[m[29;1H?expTable[29;10H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real));
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[23;38H[?12l[?25h[?25l[m[29;1H?expTable[29;10H[K[29;1H[23;23H[?12l[?25h[?25l[29;1H[23;9H[?12l[?25h[?25l[29;1H[21;9H[?12l[?25h[?25l[29;1H[19;7H[?12l[?25h[62C[?25l[29;1H[1m-- INSERT --[19;70H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l ÂãïÁöÑ„Å´ */[?12l[?25h[29;1H[K[19;78H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hÂãïÁöÑ[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[2;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[15;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;
[93m 60 [m  d1 = pow(vocab[i].cn, power) / train_words_pow;
[93m 61 [m  for (a = 0; a < table_size; a++) {
[93m 62 [m    table[a] = i;
[93m 63 [m    if (a / (double)table_size > d1) {
[93m 64 [m      i++;
[93m 65 [m      d1 += pow(vocab[i].cn, power) / train_words_pow;
[93m 66 [m    }
[93m 67 [m    if (i >= vocab_size) i = vocab_size - 1;
[93m 68 [m  }
[93m 69 [m}
[93m 70 [m
[38;5;224msearch hit BOTTOM, continuing at TOP[15;11H[?12l[?25h[?25l[m[29;1H?ÂãïÁöÑ[29;6H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* ÂãïÁöÑ„Å´ */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[19;74H[?12l[?25h[?25l[m[29;1H?ÂãïÁöÑ[29;6H[K[29;1H[27m[m[H[2J[1;1H[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[2;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */
[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */
[93m569 [m  } else { /* 612Ë°åÁõÆ„Åæ„ÅßÔºå„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[9;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å [11;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[14;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */
[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {
[93m581 [m[7C for (d = 0; d < layer1_size; d++) cent[layer1_size * cl[c] + d] += syn0[c * ll[21;1H[93m    [mayer1_size + d];
[93m582 [m[7C centcn[cl[c]]++;
[93m583 [m      }
[93m584 [m      for (b = 0; b < clcn; b++) {
[93m585 [m[7C closev = 0;
[93m586 [m[7C for (c = 0; c < layer1_size; c++) {
[93m587 [m[9C cent[layer1_size * b + c] /= centcn[b];
[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];[13;85H[?12l[?25h[?25l[29;1H/ÂãïÁöÑ[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* ÂãïÁöÑ„Å´ */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}[19;74H[?12l[?25h[?25l[29;1H?ÂãïÁöÑ[27m[m[H[2J[1;1H[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[2;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */
[93m568 [m    } /* 563Ë°åÁõÆ„Åã„Çâ„ÅÆforÊñá„Åì„Åì„Åæ„Åß */
[93m569 [m  } else { /* 612Ë°åÁõÆ„Åæ„ÅßÔºå„Éá„Éï„Ç©„É´„Éà„Åß„ÅØclasses == 0„Çà„ÇäÂãï„Åã„Å™„ÅÑÔºÅ */
[93m570 [m    // Run K-means on the word vectors
[93m571 [m    int clcn = classes, iter = 10, closeid;
[93m572 [m    int *centcn = (int *)malloc(classes * sizeof(int)); /* *centcn„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì[94m>>[m[9;1H[93m    [mÔºå609Ë°åÁõÆ„ÅßËß£Êîæ */
[93m573 [m    int *cl = (int *)calloc(vocab_size, sizeof(int)); /* *cl„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå611Ë°å [11;1H[93m    [mÁõÆ„ÅßËß£Êîæ */
[93m574 [m    real closev, x;
[93m575 [m    real *cent = (real *)calloc(classes * layer1_size, sizeof(real)); /* *cent„Å´ÂãïÁöÑ[94m>>[m[14;1H[93m    [m„Å´„É°„É¢„É™Ââ≤ÂΩìÔºå610Ë°åÁõÆ„ÅßËß£Êîæ */
[93m576 [m    for (a = 0; a < vocab_size; a++) cl[a] = a % clcn;
[93m577 [m    for (a = 0; a < iter; a++) {
[93m578 [m      for (b = 0; b < clcn * layer1_size; b++) cent[b] = 0;
[93m579 [m      for (b = 0; b < clcn; b++) centcn[b] = 1;
[93m580 [m      for (c = 0; c < vocab_size; c++) {
[93m581 [m[7C for (d = 0; d < layer1_size; d++) cent[layer1_size * cl[c] + d] += syn0[c * ll[21;1H[93m    [mayer1_size + d];
[93m582 [m[7C centcn[cl[c]]++;
[93m583 [m      }
[93m584 [m      for (b = 0; b < clcn; b++) {
[93m585 [m[7C closev = 0;
[93m586 [m[7C for (c = 0; c < layer1_size; c++) {
[93m587 [m[9C cent[layer1_size * b + c] /= centcn[b];
[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];[13;85H[?12l[?25h[?25l[29;1H?ÂãïÁöÑ[10;67H[?12l[?25h[?25l[29;1H/[13;85H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[5;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[10;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[12;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[15;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int));
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* ÂãïÁöÑ„Å´ */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}[19;74H[?12l[?25h[?25l[29;1H[1m-- INSERT --[19;76H[?12l[?25h[?25l[m eÂãïÁöÑ„Å´ */[19;75H[?12l[?25h[?25lexÂãïÁöÑ„Å´ */[19;76H[?12l[?25h[?25lxTÂãïÁöÑ„Å´ */[19;77H[?12l[?25h[?25lTaÂãïÁöÑ„Å´ */[19;78H[?12l[?25h[?25labÂãïÁöÑ„Å´ */[19;79H[?12l[?25h[?25lblÂãïÁöÑ„Å´ */[19;80H[?12l[?25h[?25lleÂãïÁöÑ„Å´ */[19;81H[?12l[?25h[?25l[20;28r[20;1H[L[1;29r[19;75HxpTableÂãïÁöÑ„Å´ **[20;1H[93m    [m/[19;77H[?12l[?25hTable[?25le„Å´ÂãïÁöÑ„Å´[20;4H[93m [m */[19;84H[?12l[?25h[2C[2C[20;5H[?25l[93m [m„É°„É¢„É™ */[?12l[?25h[?25lÂâ≤ÂΩì */[?12l[?25h[?25l( */[?12l[?25h[?25l[46m()[m */[?12l[?25h[?25l[?12l[?25h[?25l[46m([m„Å©„Åì„Åß[46m)[m */[?12l[?25h[?25lËß£Êîæ[46m)[m */[?12l[?25h[?25lÔºü[46m)[m */[?12l[?25h[29;1H[K[20;26H[?25l[20;15H([12C)[?12l[?25h[?25l[29;1H/[?12l[?25hfree(e[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[m[97m[41mE486: Pattern not found: free(e[m[29;32H[K[20;26H[?12l[?25h[18;63H[?25l[29;1H[1m-- INSERT --[m[29;13H[K[18;64H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l v */[?12l[?25h[?25lvo */[?12l[?25h[?25lob */[?12l[?25h[?25lba */[?12l[?25h[?25lb */[18;74H[K[18;71H[?12l[?25h[?25lo */[18;73H[K[18;70H[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb_ */[?12l[?25h[?25l_h */[?12l[?25h[?25lha */[?12l[?25h[?25las */[?12l[?25h[?25lsh */[?12l[?25h[?25lh„Å´ */[?12l[?25h[?25lÂãïÁöÑ„Å´ */[?12l[?25h[?25l[19;28r[19;1H[L[1;29r[18;86H„É°„É¢[19;1H[93m    [m„É™ */[?12l[?25h[?25lÂâ≤ÂΩì */[?12l[?25h[?25l( */[?12l[?25h[?25l[46m()[m */[?12l[?25h[?25l[?12l[?25h[?25l[46m([m„Å©„Åì„Åß[46m)[m */[?12l[?25h[?25lËß£Êîæ[46m)[m */[?12l[?25h[?25lÔºü[46m)[m */[?12l[?25h[29;1H[K[19;22H[?25l[19;11H([12C)[?12l[?25h[18;7H[?25l[29;1H/[?12l[?25hfree([?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[2;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */
[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[4;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;
[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[10;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå[12;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[17;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[25;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {
[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[38;5;224msearch hit BOTTOM, continuing at TOP[14;11H[?12l[?25h[?25l[m[29;1H?free([29;7H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[2;1H[93m    [m layer1_size + b];
[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[38;5;224msearch hit TOP, continuing at BOTTOM[15;9H[?12l[?25h[?25l[m[29;1H/free([29;7H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[2;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */
[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[4;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;
[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[10;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå[12;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[17;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[25;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {
[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[38;5;224msearch hit BOTTOM, continuing at TOP[14;11H[?12l[?25h[?25l[m[29;1H?free([29;7H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[2;1H[93m    [m layer1_size + b];
[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[38;5;224msearch hit TOP, continuing at BOTTOM[15;9H[?12l[?25h[?25l[m[29;1H?free([29;7H[K[29;1H[14;9H[?12l[?25h[?25l[29;1H/[15;9H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[2;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */
[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[4;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;
[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[10;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå[12;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[17;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[25;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {
[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[38;5;224msearch hit BOTTOM, continuing at TOP[14;11H[?12l[?25h[?25l[m[29;1H[K[29;1H/[?12l[?25hvoda[?25l[29;5H[K[29;5H[?12l[?25h[?25l[29;4H[K[29;4H[?12l[?25hcab_c[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[m[97m[41mE486: Pattern not found: vocab_c[m[29;33H[K[14;11H[?12l[?25h[?25l[29;1H[K[29;1H/[?12l[?25hvocab[?25l[14;16H[?12l[?25h[?25l[29;1H?[13;28H[?12l[?25h[?25l[29;1H[13;11H[?12l[?25h[?25l[29;1H[11;57H[?12l[?25h[?25l[29;1H[11;14H[?12l[?25h[?25l[29;1H[10;31H[?12l[?25h[?25l[29;1H[9;80H[?12l[?25h[?25l[29;1H[6;14H[?12l[?25h[?25l[29;1H[5;45H[?12l[?25h[?25l[29;1H[5;23H[?12l[?25h[?25l[29;1H[4;19H[?12l[?25h[?25l[29;1H[3;84H[?12l[?25h[?25l[29;1H[3;54H[?12l[?25h[?25l[29;1H[3;24H[?12l[?25h[?25l[29;1H[3;14H[?12l[?25h[?25l[29;1H[1;19H[?12l[?25h[?25l[29;1H[1;28r[1;1H[5L[1;29r[1;1H[93m145 [m// Sorts the vocabulary by frequency using word counts /* Ë™ûÂΩô„ÇíÂçòË™ûÊï∞„ÇíÁî®„ÅÑ„Å¶È†ªÂ∫¶È†Ü[94m>>[m[2;1H[93m    [m„Å´‰∏¶Êõø„Åà */
[93m146 [mvoid SortVocab() { /* voidÈñ¢Êï∞SortVocab() */
[93m147 [m  int a, size;
[93m148 [m  unsigned int hash;[29;1H[K[1;18H[?12l[?25h[?25l[29;1H?vocab[1;28r[1;1H[3L[1;29r[1;1H[93m142 [m    return ((struct vocab_word *)b)->cn - ((struct vocab_word *)a)->cn;
[93m143 [m}
[93m144 [m[29;1H[K[1;56H[?12l[?25h[?25l[29;1H?vocab[1;25H[?12l[?25h[?25l[29;1H[1;28r[1;1H[5L[1;29r[1;1H[93m137 [m  return vocab_size - 1;
[93m138 [m}
[93m139 
140 [m// Used later for sorting by word counts /* ÂçòË™ûÊï∞„Åß‰∏¶Êõø„Åà„Çí„Åô„ÇãÈöõ„Å´‰ΩøÁî® */
[93m141 [mint VocabCompare(const void *a, const void *b) {[29;1H[K[1;14H[?12l[?25h[?25l[29;1H?vocab[1;28r[1;1H[L[1;29r[1;1H[93m136 [m  vocab_hash[hash] = vocab_size - 1;[29;1H[K[1;26H[?12l[?25h[?25l[29;1H?vocab[1;7H[?12l[?25h[?25l[29;1H[1;28r[1;1H[L[1;29r[1;1H[93m135 [m  while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;[29;1H[K[1;58H[?12l[?25h[?25l[29;1H?vocab[1;14H[?12l[?25h[?25l[29;1H[1;28r[1;1H[4L[1;29r[1;1H[93m132 [m    vocab = (struct vocab_word *)realloc(vocab, vocab_max_size * sizeof(struct vocab__[2;1H[93m    [mword)); /*  */
[93m133 [m  }
[93m134 [m  hash = GetWordHash(word); /* hash„Å´word„ÅÆhash„Çí‰ª£ÂÖ• */[28;1H[94m@                                                                                        [m[29;1H[K[1;84H[?12l[?25h[?25l[29;1H?vocab[1;53H[?12l[?25h[?25l[29;1H[1;46H[?12l[?25h[?25l[29;1H[1;25H[?12l[?25h[?25l[29;1H[1;9H[?12l[?25h[?25l[29;1H[1;28r[1;1H[L[1;29r[1;1H[93m131 [m    vocab_max_size += 1000; /* vocab_max_size„Å´1000„ÇíË∂≥„Åô */[29;1H[K[1;36H[?12l[?25h[?25l[29;1H?vocab[1;9H[?12l[?25h[?25l[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m130 [m  if (vocab_size + 2 >= vocab_max_size) { /* vocab_size + 2„Ååvocab_max_size‰ª•‰∏ä„ÅÆÊôÇ **[2;1H[93m    [m/[29;1H[K[1;66H[?12l[?25h[?25l[29;1H?vocab[1;50H[?12l[?25h[?25l[29;1H[1;29H[?12l[?25h[?25l[29;1H[1;11H[?12l[?25h[?25l[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m128 [m  vocab_size++; /* vocab_size„Å´1„ÇíË∂≥„Åô */
[93m129 [m  // Reallocate memory if needed /* ÂøÖË¶ÅÊôÇ„Å´„É°„É¢„É™„ÅÆÂâ≤ÂΩì„ÇíÂ§âÊõ¥ */[29;1H[K[1;24H[?12l[?25h[?25l[29;1H?vocab[1;7H[?12l[?25h[?25l[29;1H[1;28r[1;1H[L[1;29r[1;1H[93m127 [m  vocab[vocab_size].cn = 0; /* vocab[vocab_size].cn„Å´0„Çí‰ª£ÂÖ• */[28;1H[94m@                                                                                        [m[29;1H[K[1;42H[?12l[?25h[?25l[29;1H?vocab[1;36H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25h700[?25l[27m[m[H[2J[1;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[3;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[8;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[10;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[13;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢[17;1H[93m    [m„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´[19;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}[25;7H[?12l[?25h[23;7H[21;7H[20;7H[18;7H[16;7H[?25l[29;1H/[?12l[?25hvocab_hash[?25l[16;34H[?12l[?25h[?25l[29;1H[16;68H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[15;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[24;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[28;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[38;5;224msearch hit BOTTOM, continuing at TOP[14;15H[?12l[?25h[?25l[m[29;1H/vocab_hash[29;12H[K[29;1H[1;28r[1;1H[7M[1;29r[22;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[23;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[25;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[27;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */[29;1H[K[28;10H[?12l[?25h[?25l
?vocab_hash[7;15H[?12l[?25h[?25l[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[3;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[8;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[10;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[13;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word));
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢ [17;1H[93m    [m„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´ [19;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}
[38;5;224msearch hit TOP, continuing at BOTTOM[16;68H[?12l[?25h[mvocab_hash[2C[2C[2C[2C[2C[17;5H[2C[?25l[29;1H[1m-- INSERT --[m[29;13H[K[17;9H[?12l[?25h[2C[?25l(Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;8H[?12l[?25h[?25l[46m()[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;9H[?12l[?25h[?25l[?12l[?25h[?25l[46m([mv[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;9H[?12l[?25h[?25lvo[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;10H[?12l[?25h[?25loc[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;11H[?12l[?25h[?25lca[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;12H[?12l[?25h[?25lab[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;13H[?12l[?25h[?25lb_[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;14H[?12l[?25h[?25l_h[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;15H[?12l[?25h[?25lha[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;16H[?12l[?25h[?25las[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;17H[?12l[?25h[?25lsh[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;18H[?12l[?25h[?25lh_[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;19H[?12l[?25h[?25l_s[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;20H[?12l[?25h[?25lsi[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;21H[?12l[?25h[?25liz[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;22H[?12l[?25h[?25lze[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;23H[?12l[?25h[?25le=[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;24H[?12l[?25h[?25l=3[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;25H[?12l[?25h[?25l30[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;26H[?12l[?25h[?25l0M[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;27H[?12l[?25h[?25lMN[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;28H[?12l[?25h[?25lM[46m)[mÂâ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;49H[K[17;27H[?12l[?25h[?25l[17;7H([19C)[?12l[?25h[?25le =30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;24H[?12l[?25h=[?25l= 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[17;26H[?12l[?25h30[?25l[17;7H[46m([21C)[?12l[?25h[?25l[m[17;7H([21C)[15;86H[?12l[?25h[14;89H[15;86H[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l[16;5H[?12l[?25h[?25l[16;28r[16;1H[L[1;29r[16;1H[93m    [m [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[15;89H[16;5H[?25l[93m [mv */[?12l[?25h[?25lvo */[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb„Å´ */[?12l[?25h[?25lÂãïÁöÑ„Å´ */[?12l[?25h[?25l„É°„É¢„É™ */[?12l[?25h[?25lÂâ≤ÂΩì */[?12l[?25h[?25l/ */[?12l[?25h[?25l */[16;31H[K[16;28H[?12l[?25h[29;1H[K[16;26H[?25l[?12l[?25h[?25l[29;1H/[?12l[?25hfree(v[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[2;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */
[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[4;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;
[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[10;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå[12;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[17;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[25;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {
[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[38;5;224msearch hit BOTTOM, continuing at TOP[14;11H[?12l[?25h[?25l[m[29;1H/free(v[29;8H[K[29;1H[1;28r[1;1H[13M[1;29r[16;1H[93m171 [m    vocab[a].point = (int *)calloc(MAX_CODE_LENGTH, sizeof(int));
[93m172 [m  }
[93m173 [m}
[93m174 
175 [m// Reduces the vocabulary by removing infrequent tokens
[93m176 [mvoid ReduceVocab() {
[93m177 [m  int a, b = 0;
[93m178 [m  unsigned int hash;
[93m179 [m  for (a = 0; a < vocab_size; a++) if (vocab[a].cn > min_reduce) {
[93m180 [m    vocab[b].cn = vocab[a].cn;
[93m181 [m    vocab[b].word = vocab[a].word;
[93m182 [m    b++;
[93m183 [m  } else free(vocab[a].word);[29;1H[K[28;14H[?12l[?25h[?25l
/free(v[38;5;224msearch hit BOTTOM, continuing at TOP[1;11H[?12l[?25h[?25l[m[29;1H/free(v[29;8H[K[29;1H[28;14H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[1;11H[?12l[?25h[?25l[m[29;1H/free(v[29;8H[K[29;1H[28;14H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[1;11H[?12l[?25h[?25l[m[29;1H/free(v[29;8H[K[29;1H[28;14H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[1;11H[?12l[?25h[?25l[m[29;1H/free(v[29;8H[K[29;1H[28;14H[?12l[?25h[?25l
[38;5;224msearch hit BOTTOM, continuing at TOP[1;11H[?12l[?25h[?25l[m[29;1H[K[29;1H/[?12l[?25hvocab[?25l[29;6H[K[29;6H[?12l[?25h[?25l[29;5H[K[29;5H[?12l[?25h[?25l[29;4H[K[29;4H[?12l[?25h[?25l[29;3H[K[29;3H[?12l[?25h[?25l[29;2H[K[29;2H[?12l[?25h [1;11H[?25l[29;1H/[?12l[?25hword[?25l[1;25H[?12l[?25h[?25l[29;1H?[1;28r[1;1H[7L[1;29r[1;1H[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[4;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå [6;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */[29;1H[K[1;13H[?12l[?25h[?25l[29;1H?word[1;28r[1;1H[4L[1;29r[1;1H[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[2;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;[29;1H[K[1;60H[?12l[?25h[?25l[29;1H?word[1;28r[1;1H[7L[1;29r[1;1H[93m145 [m// Sorts the vocabulary by frequency using word counts /* Ë™ûÂΩô„ÇíÂçòË™ûÊï∞„ÇíÁî®„ÅÑ„Å¶È†ªÂ∫¶È†Ü[94m>>[m[2;1H[93m    [m„Å´‰∏¶Êõø„Åà */
[93m146 [mvoid SortVocab() { /* voidÈñ¢Êï∞SortVocab() */
[93m147 [m  int a, size;
[93m148 [m  unsigned int hash;
[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[7;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */[29;1H[K[1;48H[?12l[?25h[?25l[29;1H?word[1;28r[1;1H[3L[1;29r[1;1H[93m142 [m    return ((struct vocab_word *)b)->cn - ((struct vocab_word *)a)->cn;
[93m143 [m}
[93m144 [m[29;1H[K[1;62H[?12l[?25h[?25l[29;1H?word[1;31H[?12l[?25h[?25l[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m140 [m// Used later for sorting by word counts /* ÂçòË™ûÊï∞„Åß‰∏¶Êõø„Åà„Çí„Åô„ÇãÈöõ„Å´‰ΩøÁî® */
[93m141 [mint VocabCompare(const void *a, const void *b) {[29;1H[K[1;34H[?12l[?25h[?25l[29;1H?word[1;28r[1;1H[6L[1;29r[1;1H[93m134 [m  hash = GetWordHash(word); /* hash„Å´word„ÅÆhash„Çí‰ª£ÂÖ• */
[93m135 [m  while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m136 [m  vocab_hash[hash] = vocab_size - 1;
[93m137 [m  return vocab_size - 1;
[93m138 [m}
[93m139 [m[29;1H[K[1;42H[?12l[?25h[?25l[29;1H?word[1;26H[?12l[?25h[?25l[29;1H[1;28r[1;1H[3L[1;29r[1;1H[93m132 [m    vocab = (struct vocab_word *)realloc(vocab, vocab_max_size * sizeof(struct vocab__[2;1H[93m    [mword)); /*  */
[93m133 [m  }[28;1H[94m@                                                                                        [m[29;1H[K[2;5H[?12l[?25h[?25l[29;1H?word[1;31H[?12l[?25h[?25l[29;1H[1;28r[1;1H[7L[1;29r[1;1H[93m126 [m  strcpy(vocab[vocab_size].word, word); /* vocab[vocab_size].word„Å´word„Çí„Ç≥„Éî„Éº */
[93m127 [m  vocab[vocab_size].cn = 0; /* vocab[vocab_size].cn„Å´0„Çí‰ª£ÂÖ• */
[93m128 [m  vocab_size++; /* vocab_size„Å´1„ÇíË∂≥„Åô */
[93m129 [m  // Reallocate memory if needed /* ÂøÖË¶ÅÊôÇ„Å´„É°„É¢„É™„ÅÆÂâ≤ÂΩì„ÇíÂ§âÊõ¥ */
[93m130 [m  if (vocab_size + 2 >= vocab_max_size) { /* vocab_size + 2„Ååvocab_max_size‰ª•‰∏ä„ÅÆÊôÇ **[6;1H[93m    [m/
[93m131 [m    vocab_max_size += 1000; /* vocab_max_size„Å´1000„ÇíË∂≥„Åô */[29;1H[K[1;72H[?12l[?25h[?25l[29;1H?word[1;66H[?12l[?25h[?25l[29;1H[1;38H[?12l[?25h[?25l[29;1H[1;32H[?12l[?25h[?25l[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m125 [m  vocab[vocab_size].word = (char *)calloc(length, sizeof(char)); /* lengthÂÄã„ÅÆchar„Çµ[94m>>[m[2;1H[93m    [m„Ç§„Ç∫„ÅÆ„É°„É¢„É™„ÇíÁ¢∫‰øù„ÅóÔºåcharÂûã„Å´„Åó„Å¶vocab[vocab_size].word„Å´‰ª£ÂÖ• */[29;1H[K[2;57H[?12l[?25h[?25l[29;1H?word[1;25H[?12l[?25hword =[?25l [46m([mchar *[46m)[m[49C[94m>>[m[2;1H[93m [1;32H[?12l[?25h[?25l[m(char *)[49C[94m>>[m[2;1H[93m [1;33H[?12l[?25h[mchar [?25l[46m([mchar *[46m)[m[49C[94m>>[m[2;1H[93m [1;39H[?12l[?25h[?25l[m[1;32H(char *)[49C[94m>>[m[2;1H[93m [1;40H[?12l[?25h[mcallo[?25lc[46m([20C)[m[21C[94m>>[m[2;1H[93m [1;46H[?12l[?25h[?25l[m([20C)[21C[94m>>[m[2;1H[93m [1;47H[?12l[?25h[mlength, siz[?25l[29;1H[K[29;1H/[?12l[?25hfree(v[?25l[1;28r[1;1H[14M[1;29r[15;1H[93m149 [m  // Sort the vocabulary and keep </s> at the first position /* Ë™ûÂΩô„Çí‰∏¶Êõø„Åà„Å¶ÊñáÂ≠óÂàó<<[16;1H[93m    [m/s>„ÇíÂÖàÈ†≠„Å´‰øù„Å§ */
[93m150 [m  qsort(&vocab[1], vocab_size - 1, sizeof(struct vocab_word), VocabCompare);/* vocab[[[18;1H[93m    [m1]„ÅÆ„Ç¢„Éâ„É¨„ÇπÔºåvocab_size -1Ôºå */
[93m151 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m152 [m  size = vocab_size;
[93m153 [m  train_words = 0;
[93m154 [m  for (a = 0; a < size; a++) {
[93m155 [m    // Words occuring less than min_count times will be discarded from the vocab /* mm[24;1H[93m    [min_count‰ª•‰∏ã„ÅÆÈ†ªÂ∫¶„ÅÆÂçòË™û„Çívocab„Åã„ÇâÈô§Â§ñ„Åô„Çã */
[93m156 [m    if ((vocab[a].cn < min_count) && (a != 0)) { /* vocab[a].cn„Ååmin_countÊú™Ê∫Ä„Åã„Å§a„Åå [26;1H[93m    [m0„Åß„Å™„ÅÑÊôÇ */
[93m157 [m      vocab_size--; /* vocab_size„Åã„Çâ1Âºï„Åè */
[93m158 [m      free(vocab[a].word); /* vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[29;1H[K[28;11H[?12l[?25hfre[?25le[46m([13C)[28;15H[?12l[?25h[?25l[m([13C)[28;16H[?12l[?25hvoca[?25lb[46m[[ma[46m][?12l[?25h[?25l[m[a][?12l[?25h[?25l[46m[[ma[46m][?12l[?25h[?25l[m[a][?12l[?25h.wor[?25l[28;15H[46m([13C)[?12l[?25h[?25l[m[28;15H([13C)[?12l[?25h; /* [?25l
[1m-- INSERT --[28;36H[?12l[?25h[?25l[m 1vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;36H[?12l[?25h[?25l12vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;37H[?12l[?25h[?25l25vocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;38H[?12l[?25h[?25l5Ë°åÁõÆvocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;42H[?12l[?25h[?25l„Åßvocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;44H[?12l[?25h[?25lÁ¢∫‰øù„Åó„Åüvocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[28;52H[?12l[?25h[29;1H[K[28;50H[?25l[?12l[?25h[?25l
/[?12l[?25hvocab[?25l[29;6H[K[29;6H[?12l[?25h[?25l[29;5H[K[29;5H[?12l[?25h[?25l[29;4H[K[29;4H[?12l[?25h[?25l[29;3H[K[29;3H[?12l[?25h[?25l[29;2H[K[29;2H[?12l[?25hfree@[?25l[29;6H[K[29;6H[?12l[?25h(v[?25l[27m[m[H[2J[1;1H[93m170 [m    vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
[93m171 [m    vocab[a].point = (int *)calloc(MAX_CODE_LENGTH, sizeof(int));
[93m172 [m  }
[93m173 [m}
[93m174 
175 [m// Reduces the vocabulary by removing infrequent tokens
[93m176 [mvoid ReduceVocab() {
[93m177 [m  int a, b = 0;
[93m178 [m  unsigned int hash;
[93m179 [m  for (a = 0; a < vocab_size; a++) if (vocab[a].cn > min_reduce) {
[93m180 [m    vocab[b].cn = vocab[a].cn;
[93m181 [m    vocab[b].word = vocab[a].word;
[93m182 [m    b++;
[93m183 [m  } else free(vocab[a].word);
[93m184 [m  vocab_size = b;
[93m185 [m  for (a = 0; a < vocab_hash_size; a++) vocab_hash[a] = -1;
[93m186 [m  for (a = 0; a < vocab_size; a++) {
[93m187 [m    // Hash will be re-computed, as it is not actual
[93m188 [m    hash = GetWordHash(vocab[a].word);
[93m189 [m    while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m190 [m    vocab_hash[hash] = a;
[93m191 [m  }
[93m192 [m  fflush(stdout);
[93m193 [m  min_reduce++;
[93m194 [m}
[93m195 
196 [m// Create binary Huffman tree using the word counts /* Ë™ûÊï∞„ÇíÁî®„ÅÑ„Å¶2ÂÄ§HuffmanÊú®„Çí‰ΩúÊàê[28;1H[93m    [m */[14;14H[?12l[?25hfre[?25le[46m([13C)[14;18H[?12l[?25h[?25l[m([13C)[14;19H[?12l[?25hvo[12C[?25l[29;1H[1m-- INSERT --[14;34H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l 1 */[?12l[?25h[?25l12 */[?12l[?25h[?25l25 */[?12l[?25h[?25l5Ë°åÁõÆ */[?12l[?25h[?25l„Åß */[?12l[?25h[?25lÁ¢∫‰øù */[?12l[?25h[?25l„Åó„Åü */[?12l[?25h[?25lv */[?12l[?25h[?25lvo */[?12l[?25h[?25loc */[?12l[?25h[?25lca */[?12l[?25h[?25lab */[?12l[?25h[?25lb[ */[?12l[?25h[?25l[1 */[?12l[?25h[?25l[46m[[m1[46m][m */[?12l[?25h[?25l[1 */[14;65H[K[14;62H[?12l[?25h[?25l[ */[14;64H[K[14;61H[?12l[?25h[?25l[a */[?12l[?25h[?25la[ */[?12l[?25h[?25la */[14;65H[K[14;62H[?12l[?25h[?25l[46m[[ma[46m][m */[?12l[?25h[?25l[a]. */[?12l[?25h[?25l.w */[?12l[?25h[?25lwo */[?12l[?25h[?25lor */[?12l[?25h[?25lrd */[?12l[?25h[?25ld„ÅÆ */[?12l[?25h[?25l„É°„É¢„É™ */[?12l[?25h[?25l„Çí */[?12l[?25h[?25lËß£Êîæ */[?12l[?25h[29;1H[K[14;80H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25h [14;80H[?25l[29;1H:.[?12l[?25h1[?25l[29;3H[K[29;3H[?12l[?25h[?25l[29;2H[K[29;2H[?12l[?25h [14;80H[?25l[29;1H/[?12l[?25h125[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[1;28r[m[1;1H[14L[1;29r[1;1H[93m158 [m      free(vocab[a].word); /* 125Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åüvocab[a].word„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m159 [m    } else {
[93m160 [m      // Hash will be re-computed, as after the sorting it is not actual /* „Éè„ÉÉ„Ç∑„É•[94m>>[m[4;1H[93m    [m„Çí */
[93m161 [m      hash=GetWordHash(vocab[a].word);
[93m162 [m      while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m163 [m      vocab_hash[hash] = a;
[93m164 [m      train_words += vocab[a].cn;
[93m165 [m    }
[93m166 [m  }
[93m167 [m  vocab = (struct vocab_word *)realloc(vocab, (vocab_size + 1) * sizeof(struct vocab__[12;1H[93m    [mword));
[93m168 [m  // Allocate memory for the binary tree construction
[93m169 [m  for (a = 0; a < vocab_size; a++) {[29;1H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[1;35H[?12l[?25h[2;9H[3;11H[5;11H[?25l[m[29;1H/125[29;5H[K[29;1H[28;38H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25h125[?25l[27m[m[H[2J[1;1H[93m116 [m  ReadWord(word, fin); /* ÂÖàÁ®ãÂÆöÁæ©„Åó„ÅüReadWord„ÇícharÂûã„Éù„Ç§„É≥„Çøword„Å®„Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çøff[2;1H[93m    [min„ÇíÂºïÊï∞„Å´Ë®àÁÆó */
[93m117 [m  if (feof(fin)) return -1; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇ-1„ÇíËøî„Åô */
[93m118 [m  return SearchVocab(word); /* ÂçòË™ûword„ÅÆË™ûÂΩô‰∏≠„Åß„ÅÆ‰ΩçÁΩÆ„ÇíËøî„Åô */
[93m119 [m}
[93m120 
121 [m// Adds a word to the vocabulary /* ÂçòË™û„ÇíË™ûÂΩô„Å´Âä†„Åà„Çã */
[93m122 [mint AddWordToVocab(char *word) { /* charÂûã„Éù„Ç§„É≥„Çøword„ÇíÂºïÊï∞„Å´ÊåÅ„Å§intÂûãÈñ¢Êï∞AddWordToVV[9;1H[93m    [mocab() */
[93m123 [m  unsigned int hash, length = strlen(word) + 1; /* Á¨¶Âè∑ÁÑ°intÂûãbash, length(word„ÅÆÊñáÂ≠ó[11;1H[93m    [mÈï∑+1„Çí‰ª£ÂÖ•) */
[93m124 [m  if (length > MAX_STRING) length = MAX_STRING; /* length„ÅåÊúÄÂ§ßÊñáÂ≠óÊï∞„Çà„ÇäÂ§ß„Åç„ÅÑÂ†¥Âêà„ÅØ[13;1H[93m    [mlengh„Å´ÊúÄÂ§ßÊñáÂ≠óÊï∞„Çí‰ª£ÂÖ• */
[93m125 [m  vocab[vocab_size].word = (char *)calloc(length, sizeof(char)); /* lengthÂÄã„ÅÆchar„Çµ[94m>>[m[15;1H[93m    [m„Ç§„Ç∫„ÅÆ„É°„É¢„É™„ÇíÁ¢∫‰øù„ÅóÔºåcharÂûã„Å´„Åó„Å¶vocab[vocab_size].word„Å´‰ª£ÂÖ• */
[93m126 [m  strcpy(vocab[vocab_size].word, word); /* vocab[vocab_size].word„Å´word„Çí„Ç≥„Éî„Éº */
[93m127 [m  vocab[vocab_size].cn = 0; /* vocab[vocab_size].cn„Å´0„Çí‰ª£ÂÖ• */
[93m128 [m  vocab_size++; /* vocab_size„Å´1„ÇíË∂≥„Åô */
[93m129 [m  // Reallocate memory if needed /* ÂøÖË¶ÅÊôÇ„Å´„É°„É¢„É™„ÅÆÂâ≤ÂΩì„ÇíÂ§âÊõ¥ */
[93m130 [m  if (vocab_size + 2 >= vocab_max_size) { /* vocab_size + 2„Ååvocab_max_size‰ª•‰∏ä„ÅÆÊôÇ **[21;1H[93m    [m/
[93m131 [m    vocab_max_size += 1000; /* vocab_max_size„Å´1000„ÇíË∂≥„Åô */
[93m132 [m    vocab = (struct vocab_word *)realloc(vocab, vocab_max_size * sizeof(struct vocab__[24;1H[93m    [mword)); /*  */
[93m133 [m  }
[93m134 [m  hash = GetWordHash(word); /* hash„Å´word„ÅÆhash„Çí‰ª£ÂÖ• */
[93m135 [m  while (vocab_hash[hash] != -1) hash = (hash + 1) % vocab_hash_size;
[93m136 [m  vocab_hash[hash] = vocab_size - 1;[14;7H[?12l[?25h[15;69H[?25l[29;1H[1m-- INSERT --[15;68H[?12l[?25h[?25l[m( */[?12l[?25h[?25l[46m()[m */[?12l[?25h[?25l[?12l[?25h[?25l[46m([m1[46m)[m */[?12l[?25h[?25l15[46m)[m */[?12l[?25h[?25l58[46m)[m */[?12l[?25h[?25l8,[46m)[m */[?12l[?25h[?25l, [46m)[m */[?12l[?25h[?25l 1[46m)[m */[?12l[?25h[?25l18[46m)[m */[?12l[?25h[?25l83[46m)[m */[?12l[?25h[?25l3Ë°åÁõÆ[46m)[m */[?12l[?25h[?25l„Åß[46m)[m */[?12l[?25h[?25lËß£Êîæ[46m)[m */[15;86H[?12l[?25h[29;1H[K[15;84H[?25l[15;67H([18C)[?12l[?25h[?25l[29;1H:[?12l[?25h600[?25l[27m[m[H[2J[1;1H[93m588 [m[9C closev += cent[layer1_size * b + c] * cent[layer1_size * b + c];
[93m589 [m[7C }
[93m590 [m[7C closev = sqrt(closev);
[93m591 [m[7C for (c = 0; c < layer1_size; c++) cent[layer1_size * b + c] /= closev;
[93m592 [m      }
[93m593 [m      for (c = 0; c < vocab_size; c++) {
[93m594 [m[7C closev = -10;
[93m595 [m[7C closeid = 0;
[93m596 [m[7C for (d = 0; d < clcn; d++) {
[93m597 [m[9C x = 0;
[93m598 [m[9C for (b = 0; b < layer1_size; b++) x += cent[layer1_size * d + b] * syn0[c **[12;1H[93m    [m layer1_size + b];
[93m599 [m[9C if (x > closev) {
[93m600 [m[11C closev = x;
[93m601 [m[11C closeid = d;
[93m602 [m[9C }
[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */[14;17H[?12l[?25h[15;17H[?25l[13;31H[46m{[16;15H}[?12l[?25h[?25l[9;40H{[m[13;31H{[16;15H}[17;13H[46m}[?12l[?25h[?25l[m[9;40H{[17;13H}[18;15H[46m[[mc[46m][?12l[?25h[?25l[6;44H{[m[18;15H[c][19;11H[46m}[?12l[?25h[?25l[m[6;44H{[19;11H}[20;9H[?12l[?25h[21;17H[22;17H[23;17H[24;17H[25;17H[26;17H[27;17H[28;17H[?25l[1;28r[28;1H
[1;29r[28;1H[93m615 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m617 [m  int a;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m619 [m    if (a == argc - 1) {[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m620 [m      printf[46m([m"Argument missing for %s\n", str[46m)[m;[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[27;17H([32C)
[93m621 [m      exit[46m([m1[46m)[m;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[25;28H[46m{[m[27;15H(1)
[93m622 [m    [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[24;28H{[27;9H}
[93m623 [m    return a;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[22;61H[46m{[m[28;1H[93m624 [m  [46m}[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[20;61H{[26;7H}
[93m625 [m  return -1;
[93m626 [m}[27;16H[?12l[?25h[?25l[18;50H[46m{[28;5H}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[17;50H{[27;5H}
[93m627 [?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[28;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m630 [m  if (argc == 1) {[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m632 [m    printf("Options:\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m633 [m    printf("Parameters for training:\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m634 [m    printf("\t-train <file>\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m636 [m    printf("\t-output <file>\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m638 [m    printf("\t-size <int>\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m640 [m    printf("\t-window <int>\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[28;17H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[27;17H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;17H[?12l[?25h[26;17H[24;17H[23;17H[22;17H[23;17H[24;17H[26;17H[28;17H[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;17H[?12l[?25h[27;17H[25;17H[23;17H[22;17H[21;17H[20;17H[19;17H[18;17H[17;17H[16;17H[15;17H[14;17H[13;17H[12;17H[11;17H[10;17H[9;12H[8;17H[7;5H[6;5H[5;16H[4;7H[3;17H[2;9H[?25l[1;15H[46m([m1[46m)[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m620 [m      printf[46m([m"Argument missing for %s\n", str[46m)[m;[2;15H(1)[1;17H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m619 [m    if (a == argc - 1) {[2;17H([32C)[1;17H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {[28;1H[94m@                                                                                        [1;17H[?12l[?25h[2;17H[?25l[m[3;17H[46m([32C)[3;17H[?12l[?25h[?25l[m([32C)[4;15H[46m([m1[46m)[?12l[?25h[?25l[2;28H{[m[4;15H(1)[5;9H[46m}[?12l[?25h[?25l[m[2;28H{[5;9H}[6;17H[?12l[?25h[?25l[1;61H[46m{[7;7H}[?12l[?25h[?25l[m[1;61H{[7;7H}[8;16H[?12l[?25h[9;5H[10;5H[11;17H[12;12H[13;17H[12;12H[11;17H[10;5H[11;17H[12;12H[13;17H[14;17H[15;17H[16;17H[17;17H[18;17H[19;17H[20;17H[21;17H[22;17H[23;17H[24;17H[25;17H[26;17H[?25l[1;28r[28;1H
[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;17H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;17H[?12l[?25h[26;17H[25;17H[24;17H[22;17H[20;17H[19;17H[18;17H[17;17H[16;17H[15;17H[14;17H[13;17H[12;17H[11;17H[10;17H[?25l[29;1H/[?12l[?25haf[?25l[29;3H[K[29;3H[?12l[?25hrgc[?25l[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;40H[?12l[?25h[?25l[29;1H/argc[15;41H[?12l[?25h[?25l[29;1H[17;46H[?12l[?25h[?25l[29;1H[19;46H[?12l[?25h[?25l[29;1H[21;41H[?12l[?25h[?25l[29;1H[22;42H[?12l[?25h[?25l[29;1H[23;40H[?12l[?25h[?25l[29;1H[25;41H[?12l[?25h[?25l[29;1H[26;42H[?12l[?25h[?25l


[28;42H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;42H[?12l[?25h[?25l

/argc[28;38H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;44H[?12l[?25h[?25l


/argc[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;43H[?12l[?25h[?25l

/argc[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;40H[?12l[?25h[?25l

/argc[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;45H[?12l[?25h[?25l

/argc[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;43H[?12l[?25h[?25l
/argc[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;31H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[16;23H[?12l[?25h[?25l[29;1H[17;18H[?12l[?25h[?25l[29;1H[26;18H[?12l[?25h[?25l


[28;11H[?12l[?25h[?25l
[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;40H[?12l[?25h[?25l[29;1H/argc[15;41H[?12l[?25h[?25l[29;1H[17;46H[?12l[?25h[?25l[29;1H[19;46H[?12l[?25h[?25l[29;1H[21;41H[?12l[?25h[?25l[29;1H[22;42H[?12l[?25h[?25l[29;1H[23;40H[?12l[?25h[?25l[29;1H[25;41H[?12l[?25h[?25l[29;1H[26;42H[?12l[?25h[?25l


[28;42H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;42H[?12l[?25h[?25l

/argc[28;38H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;44H[?12l[?25h[?25l


/argc[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;43H[?12l[?25h[?25l

/argc[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;40H[?12l[?25h[?25l

/argc[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;45H[?12l[?25h[?25l

/argc[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;43H[?12l[?25h[?25l
/argc[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;31H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[16;23H[?12l[?25h[?25l[29;1H[17;18H[?12l[?25h[?25l[29;1H?[16;23H[?12l[?25h[?25l[29;1H[14;31H[?12l[?25h[?25l[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[3;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[8;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[10;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[13;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [16;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢ [18;1H[93m    [m„É™(vocab_hash_size = 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´[20;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[23;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([25;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;43H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;31H[?12l[?25h[?25l[m[29;1H?argc[29;6H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[3;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[8;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[10;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[13;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [16;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢ [18;1H[93m    [m„É™(vocab_hash_size = 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´[20;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[23;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([25;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;43H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;31H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[16;23H[?12l[?25h[?25l[29;1H[17;18H[?12l[?25h[?25l[29;1H[26;18H[?12l[?25h[?25l


[28;11H[?12l[?25h[?25l
[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;40H[?12l[?25h[?25l[29;1H/argc[15;41H[?12l[?25h[?25l[29;1H[17;46H[?12l[?25h[?25l[29;1H[19;46H[?12l[?25h[?25l[29;1H[21;41H[?12l[?25h[?25l[29;1H[22;42H[?12l[?25h[?25l[29;1H[23;40H[?12l[?25h[?25l[29;1H[25;41H[?12l[?25h[?25l[29;1H?[23;40H[?12l[?25h[?25l[29;1H[22;42H[?12l[?25h[?25l[29;1H[21;41H[?12l[?25h[?25l[29;1H[19;46H[?12l[?25h[?25l[29;1H[17;46H[?12l[?25h[?25l[29;1H[15;41H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hw[?25l"word2vec.c" 703L, 41202C written[15;41H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hq[?25l[29;1H[K[29;1H[?1l>[?12l[?25h[?1049lbash-3.2$ exit
exit

Script done on Mon Oct 26 14:31:41 2015
Script started on Mon Oct 26 14:31:54 2015
bash: /path/to/your/virtualenvwrapper.sh: No such file or directory
[?1034hbash-3.2$ vi word2vec.c 
[?1049h[?1h=[1;29r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[29;1H"word2vec.c" 703L, 41202C[>c[1;1H//  Copyright 2013 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>

#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
#define EXP_TABLE_SIZE 1000
#define MAX_EXP 6
#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */

const int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabulary[1;1H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hset number[?25l[1;1H[93m  1 [m//  Copyright 2013 Google Inc. All Rights Reserved.
[93m  2 [m//
[93m  3 [m//  Licensed under the Apache License, Version 2.0 (the "License");
[93m  4 [m//  you may not use this file except in compliance with the License.
[93m  5 [m//  You may obtain a copy of the License at
[93m  6 [m//
[93m  7 [m//      http://www.apache.org/licenses/LICENSE-2.0
[93m  8 [m//
[93m  9 [m//  Unless required by applicable law or agreed to in writing, software
[93m 10 [m//  distributed under the License is distributed on an "AS IS" BASIS,
[93m 11 [m//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
[93m 12 [m//  See the License for the specific language governing permissions and
[93m 13 [m//  limitations under the License.
[93m 14 
 15 [m#include <stdio.h>
[93m 16 [m#include <stdlib.h>
[93m 17 [m#include <string.h>
[93m 18 [m#include <math.h>
[93m 19 [m#include <pthread.h>
[93m 20 
 21 [m#define MAX_STRING 100 /* ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÅØ100Â≠ó„Åæ„Åß */
[93m 22 [m#define EXP_TABLE_SIZE 1000
[93m 23 [m#define MAX_EXP 6
[93m 24 [m#define MAX_SENTENCE_LENGTH 1000 /* 365Ë°åÁõÆ„Å®403Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 25 [m#define MAX_CODE_LENGTH 40 /* ÊúÄÂ§ß„Ç≥„Éº„ÉâÈï∑„ÅØ40Â≠ó„Åæ„Åß */
[93m 26 
 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[28;1H[93m    [mary[1;5H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25h6[?25l[29;2H[K[29;2H[?12l[?25h/[?25l[29;2H[K[29;2H[?12l[?25h [1;5H[?25l[29;1H/[?12l[?25hargc[?25l[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {[14;31H[?12l[?25h[?25l[29;1H/[?12l[?25hARG[?25l[29;4H[K[29;4H[?12l[?25h[?25l[29;3H[K[29;3H[?12l[?25hrgPos[?25l[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H?ArgPos[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {[14;9H[?12l[?25h[?25l[29;1H/ArgPos[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H/ArgPos[15;16H[?12l[?25h[?25l[29;1H[17;16H[?12l[?25h[?25l[29;1H[19;16H[?12l[?25h[?25l[29;1H[21;16H[?12l[?25h[?25l[29;1H[22;16H[?12l[?25h[?25l[29;1H[23;16H[?12l[?25h[?25l[29;1H[25;16H[?12l[?25h[?25l[29;1H[26;16H[?12l[?25h[?25l


[28;16H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[28;16H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;16H[?12l[?25h[?25l


/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;16H[?12l[?25h[?25l
/ArgPos[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[?25l[m[29;1H/ArgPos[29;8H[K[29;1H[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H?ArgPos[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {[14;9H[?12l[?25h[?25l[29;1H/ArgPos[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H/ArgPos[15;16H[?12l[?25h[?25l[29;1H[17;16H[?12l[?25h[?25l[29;1H[19;16H[?12l[?25h[?25l[29;1H[21;16H[?12l[?25h[?25l[29;1H[22;16H[?12l[?25h[?25l[29;1H[23;16H[?12l[?25h[?25l[29;1H[25;16H[?12l[?25h[?25l[29;1H[26;16H[?12l[?25h[?25l


[28;16H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[28;16H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;16H[?12l[?25h[?25l


/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;16H[?12l[?25h[?25l
/ArgPos[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[?25l[m[29;1H/ArgPos[29;8H[K[29;1H[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H/ArgPos[15;16H[?12l[?25h[?25l[29;1H[17;16H[?12l[?25h[?25l[29;1H[19;16H[?12l[?25h[?25l[29;1H[21;16H[?12l[?25h[?25l[29;1H[22;16H[?12l[?25h[?25l[29;1H[23;16H[?12l[?25h[?25l[29;1H[25;16H[?12l[?25h[?25l[29;1H[26;16H[?12l[?25h[?25l


[28;16H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[28;16H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;16H[?12l[?25h[?25l


/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;16H[?12l[?25h[?25l
/ArgPos[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[?25l[m[29;1H/ArgPos[29;8H[K[29;1H[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H/ArgPos[15;16H[?12l[?25h[?25l[29;1H[17;16H[?12l[?25h[?25l[29;1H[19;16H[?12l[?25h[?25l[29;1H[21;16H[?12l[?25h[?25l[29;1H[22;16H[?12l[?25h[?25l[29;1H[23;16H[?12l[?25h[?25l[29;1H[25;16H[?12l[?25h[?25l[29;1H[26;16H[?12l[?25h[?25l


[28;16H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[28;16H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;16H[?12l[?25h[?25l


/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;16H[?12l[?25h[?25l

/ArgPos[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;16H[?12l[?25h[?25l
/ArgPos[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[?25l[m[29;1H/ArgPos[29;8H[K[29;1H[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;16H[?12l[?25h[?25l[29;1H/ArgPos[15;16H[?12l[?25h[?25l[29;1H[17;16H[?12l[?25h[?25l[29;1H[19;16H[?12l[?25h[?25l[29;1H[21;16H[?12l[?25h[?25l[29;1H[22;16H[?12l[?25h[?25l[29;1H[23;16H[?12l[?25h[?25l[29;1H[25;16H[?12l[?25h[?25l[29;1H[26;16H[?12l[?25h[?25l


[28;16H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;16H[?12l[?25h[?25l[1;28r[1;1H[23M[1;29r[6;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[7;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[9;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[12;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [15;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢[17;1H[93m    [m„É™(vocab_hash_size = 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´[19;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[22;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([24;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[93m703 [m}[?12l[?25h[?25l
/[?12l[?25hmain[?25l[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");
[93m632 [m    printf("Options:\n");
[93m633 [m    printf("Parameters for training:\n");
[93m634 [m    printf("\t-train <file>\n");
[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");
[93m636 [m    printf("\t-output <file>\n");
[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");
[93m638 [m    printf("\t-size <int>\n");
[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");
[93m640 [m    printf("\t-window <int>\n");
[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");
[93m642 [m    printf("\t-sample <float>\n");
[38;5;224msearch hit BOTTOM, continuing at TOP[14;9H[?12l[?25h[?25l[m[29;1H?main[29;6H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[14;42H[?12l[?25h[?25l[m[29;1H?main[29;6H[K[29;1H[14;9H[?12l[?25h[?25l[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[14;42H[?12l[?25h[?25l[m[29;1H?main[29;6H[K[29;1H[14;9H[?12l[?25h[?25l[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[14;42H[?12l[?25h[?25l[m[29;1H?main[29;6H[K[29;1H[14;9H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25h/[?25l[29;2H[K[29;2H[?12l[?25h [14;9H[?25l[29;1H/[?12l[?25hargg[?25l[29;5H[K[29;5H[?12l[?25hc[?25l[14;18H[?12l[?25h[?25l[29;1H[16;11H[?12l[?25h[?25l[29;1H[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;40H[?12l[?25h[?25l[29;1H/argc[15;41H[?12l[?25h[?25l[29;1H[17;46H[?12l[?25h[?25l[29;1H[19;46H[?12l[?25h[?25l[29;1H[21;41H[?12l[?25h[?25l[29;1H[22;42H[?12l[?25h[?25l[29;1H[23;40H[?12l[?25h[?25l[29;1H[25;41H[?12l[?25h[?25l[29;1H[26;42H[?12l[?25h[?25l


[28;42H[?12l[?25h[?25l
[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[29;1H[K[27;42H[?12l[?25h[?25l

/argc[28;38H[?12l[?25h[?25l
[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[26;44H[?12l[?25h[?25l


/argc[1;28r[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;43H[?12l[?25h[?25l

/argc[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [m[29;1H[K[27;40H[?12l[?25h[?25l

/argc[1;28r[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[29;1H[K[27;45H[?12l[?25h[?25l

/argc[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[29;1H[K[28;43H[?12l[?25h[?25l
/argc[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;31H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[16;23H[?12l[?25h[?25l[29;1H[17;18H[?12l[?25h[?25l[29;1H[26;18H[?12l[?25h[?25l


[28;11H[?12l[?25h[?25l
[27m[m[H[2J[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[5;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[8;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[15;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[16;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[18;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[20;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[22;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[27;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[14;40H[?12l[?25h[?25l[29;1H?argc[27m[m[H[2J[1;1H[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");
[93m632 [m    printf("Options:\n");
[93m633 [m    printf("Parameters for training:\n");
[93m634 [m    printf("\t-train <file>\n");
[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");
[93m636 [m    printf("\t-output <file>\n");
[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");
[93m638 [m    printf("\t-size <int>\n");
[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");
[93m640 [m    printf("\t-window <int>\n");
[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");
[93m642 [m    printf("\t-sample <float>\n");
[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[14;11H[?12l[?25h[?25l[29;1H?argc[12;18H[?12l[?25h[?25l[29;1H[3;18H[?12l[?25h[?25l[29;1H[2;23H[?12l[?25h[?25l[29;1H[1;28r[1;1H[L[1;29r[1;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[28;1H[94m@                                                                                        [m[29;1H[K[1;31H[?12l[?25h[?25l[29;1H?argc[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[3;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[8;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[10;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[13;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [16;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */
[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢[18;1H[93m    [m„É™(vocab_hash_size = 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´ [20;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[23;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f(([25;1H[93m    [mx) = x / (x + 1)
[93m700 [m  }
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */
[93m702 [m  return 0;
[38;5;224msearch hit TOP, continuing at BOTTOM[14;43H[?12l[?25h[?25l[m[29;1H/argc[29;6H[K[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m603 [m[7C }
[93m604 [m[7C cl[c] = closeid;
[93m605 [m      }
[93m606 [m    }
[93m607 [m    // Save the K-means classes
[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);
[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */
[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */
[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */
[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */
[93m615 
616 [mint ArgPos(char *str, int argc, char **argv) {
[93m617 [m  int a;
[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) {
[38;5;224msearch hit BOTTOM, continuing at TOP[14;31H[?12l[?25h[margc, char **arg[?25l[14;15H[46m([32C)[?12l[?25h[?25l[m[14;15H([32C)[?12l[?25h[?25l [46m{[24;5H}[14;50H[?12l[?25h[?25l[m[29;1H[1m-- INSERT --[m[29;13H[K[14;51H[?12l[?25h[?25l{/[24;5H}[14;52H[?12l[?25h[?25l[46m{[m[14;51H[K[24;5H[46m}[14;51H[?12l[?25h[?25l[m{[24;5H}[14;52H[?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h */[?25l[14;57H[K[14;57H[?12l[?25h[?25l[14;56H[K[14;56H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[14;53H[K[14;53H[?12l[?25h[?25l[14;52H[K[14;52H[?12l[?25h[?25l[46m{[24;5H}[14;51H[?12l[?25h[?25l[m{[24;5H}[15;13H[?12l[?25h[?25l[14;50H[46m{[24;5H}[14;51H[?12l[?25h[?25l[m{[24;5H}[15;13H[?12l[?25h[16;51H[?25l[17;28H[46m{[20;9H}[17;29H[?12l[?25h[?25l[m{[18;17H[46m([32C)[m[20;9H}[18;51H[?12l[?25h[?25l[18;17H([32C)[19;19H[?12l[?25h[?25l[17;28H[46m{[20;9H}[?12l[?25h[?25l[m[17;28H{[20;9H}[21;18H[?12l[?25h[?25l[16;61H[46m{[22;7H}[?12l[?25h[?25l[m[16;61H{[22;7H}[23;17H[?12l[?25h[?25l[14;50H[46m{[24;5H}[?12l[?25h[?25l[m[14;50H{[24;5H}[25;5H[?12l[?25h[26;50H[27;13H[26;50H[2C703[2C[2C[2C[2C[?25l( */[?12l[?25h[?25l[46m()[m */[?12l[?25h[?25l[?12l[?25h[?25l[46m([ma[46m)[m */[?12l[?25h[?25lar[46m)[m */[?12l[?25h[?25lrg[46m)[m */[?12l[?25h[?25lgc[46m)[m */[?12l[?25h[?25lc„ÅØ[46m)[m */[?12l[?25h[?25l„Å©„Åì„Åß[46m)[m */[?12l[?25h[?25l‰ª£ÂÖ•[46m)[m */[?12l[?25h[?25l„Åô„Çã[46m)[m */[?12l[?25h[?25lÔºü[46m)[m */[26;86H[?12l[?25h[?25l[26;63H([22C)[27;13H[?12l[?25h[?25l[28;23H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m632 [m    printf("Options:\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m633 [m    printf("Parameters for training:\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m634 [m    printf("\t-train <file>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m636 [m    printf("\t-output <file>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m637 [m    printf[46m([m"\t\tUse <file> to save the resulting word vectors / word clusters\n"[46m)[m;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[27;15H([69C)
[93m638 [m    printf("\t-size <int>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m640 [m    printf("\t-window <int>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[?12l[?25h[?25l[28;15H[46m([21C)[?12l[?25h[?25l[?12l[?25h[?25l[m[28;15H([21C)[27;37H[?12l[?25h[26;37H[25;37H[24;35H[23;37H[?25l[22;15H[46m([20C)[?12l[?25h[?25l[m[22;15H([20C)[21;37H[?12l[?25h[20;37H[19;37H[29;1H[K[19;34H[?25l[?12l[?25h[18;29H[17;34H[16;22H[15;12H[14;34H[?25l[14;13H[46m([21C)[?12l[?25h[?25l[m[14;13H([21C)[?12l[?25h { /* main[2C[2C[2C703[2C[2C[2C[?25l[2C[46m([22C)[14;63H[?12l[?25h[?25l[m([22C)[14;64H[?12l[?25hargc[2C[2C[2C[2C[2C[?25l[29;1H[1m-- INSERT --[14;65H[?12l[?25h[?25l[m[46m([22C)[14;64H[?12l[?25h[?25l[15;28r[m[15;1H[L[1;29r[14;63H(ÂºïÊï∞argc„ÅØ„Å©„Åì„Åß‰ª£ÂÖ•„Åô„ÇãÔºü [15;1H[93m    [m) */[14;68H[?12l[?25hargc[2C[2C[2C[2C[2C[2C[2C[2C[?25l[14;63H[46m([m[25C  [15;1H[93m [m[3C[46m)[?12l[?25h[?25l[14;88H)[m  [15;1H[93m    [m*/[15;7H[K[14;88H[?12l[?25h[?25l[14;28r[28;1H
[1;29r[14;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß[46m([mÂºïÊï∞argc„ÅØ„Å©„Åì„Åß‰ª£ÂÖ•„Åô[46m)[m */[28;1H[93m642 [m    printf("\t-sample <float>\n");[14;86H[?12l[?25h[?25l[46m)[m */[14;88H[K[14;84H[?12l[?25h[?25l[46m)[m */[14;86H[K[14;82H[?12l[?25h[?25l[46m)[m */[14;84H[K[14;80H[?12l[?25h[?25l[46m)[m */[14;82H[K[14;78H[?12l[?25h[?25l[46m)[m */[14;80H[K[14;76H[?12l[?25h[?25l[46m)[m */[14;78H[K[14;74H[?12l[?25h[?25lc[46m)[m */[14;76H[K[14;72H[?12l[?25h[?25lcÔºå[46m)[m */[?12l[?25h[?25lt[46m)[m */[?12l[?25h[?25lto[46m)[m */[?12l[?25h[?25lt[46m)[m */[14;79H[K[14;75H[?12l[?25h[?25l[46m)[m */[14;78H[K[14;74H[?12l[?25h[?25la[46m)[m */[?12l[?25h[?25lar[46m)[m */[?12l[?25h[?25lrg[46m)[m */[?12l[?25h[?25lgv[46m)[m */[?12l[?25h[?25l[14;63H([14C)[?12l[?25h[?25l*argv) */[14;75H[?12l[?25h[?25l**argv) */[14;76H[?12l[?25harg[?25l[14;63H[46m([16C)[?12l[?25h[?25l[mv„ÅØ[46m)[m */[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;82H„Ç≥„Éû„É≥„Éâ[15;1H[93m    [m„É©„Ç§„É≥[46m)[m */[?12l[?25h[?25l[14;63H([15;11H)[?12l[?25h[14;88H[?25largcÔºå**argv„ÅØ„Ç≥„Éû„É≥„Éâ„É©[15;5H„Ç§„É≥) */[15;13H[K[14;66H[?12l[?25h[?25l[46m([margcÔºå**argv„ÅØ„Ç≥„Éû„É≥„Éâ„É©„Ç§[15;5H„É≥[46m)[m */[15;11H[K[14;64H[?12l[?25h[?25largcÔºå**argv„ÅØ„Ç≥„Éû„É≥„Éâ„É©„Ç§[94m>>[m[15;1H[93m [m[5C)[14;63H[?12l[?25h[?25l[46m([margcÔºå**argv„ÅØ„Ç≥„Éû„É≥„Éâ„É©„Ç§[15;7H[46m)[14;64H[?12l[?25h[?25l[m([15;7H)[14;65H[?12l[?25hrg[13;5H[14;67Hcc[?25lc:Ôºå**argv„ÅØ„Ç≥„Éû„É≥„Éâ„É©[94m>>[m[15;1H[93m [m[3C„Ç§„É≥) */[14;69H[?12l[?25h[?25l:ÂºïÊï∞„ÅÆÔºå**argv„ÅØ„Ç≥„Éû[94m>>[m[15;1H[93m [m[3C„É≥„Éâ„É©„Ç§„É≥) */[14;75H[?12l[?25h[?25lÁ∑èÂÄãÊï∞Ôºå**argv[94m>>[m[15;1H[93m [m[3C„ÅØ„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥) */[14;81H[?12l[?25h[2C**arg[15;5H[2C[2C[2C[2C[2C[2C[2C[?25l[14;63H[46m([m[25C[94m>>[m[15;1H[93m [m[19C[46m)[?12l[?25h[?25l)[?12l[?25h[?25l[?12l[?25h[?25l)[m */[15;23H[K[15;19H[?12l[?25h[?25l[46m)[m */[15;21H[K[15;17H[?12l[?25h[?25l[46m)[m */[15;19H[K[15;15H[?12l[?25h[?25l[46m)[m */[15;17H[K[15;13H[?12l[?25h[?25l[46m)[m */[15;15H[K[15;11H[?12l[?25h[?25l[46m)[m */[15;13H[K[15;9H[?12l[?25h[?25l[46m)[m */[15;11H[K[15;7H[?12l[?25h[?25l[14;88Hv[46m))[m[15;1H[93m    [m */[15;9H[K[14;89H[?12l[?25h[?25l[46m))[m[15;1H[93m    [?12l[?25h[?25l[14;89H[?12l[?25h[?25l[mvaa[15;1H[93m    [m[46m)[m */[?12l[?25h[?25l[14;88Hv[46m))[m[15;1H[93m    [m */[15;8H[K[14;89H[?12l[?25h[?25l[46m))[m[15;1H[93m    [?12l[?25h[?25l[m[14;63H([25C))[15;1H[93m    [m: */[?12l[?25h[?25l[14;63H[46m([25C))[m[15;1H[93m    [m */[15;8H[K[15;5H[?12l[?25h[?25l[14;63H([24Cv  [15;1H[93m    [m*/[15;7H[K[14;89H[?12l[?25h[?25lg **[15;1H[93m    [m/[15;6H[K[14;88H[?12l[?25h [?25l[14;28r[28;1H
[1;29r[14;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:ÂºïÊï∞„ÅÆÁ∑èÂÄãÊï∞Ôºå**ar */[28;1H[93m642 [m    printf("\t-sample <float>\n");[14;87H[?12l[?25h[?25la */[14;89H[K[14;86H[?12l[?25h[?25lar */[14;87H[?12l[?25h[?25l[15;28r[15;1H[L[1;29r[14;86Hrg **[15;1H[93m    [m/[14;88H[?12l[?25h[?25lgv  [15;1H[93m    [m*/[14;89H[?12l[?25h[?25lv::[15;1H[93m    [m */[?12l[?25h[?25l  */[?12l[?25h[?25l ÂºïÊï∞„ÅÆ */[?12l[?25h[?25lÊñáÂ≠óÂàó */[?12l[?25h[?25l„Çí */[?12l[?25h[?25l„Åï„Åô */[?12l[?25h[?25l */[15;25H[K[15;22H[?12l[?25h[?25l */[15;23H[K[15;20H[?12l[?25h[?25lÊåá„Åô */[?12l[?25h[?25l„Éù„Ç§„É≥„Çø„ÅÆ */[?12l[?25h[?25lÈÖçÂàó */[?12l[?25h[16;13H[?25l[17;23H[?12l[?25h[18;61H[19;30H[20;46H[21;37H[20;46H[19;30H[18;61H[?25l[17;23H[?12l[?25h[16;13H[15;38H[13;5H[15;38H[14;89H[2C[2C[?25l„ÅÇÊï∞„ÅÆÁ∑èÂÄãÊï∞Ôºå**argg[15;1H[93m    [mv: ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[14;73H[?12l[?25h[?25lÊï∞„ÅÆÁ∑èÂÄãÊï∞Ôºå**argv::[15;1H[93m    [m ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[15;41H[K[14;71H[?12l[?25h[?25l:Êï∞„ÅÆÁ∑èÂÄãÊï∞Ôºå**argv: [94m>>[m[15;1H[93m    [mÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[15;40H[K[14;69H[?12l[?25h[?25l:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Êï∞„ÅÆÁ∑è[94m>>[m[15;1H[93m [m[3CÂÄã[2CÔºå**argv: ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[14;83H[?12l[?25h[?25lÂºï„ÅçÊï∞[94m>>[m[15;1H[93m    [m„ÅÆÁ∑èÂÄãÊï∞Ôºå**argv: ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[14;87H[?12l[?25h[?25lÊï∞„ÅÆ[94m>>[m[15;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[15;56H[K[14;85H[?12l[?25h[2C[15;5H[2C[2C[2C[2C**argv: [2C[2C[?25l „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[15;35H[?12l[?25h[16;13H[?25l[17;23H[?12l[?25h[18;61H[19;30H[20;46H[21;37H[22;70H[23;38H[24;87H[25;35H[26;66H[27;37H[28;73H[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[?12l[?25h[27;33H[26;14H[24;35H[22;39H[21;73H[20;37H[19;66H[18;35H[17;87H[16;38H[15;70H[14;37H[13;46H[12;30H[11;61H[?25l[10;23H[?12l[?25h[11;61H[12;30H[13;46H[14;37H[15;70H[16;38H[17;87H[18;35H[19;66H[20;37H[21;73H[22;39H[24;35H[26;14H[27;33H[28;75H[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");[27;66H[?12l[?25h[28;40H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m663 [m    printf("\t-save-vocab <file>\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the tra[28;1H[94m@                                                                                        [27;42H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[27;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");[27;20H[?12l[?25h[28;35H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[28;1H[93m    [mram model)\n");[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m669 [m    printf("\nExamples:\n");[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[28;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");[28;35H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m671 [m    return 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m672 [m  }[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m673 [m  output_file[0] = 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m674 [m  save_vocab_file[0] = 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m675 [m  read_vocab_file[0] = 0;[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[28;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1])[28;1H[94m@                                                                                        [28;5H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[28;1H[93m    [m;[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[28;1H[93m    [mgv[i + 1]);[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[27;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[27;16H[?12l[?25h[29;5H[?25l[1;28r[28;1H
[1;29r[28;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);[?12l[?25h[28;5H[26;16H[24;16H[22;6H[21;5H[19;30H[18;30H[17;26H[?25l[16;8H[?12l[?25h[15;18H[14;35H[12;33H[11;20H[9;35H[8;20H[6;42H[5;64H[4;42H[3;88H[2;37H[1;86H[?25l[1;28r[1;1H[L[1;29r[1;1H[93m659 [m    printf("\t-debug <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[2;1H[93m    [mes is 0 (vectors are written)\n");[28;1H[94m@                                                                                        [2;35H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m657 [m    printf("\t-classes <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[2;1H[93m    [m05 for CBOW\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m655 [m    printf("\t-alpha <float>\n");[28;1H[94m@                                                                                        [1;38H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[2;1H[93m    [m 5\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m653 [m    printf("\t-min-count <int>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m651 [m    printf("\t-iter <int>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m649 [m    printf("\t-threads <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([2;1H[93m    [m0 = not used)\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m647 [m    printf("\t-negative <int>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;1H[94m@                                                                                        [1;75H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m645 [m    printf("\t-hs <int>\n");[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[2;1H[93m    [me-5)\n");[28;1H[94m@                                                                                        [2;14H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [2;1H[93m    [mfrequency in the training data\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m642 [m    printf("\t-sample <float>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m640 [m    printf("\t-window <int>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m638 [m    printf("\t-size <int>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m636 [m    printf("\t-output <file>\n");[28;1H[94m@                                                                                        [1;38H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m634 [m    printf("\t-train <file>\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m633 [m    printf("Parameters for training:\n");[28;1H[94m@                                                                                        [1;46H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m632 [m    printf("Options:\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m630 [m  if (argc == 1) {[28;1H[94m@                                                                                        [1;23H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[2;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[2;35H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m627 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m626 [m}[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m625 [m  return -1;[?12l[?25h[?25l[2;6H[?12l[?25h[3;5H[5;35H[6;13H[?25l[7;23H[?12l[?25h[?25l{a[?12l[?25h[?25l[7;23H[K[7;23H[?12l[?25h[?25l [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l *[?12l[?25h[?25l*/[?12l[?25h[?25l „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ */[?12l[?25h[?25lÂºïÊï∞ */[?12l[?25h[?25l„Åå */[?12l[?25h[?25l1 */[?12l[?25h[?25l1ÂÄã„ÅÆ */[?12l[?25h[?25lÊôÇ */[?12l[?25h[29;1H[K[7;29H[?25l[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");
[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[6;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[9;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[12;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[19;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[20;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[22;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[24;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;[14;7H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[12;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) [46m{[m /* „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åå1ÂÄã„ÅÆÊôÇ */
[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");
[93m632 [m    printf("Options:\n");
[93m633 [m    printf("Parameters for training:\n");
[93m634 [m    printf("\t-train <file>\n");
[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");
[93m636 [m    printf("\t-output <file>\n");
[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");
[93m638 [m    printf("\t-size <int>\n");
[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");
[93m640 [m    printf("\t-window <int>\n");
[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");
[93m642 [m    printf("\t-sample <float>\n");
[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[14;22H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");
[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[6;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[9;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[12;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[19;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[20;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[22;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[24;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;[14;7H[?12l[?25h[?25l[27m[m[H[2J[1;1H[93m618 [m  for (a = 1; a < argc; a++) if (!strcmp(str, argv[a])) {
[93m619 [m    if (a == argc - 1) {
[93m620 [m      printf("Argument missing for %s\n", str);
[93m621 [m      exit(1);
[93m622 [m    }
[93m623 [m    return a;
[93m624 [m  }
[93m625 [m  return -1;
[93m626 [m}
[93m627 
628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[12;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */
[93m629 [m  int i;
[93m630 [m  if (argc == 1) [46m{[m /* „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åå1ÂÄã„ÅÆÊôÇ */
[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");
[93m632 [m    printf("Options:\n");
[93m633 [m    printf("Parameters for training:\n");
[93m634 [m    printf("\t-train <file>\n");
[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");
[93m636 [m    printf("\t-output <file>\n");
[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");
[93m638 [m    printf("\t-size <int>\n");
[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");
[93m640 [m    printf("\t-window <int>\n");
[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");
[93m642 [m    printf("\t-sample <float>\n");
[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[14;22H[?12l[?25h[?25l{[?12l[?25h /* [2C[2C[2C[2C[2C[2C[2C[2C[2C[2C1[2C[2C[2C[?25l[29;1H[1m-- INSERT --[14;55H[?12l[?25h[?25l[mÔºå */[?12l[?25h[?25l6 */[?12l[?25h[?25l67 */[?12l[?25h[?25l72 */[?12l[?25h[?25l2Ë°åÁõÆ */[?12l[?25h[?25l„Åæ„Åß */[?12l[?25h[29;1H[K[14;63H[?25l[?12l[?25h[?25l[29;1H:[?12l[?25h672[?25l[27m[m[H[2J[1;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");
[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[6;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[9;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[12;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  }
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[19;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[20;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[22;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[24;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;[14;7H[?12l[?25h[?25l[29;1H[1m-- INSERT --[14;8H[?12l[?25h[?25l[m [?12l[?25h[?25l /[?12l[?25h[?25l/*[?12l[?25h[?25l**[?12l[?25h[?25l*/[?12l[?25h[?25l* */[?12l[?25h[?25l  */[?12l[?25h [?25l 6 */[?12l[?25h[?25l63 */[?12l[?25h[?25l30 */[?12l[?25h[?25l0Ë°åÁõÆ */[?12l[?25h[?25l„Åã„Çâ„ÅÆ */[?12l[?25h[?25li */[?12l[?25h[?25lif */[?12l[?25h[?25lfÁµÇ„Çè„Çä */[?12l[?25hf[?25lfÊñáÁµÇ„Çè„Çä */[14;29H[?12l[?25h[29;1H[K[14;27H[?25l[?12l[?25h[15;9H[16;9H[15;9H[14;9H[13;9H[11;9H[13;9H[14;9H[15;9H[16;9H[17;9H[18;9H[19;9H[21;9H[23;9H[25;9H[26;9H[27;9H[28;9H[?25l[1;28r[28;1H
[1;29r[28;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[28;9H[?12l[?25h[27;9H[26;9H[25;9H[24;9H[22;9H[20;9H[18;9H[17;9H[?25l [46m([45C)[17;10H[?12l[?25h[?25l[m([46m([39C)[m > 0)[17;11H[?12l[?25h[?25l([39C)[18;11H[46m([40C)[m[36C))[19;1H[93m [18;11H[?12l[?25h[?25l[m([40C)[36C))[19;1H[93m [m[20;11H[46m([45C)[m[31Crr[21;1H[93m [20;11H[?12l[?25h[?25l[m([45C)[31Crr[21;1H[93m [m[22;11H[46m([45C)[m[31Crr[23;1H[93m [22;11H[?12l[?25h[?25l[m([45C)[31Crr[23;1H[93m [m[24;11H[46m([40C)[24;11H[?12l[?25h[?25l[m([40C)[25;11H[46m([41C)[25;11H[?12l[?25h[?25l[m([41C)[26;11H[46m([39C)[26;11H[?12l[?25h[?25l[m([39C)[27;11H[?12l[?25h[?25l[28;11H[46m([40C)[28;11H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;11H([40C)
[93m685 [m  if ([46m([mi = ArgPos((char *)"-output", argc, argv)[46m)[m > 0) strcpy(output_file, argv[i + 11[28;1H[93m    [m]);[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[26;11H([41C)[35C11[27;1H[93m 
686 [m  if ([46m([mi = ArgPos((char *)"-window", argc, argv)[46m)[m > 0) window = atoi(argv[i + 1]);[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[26;11H([41C)
[93m687 [m  if ([46m([mi = ArgPos((char *)"-sample", argc, argv)[46m)[m > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[27;11H[?12l[?25h[?25l([41C)[28;11H[46m([37C)[28;11H[?12l[?25h[?25l[1;28r[m[1;1H[3M[1;29r[25;11H([37C)
[93m689 [m  if ([46m([mi = ArgPos((char *)"-negative", argc, argv)[46m)[m > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [26;11H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[25;11H([43C)[33C))[26;1H[93m 
690 [m  if ([46m([mi = ArgPos((char *)"-threads", argc, argv)[46m)[m > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[27;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[25;11H([42C)[34C11[26;1H[93m 
691 [m  if ([46m([mi = ArgPos((char *)"-iter", argc, argv)[46m)[m > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [27;11H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[26;11H([39C)
[93m692 [m  if ([46m([mi = ArgPos((char *)"-min-count", argc, argv)[46m)[m > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[26;11H([44C)[32C11[27;1H[93m 
693 [m  if ([46m([mi = ArgPos((char *)"-classes", argc, argv)[46m)[m > 0) classes = atoi(argv[i + 1]);[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[26;11H([42C)
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [28;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */[27;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢[28;1H[93m    [m„É™(vocab_hash_size = 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[27;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´[28;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[27;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m697 [m  for [46m([mi = 0; i < EXP_TABLE_SIZE; i++[46m)[m {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute th[28;1H[94m@                                                                                        [27;11H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[25;11H([30C)
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[27;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f([28;1H[94m@                                                                                        [26;11H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);                   // Precompute f(([28;1H[93m    [mx) = x / (x + 1)[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[23;44H[46m{[m[28;1H[93m700 [m  [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[22;44H{[27;7H}
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m702 [m  return 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m703 [m}[?12l[?25h[27;11H[26;11H[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[23;11H[?12l[?25h[21;11H[?25l[20;11H[46m([30C)[20;11H[?12l[?25h[?25l[m([30C)[21;11H[?12l[?25h[23;11H[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[26;11H[?12l[?25h[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[23;11H[?12l[?25h[21;11H[?25l[20;11H[46m([30C)[20;11H[?12l[?25h[?25l[m([30C)[18;11H[?12l[?25h[16;11H[14;11H[?25l[13;11H[46m([42C)[13;11H[?12l[?25h[?25l[11;11H([44C)[m[32C11[12;1H[93m [m[13;11H([42C)[11;11H[?12l[?25h[?25l[10;11H[46m([39C)[m[11;11H([44C)[32C11[12;1H[93m [10;11H[?12l[?25h[?25l[m[8;11H[46m([42C)[m[34C11[9;1H[93m [m[10;11H([39C)[8;11H[?12l[?25h[?25l[6;11H[46m([43C)[m[33C))[7;1H[93m [m[8;11H([42C)[34C11[9;1H[93m [6;11H[?12l[?25h[?25l[m[5;11H[46m([37C)[m[6;11H([43C)[33C))[7;1H[93m [5;11H[?12l[?25h[?25l[m[4;11H[46m([41C)[m[5;11H([37C)[4;11H[?12l[?25h[?25l[3;11H[46m([41C)[m[4;11H([41C)[3;11H[?12l[?25h[?25l[1;11H[46m([41C)[m[35C11[2;1H[93m [m[3;11H([41C)[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m684 [m  if ([46m([mi = ArgPos((char *)"-alpha", argc, argv)[46m)[m > 0) alpha = atof(argv[i + 1]);[2;11H([41C)[35C11[3;1H[93m [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m683 [m  if (cbow) alpha = 0.05;[2;11H([40C)[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m682 [m  if ([46m([mi = ArgPos((char *)"-cbow", argc, argv)[46m)[m > 0) cbow = atoi(argv[i + 1]);[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m681 [m  if ([46m([mi = ArgPos((char *)"-binary", argc, argv)[46m)[m > 0) binary = atoi(argv[i + 1]);[2;11H([39C)[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m680 [m  if ([46m([mi = ArgPos((char *)"-debug", argc, argv)[46m)[m > 0) debug_mode = atoi(argv[i + 1]);[2;11H([41C)[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m679 [m  if ([46m([mi = ArgPos((char *)"-read-vocab", argc, argv)[46m)[m > 0) strcpy(read_vocab_file, arr[2;1H[93m    [mgv[i + 1]);[3;11H([40C)[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m678 [m  if ([46m([mi = ArgPos((char *)"-save-vocab", argc, argv)[46m)[m > 0) strcpy(save_vocab_file, arr[2;1H[93m    [mgv[i + 1]);[3;11H([45C)[31Crr[4;1H[93m [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m677 [m  if ([46m([mi = ArgPos((char *)"-train", argc, argv)[46m)[m > 0) strcpy(train_file, argv[i + 1]))[2;1H[93m    [m;[3;11H([45C)[31Crr[4;1H[93m [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m676 [m  if ([46m([mi = ArgPos((char *)"-size", argc, argv)[46m)[m > 0) layer1_size = atoi(argv[i + 1]);[2;11H([40C)[36C))[3;1H[93m [m[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m675 [m  read_vocab_file[0] = 0;[2;11H([39C)[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m674 [m  save_vocab_file[0] = 0;[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m673 [m  output_file[0] = 0;[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m671 [m    return 0;[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[2;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m669 [m    printf("\nExamples:\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[2;1H[93m    [mram model)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m667 [m    printf("\t-cbow <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[2;1H[93m    [mining data\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m665 [m    printf("\t-read-vocab <file>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m663 [m    printf("\t-save-vocab <file>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m661 [m    printf("\t-binary <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m659 [m    printf("\t-debug <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[2;1H[93m    [mes is 0 (vectors are written)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m657 [m    printf("\t-classes <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[2;1H[93m    [m05 for CBOW\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m655 [m    printf("\t-alpha <float>\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[2;1H[93m    [m 5\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m653 [m    printf("\t-min-count <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m651 [m    printf("\t-iter <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m649 [m    printf("\t-threads <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([2;1H[93m    [m0 = not used)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m647 [m    printf("\t-negative <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m645 [m    printf("\t-hs <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[2;1H[93m    [me-5)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [2;1H[93m    [mfrequency in the training data\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m642 [m    printf("\t-sample <float>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m640 [m    printf("\t-window <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m638 [m    printf("\t-size <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m636 [m    printf("\t-output <file>\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m634 [m    printf("\t-train <file>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m633 [m    printf("Parameters for training:\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m632 [m    printf("Options:\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m630 [m  if (argc == 1) { /* „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åå1ÂÄã„ÅÆÊôÇÔºå672Ë°åÁõÆ„Åæ„Åß */[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[2;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m627 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m626 [m}[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m625 [m  return -1;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m624 [m  }[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m623 [m    return a;[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m622 [m    }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m621 [m      exit(1);[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m620 [m      printf("Argument missing for %s\n", str);[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m619 [m    if (a == argc - 1) {[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m618 [m  for [46m([ma = 1; a < argc; a++[46m)[m if (!strcmp(str, argv[a])) {[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m617 [m  int a;[2;11H([20C)[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m615 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */[1;11H[?12l[?25h[2;11H[3;5H[4;11H[5;11H[?25l[6;11H[46m([20C)[6;11H[?12l[?25h[?25l[m([20C)[7;11H[?12l[?25h[8;11H[9;11H[?25l[7;28H[46m{[10;9H}[?12l[?25h[?25l[m[7;28H{[10;9H}[11;11H[?12l[?25h[?25l[6;61H[46m{[12;7H}[?12l[?25h[?25l[m[6;61H{[12;7H}[13;11H[?12l[?25h[?25l[4;50H[46m{[14;5H}[?12l[?25h[?25l[m[4;50H{[14;5H}[13;11H[?12l[?25h[?25l[6;61H[46m{[12;7H}[?12l[?25h[?25l[m[6;61H{[12;7H}[11;11H[?12l[?25h[?25l[7;28H[46m{[10;9H}[?12l[?25h[?25l[m[7;28H{[10;9H}[11;11H[?12l[?25h[?25l[6;61H[46m{[12;7H}[?12l[?25h[?25l[m[6;61H{[12;7H}[13;11H[?12l[?25h[?25l[4;50H[46m{[14;5H}[?12l[?25h[?25l[m[4;50H{[14;5H}[15;5H[?12l[?25h[16;11H[18;11H[19;11H[20;11H[21;11H[22;11H[23;11H[24;11H[25;11H[26;11H[27;11H[28;11H[?25l[1;28r[28;1H
[1;29r[28;1H[93m640 [m    printf("\t-window <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[27;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");[27;11H[?12l[?25h[28;11H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m663 [m    printf("\t-save-vocab <file>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the tra[28;1H[94m@                                                                                        [27;11H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[27;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");[26;11H[?12l[?25h[28;11H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[28;1H[93m    [mram model)\n");[27;11H[?12l[?25h[26;11H[24;11H[23;11H[22;11H[21;11H[20;11H[19;11H[18;11H[17;11H[15;11H[14;11H[12;11H[11;11H[9;11H[8;11H[7;11H[6;11H[5;11H[4;11H[2;11H[1;11H[?25l[1;28r[1;1H[L[1;29r[1;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m645 [m    printf("\t-hs <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[2;1H[93m    [me-5)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [2;1H[93m    [mfrequency in the training data\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m642 [m    printf("\t-sample <float>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m640 [m    printf("\t-window <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m638 [m    printf("\t-size <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m636 [m    printf("\t-output <file>\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m634 [m    printf("\t-train <file>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m633 [m    printf("Parameters for training:\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m632 [m    printf("Options:\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m630 [m  if (argc == 1) { /* „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åå1ÂÄã„ÅÆÊôÇÔºå672Ë°åÁõÆ„Åæ„Åß */[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[2;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m627 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m626 [m}[?12l[?25h[2;5H[3;11H[5;11H[6;11H[7;11H[8;11H[9;11H[10;11H[11;11H[12;11H[13;11H[14;11H[15;11H[16;11H[17;11H[18;11H[19;11H[21;11H[23;11H[24;11H[25;11H[26;11H[28;11H[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");[27;11H[?12l[?25h[28;11H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m663 [m    printf("\t-save-vocab <file>\n");[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the tra[28;1H[94m@                                                                                        [27;11H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[27;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");[26;11H[?12l[?25h[28;11H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[28;1H[93m    [mram model)\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m669 [m    printf("\nExamples:\n");[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[28;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");[27;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m671 [m    return 0;[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m673 [m  output_file[0] = 0;[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m674 [m  save_vocab_file[0] = 0;[28;11H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m675 [m  read_vocab_file[0] = 0;[28;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m676 [m  if ([46m([mi = ArgPos((char *)"-size", argc, argv)[46m)[m > 0) layer1_size = atoi(argv[i + 1]);[28;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1])[28;1H[94m@                                                                                        [27;11H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[26;11H([39C)
[93m677 [m  if ([46m([mi = ArgPos((char *)"-train", argc, argv)[46m)[m > 0) strcpy(train_file, argv[i + 1]))[28;1H[93m    [m;[27;11H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[25;11H([40C)[36C))[26;1H[93m 
678 [m  if ([46m([mi = ArgPos((char *)"-save-vocab", argc, argv)[46m)[m > 0) strcpy(save_vocab_file, arr[28;1H[93m    [mgv[i + 1]);[27;11H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[24;11H([45C)[31Crr[25;1H[93m 
679 [m  if ([46m([mi = ArgPos((char *)"-read-vocab", argc, argv)[46m)[m > 0) strcpy(read_vocab_file, arr[27;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;11H[?12l[?25h[?25l([45C)[31Crr[27;1H[93m [m[28;11H[46m([40C)[28;11H[?12l[?25h[?25l[26;11H([45C)[m[31Crr[27;1H[93m [m[28;11H([40C)[26;11H[?12l[?25h[?25l([45C)[31Crr[27;1H[93m [m[28;11H[46m([40C)[28;11H[?12l[?25h[?25l[26;11H([45C)[m[31Crr[27;1H[93m [m[28;11H([40C)[26;11H[?12l[?25h[?25l[24;11H[46m([45C)[m[31Crr[25;1H[93m [m[26;11H([45C)[31Crr[27;1H[93m [24;11H[?12l[?25h[?25l[m[22;11H[46m([40C)[m[36C))[23;1H[93m [m[24;11H([45C)[31Crr[25;1H[93m [22;11H[?12l[?25h[?25l[m[21;11H[46m([39C)[m[22;11H([40C)[36C))[23;1H[93m [21;11H[?12l[?25h[?25l[m([39C)[20;11H[?12l[?25h[19;11H[18;11H[17;11H[16;11H[14;11H[13;11H[11;11H[10;11H[8;11H[7;11H[6;11H[5;11H[4;11H[3;11H[2;11H[1;11H[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[2;1H[93m    [mes is 0 (vectors are written)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m657 [m    printf("\t-classes <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[2;1H[93m    [m05 for CBOW\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m655 [m    printf("\t-alpha <float>\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[2;1H[93m    [m 5\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m653 [m    printf("\t-min-count <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m651 [m    printf("\t-iter <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m649 [m    printf("\t-threads <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([2;1H[93m    [m0 = not used)\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m647 [m    printf("\t-negative <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m645 [m    printf("\t-hs <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[2;1H[93m    [me-5)\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [2;1H[93m    [mfrequency in the training data\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m642 [m    printf("\t-sample <float>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m640 [m    printf("\t-window <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m638 [m    printf("\t-size <int>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m636 [m    printf("\t-output <file>\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m634 [m    printf("\t-train <file>\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m633 [m    printf("Parameters for training:\n");[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m632 [m    printf("Options:\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m630 [m  if (argc == 1) { /* „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åå1ÂÄã„ÅÆÊôÇÔºå672Ë°åÁõÆ„Åæ„Åß */[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[2;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m627 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m626 [m}[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m625 [m  return -1;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m624 [m  }[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m623 [m    return a;[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m622 [m    }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m621 [m      exit(1);[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m620 [m      printf("Argument missing for %s\n", str);[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m619 [m    if (a == argc - 1) {[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m618 [m  for [46m([ma = 1; a < argc; a++[46m)[m if (!strcmp(str, argv[a])) {[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m617 [m  int a;[2;11H([20C)[28;1H[94m@                                                                                        [1;11H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m616 [mint ArgPos(char *str, int argc, char **argv) {[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m615 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m614 [m} /* 545Ë°åÁõÆvoid TrainModel()„Åã„Çâ */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m613 [m  fclose(fo); /* 559Ë°åÁõÆ„ÅßÈñã„ÅÑ„Åüfo„ÇíÈñâ„Åò„Çã */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m612 [m  } /* 569Ë°åÁõÆelse„Åã„Çâ */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m611 [m    free(cl); /* 573Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücl„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m610 [m    free(cent); /* 575Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücent„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m609 [m    free(centcn); /* 572Ë°åÁõÆ„ÅßÁ¢∫‰øù„Åó„Åücentcn„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ */[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m608 [m    for (a = 0; a < vocab_size; a++) fprintf(fo, "%s %d\n", vocab[a].word, cl[a]);[1;11H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m607 [m    // Save the K-means classes[1;11H[?12l[?25h[2;11H[3;11H[4;11H[5;11H[6;11H[7;11H[8;11H[9;5H[10;11H[11;11H[10;11HgPo[?25ls[46m([32C)[10;15H[?12l[?25h[?25l[m([32C)[10;16H[?12l[?25hch[11;12H[12;18H[13;18H[14;18H[15;18H[?25l[13;28H[46m{[16;9H}[?12l[?25h[?25l[m[13;28H{[16;9H}[17;17H[?12l[?25h[?25l[12;61H[46m{[18;7H}[?12l[?25h[?25l[m[12;61H{[18;7H}[19;16H[?12l[?25h[?25l[10;50H[46m{[20;5H}[?12l[?25h[?25l[m[10;50H{[20;5H}[21;5H[?12l[?25h[22;18H[24;12H[25;18H[26;18H[27;18H[28;18H[?25l[1;28r[28;1H
[1;29r[28;1H[93m634 [m    printf("\t-train <file>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m636 [m    printf("\t-output <file>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m638 [m    printf("\t-size <int>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m640 [m    printf("\t-window <int>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m642 [m    printf("\t-sample <float>\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [28;1H[93m    [mfrequency in the training data\n");[27;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[28;1H[93m    [me-5)\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m645 [m    printf("\t-hs <int>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");[27;18H[?12l[?25h[28;18H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m663 [m    printf("\t-save-vocab <file>\n");[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the tra[28;1H[94m@                                                                                        [27;18H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[27;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");[26;18H[?12l[?25h[28;18H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[28;1H[93m    [mram model)\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m669 [m    printf("\nExamples:\n");[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[28;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");[27;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m671 [m    return 0;[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */[28;17H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m673 [m  output_file[46m[[m0[46m][m = 0;[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[27;18H[0]
[93m674 [m  save_vocab_file[0] = 0;[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m675 [m  read_vocab_file[0] = 0;[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[28;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1])[28;1H[94m@                                                                                        [27;18H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[28;1H[93m    [m;[27;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[28;1H[93m    [mgv[i + 1]);[27;18H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[27;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;18H[?12l[?25h[28;18H[?25l[1;28r[28;1H
[1;29r[28;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m683 [m  if (cbow) alpha = 0.05;[28;18H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[28;18H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[28;1H[93m    [m]);[27;18H[?12l[?25h[26;18H[25;18H[24;18H[23;18H[22;18H[20;18H[18;18H[16;18H[15;18H[14;18H[13;18H[?25l[12;18H[46m[[m0[46m][?12l[?25h[?25l[m[0][11;17H[?12l[?25h[10;17H[8;18H[7;18H[5;18H[4;18H[?25l[29;1H/[?12l[?25houtput_file[?25l[12;7H[?12l[?25h[?25l[29;1H?[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[15;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUEÔºå569Ë°åÁõÆ„Åæ„Åß */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[19;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][23;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[24;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[25;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[27;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */[14;41H[?12l[?25h[?25l[29;1H/output_file[27m[m[H[2J[1;1H[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[5;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[8;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[11;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[18;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[19;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[21;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[23;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[25;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[14;7H[?12l[?25h[?25l[29;1H?output_file[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[15;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUEÔºå569Ë°åÁõÆ„Åæ„Åß */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[19;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][23;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[24;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[25;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[27;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */[14;41H[?12l[?25h[?25l[29;1H/output_file[27m[m[H[2J[1;1H[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[5;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[8;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[11;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[18;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[19;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[21;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[23;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[25;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[14;7H[?12l[?25h[13;7H[12;7H[10;7H[9;7H[7;7H[6;7H[4;7H[3;7H[2;7H[1;7H[?25l[1;28r[1;1H[L[1;29r[1;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m661 [m    printf("\t-binary <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m659 [m    printf("\t-debug <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[2;1H[93m    [mes is 0 (vectors are written)\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m657 [m    printf("\t-classes <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[2;1H[93m    [m05 for CBOW\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m655 [m    printf("\t-alpha <float>\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[2;1H[93m    [m 5\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m653 [m    printf("\t-min-count <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m651 [m    printf("\t-iter <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m649 [m    printf("\t-threads <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([2;1H[93m    [m0 = not used)\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m647 [m    printf("\t-negative <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m646 [m    printf("\t\tUse Hierarchical Softmax; default is 0 (not used)\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m645 [m    printf("\t-hs <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m644 [m    printf("\t\twill be randomly down-sampled; default is 1e-3, useful range is (0, 11[2;1H[93m    [me-5)\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m643 [m    printf("\t\tSet threshold for occurrence of words. Those that appear with higher  [2;1H[93m    [mfrequency in the training data\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m642 [m    printf("\t-sample <float>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m641 [m    printf("\t\tSet max skip length between words; default is 5\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m640 [m    printf("\t-window <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m639 [m    printf("\t\tSet size of word vectors; default is 100\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m638 [m    printf("\t-size <int>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m637 [m    printf("\t\tUse <file> to save the resulting word vectors / word clusters\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m636 [m    printf("\t-output <file>\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m635 [m    printf("\t\tUse text data from <file> to train the model\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m634 [m    printf("\t-train <file>\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m633 [m    printf("Parameters for training:\n");[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m632 [m    printf("Options:\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m631 [m    printf("WORD VECTOR estimation toolkit v 0.1c\n\n");[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m630 [m  if (argc == 1) { /* „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åå1ÂÄã„ÅÆÊôÇÔºå672Ë°åÁõÆ„Åæ„Åß */[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m629 [m  int i;[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m628 [mint main(int argc, char **argv) { /* mainÈñ¢Êï∞Ôºå703Ë°åÁõÆ„Åæ„Åß(argc:„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆ[94m>>[m[2;1H[93m    [mÁ∑èÂÄãÊï∞Ôºå**argv: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆÊñáÂ≠óÂàó„ÇíÊåá„Åô„Éù„Ç§„É≥„Çø„ÅÆÈÖçÂàó */[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m627 [?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m626 [m}[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m625 [m  return -1;[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m624 [m  }[28;1H[94m@                                                                                        [1;7H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m623 [m    return a;[1;7H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m622 [m    }[?12l[?25h[2;7H[3;7H[4;7H[5;5H[6;5H[7;7H[9;7H[10;7H[11;7H[12;7H[13;7H[14;7H[15;7H[16;7H[17;7H[18;7H[19;7H[20;7H[21;7H[22;7H[23;7H[25;7H[27;7H[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m647 [m    printf("\t-negative <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m648 [m    printf("\t\tNumber of negative examples; default is 5, common values are 3 - 10 (([28;1H[93m    [m0 = not used)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m649 [m    printf("\t-threads <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m650 [m    printf("\t\tUse <int> threads (default 12)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m651 [m    printf("\t-iter <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m652 [m    printf("\t\tRun more training iterations (default 5)\n");
[93m653 [m    printf("\t-min-count <int>\n");[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m654 [m    printf("\t\tThis will discard words that appear less than <int> times; default iss[28;1H[93m    [m 5\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m655 [m    printf("\t-alpha <float>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m656 [m    printf("\t\tSet the starting learning rate; default is 0.025 for skip-gram and 0..[28;1H[93m    [m05 for CBOW\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m657 [m    printf("\t-classes <int>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m658 [m    printf("\t\tOutput word classes rather than word vectors; default number of classs[28;1H[93m    [mes is 0 (vectors are written)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m659 [m    printf("\t-debug <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m660 [m    printf("\t\tSet the debug mode (default = 2 = more info during training)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m661 [m    printf("\t-binary <int>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m662 [m    printf("\t\tSave the resulting vectors in binary moded; default is 0 (off)\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m663 [m    printf("\t-save-vocab <file>\n");[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the tra[28;1H[94m@                                                                                        [27;7H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[27;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");[26;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[28;1H[93m    [mram model)\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m669 [m    printf("\nExamples:\n");[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[28;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m671 [m    return 0;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m673 [m  output_file[0] = 0;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m674 [m  save_vocab_file[0] = 0;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m675 [m  read_vocab_file[0] = 0;[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[28;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1])[28;1H[94m@                                                                                        [27;7H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[28;1H[93m    [m;[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[28;1H[93m    [mgv[i + 1]);[27;7H[?12l[?25h[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[27;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[26;7H[?12l[?25h[28;7H[?25l[1;28r[28;1H
[1;29r[28;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m683 [m  if (cbow) alpha = 0.05;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[28;1H[93m    [m]);[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[27;7H[?12l[?25h[28;7H[?25l
/output_file[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[2;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[11;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[15;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[17;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[19;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[21;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[24;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [26;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[28;1H[93m    [mearning rate) */
[38;5;224msearch hit BOTTOM, continuing at TOP[14;34H[?12l[?25h[?25l[m[29;1H?output_file[29;13H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[3;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[4;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[6;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[8;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[10;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[15;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[20;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[22;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[25;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [28;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */
[38;5;224msearch hit TOP, continuing at BOTTOM[14;67H[?12l[?25h[?25l[m[29;1H?output_file[29;13H[K[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;[29;1H[K[1;7H[?12l[?25h[?25l[29;1H/output_file[16;67H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 27 [mconst int vocab_hash_size = 30000000;  // Maximum 30 * 0.7 = 21M words in the vocabull[2;1H[93m    [mary
[93m 28 
 29 [mtypedef float real;[19C // Precision of float numbers
[93m 30 
 31 [m/* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„ÇíÂÆ£Ë®Ä */
[93m 32 [mstruct vocab_word {
[93m 33 [m  long long cn; /* long longÂûã(64 bitÁ¨¶Âè∑‰ªòÊï¥Êï∞Âûã) cn */
[93m 34 [m  int *point; /* intÂûã„Éù„Ç§„É≥„Çøpoint„ÇíÂÆ£Ë®Ä */
[93m 35 [m  char *word, *code, codelen; /* charÂûã(1 byteÊñáÂ≠óÂûã)codelen„Å®„Éù„Ç§„É≥„ÇøwordÔºåcode„ÇíÂÆ£[94m>>[m[11;1H[93m    [mË®Ä */
[93m 36 [m}; /* „Åì„ÅÆÊÆµÈöé„ÅßÂ§âÊï∞ÁÑ°„Åó */
[93m 37 
 38 [mchar train_file[MAX_STRING], output_file[MAX_STRING]; /* ÊúÄÂ§ßÊñáÂ≠óÊï∞MAX_STRING„ÇíÂºïÊï∞„Å´[15;1H[93m    [mÊåÅ„Å§charÂûã(1 byteÊñáÂ≠óÂûã)train_file„Å®output_file„ÇíÂÆ£Ë®Ä */
[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[17;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[19;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[21;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[24;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [26;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[28;1H[93m    [mearning rate) */
[38;5;224msearch hit BOTTOM, continuing at TOP[14;34H[?12l[?25h[?25l[m[29;1H?output_file[29;13H[K[29;1H[38;5;224msearch hit TOP, continuing at BOTTOM[27m[m[H[2J[1;1H[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[3;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[4;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[6;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[8;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[10;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);
[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[15;1H[93m    [m]);
[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);
[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);
[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[20;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[22;1H[93m    [m]);
[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[25;1H[93m    [m]);
[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);
[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [28;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */
[38;5;224msearch hit TOP, continuing at BOTTOM[14;67H[?12l[?25h[?25l[m[29;1H?output_file[29;13H[K[29;1H[1;28r[1;1H[2L[1;29r[1;1H[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;[29;1H[K[1;7H[?12l[?25h[?25l[29;1H?output_file[27m[m[H[2J[1;1H[93m549 [m  printf("Starting training using file %s\n", train_file);
[93m550 [m  starting_alpha = alpha;
[93m551 [m  if (read_vocab_file[0] != 0) ReadVocab(); else LearnVocabFromTrainFile();
[93m552 [m  if (save_vocab_file[0] != 0) SaveVocab();
[93m553 [m  if (output_file[0] == 0) return;
[93m554 [m  InitNet();
[93m555 [m  if (negative > 0) InitUnigramTable();
[93m556 [m  start = clock();
[93m557 [m  for (a = 0; a < num_threads; a++) pthread_create(&pt[a], NULL, TrainModelThread, (vv[10;1H[93m    [moid *)a); /* 0 <= 1 < num_threads„ÅßÊñ∞Ë¶è„Å´„Çπ„É¨„ÉÉ„Éâ(ID: pt[a])„Çí‰ΩúÊàê„ÅóÔºåTrainModelThreaa[11;1H[93m    [md„ÇíÂÆüË°å„Åô„Çã */
[93m558 [m  for (a = 0; a < num_threads; a++) pthread_join(pt[a], NULL); /* „Çπ„É¨„ÉÉ„ÉâID: pt[a]„Åå[13;1H[93m    [mÁµÇ‰∫Ü(TrainModelThread„Åå543Ë°åÁõÆ„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ„Çè„Çâ„Åõ„Çã)„Åô„Çã„Åæ„ÅßÂÆüË°å„Çí‰∏ÄÊôÇÂÅúÊ≠¢ */
[93m559 [m  fo = fopen(output_file, "wb"); /* output_file„Çí„Éê„Ç§„Éä„É™„É¢„Éº„Éâ„ÅßÊõ∏ËæºÂ∞ÇÁî®„ÅßÈñã„ÅèÔºå613[94m>>[m[15;1H[93m    [mË°åÁõÆ„ÅßÈñâ„Åò„Çã */
[93m560 [m  if (classes == 0) { /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ44Ë°åÁõÆ„ÅÆclasses = 0„Çà„ÇäTRUEÔºå569Ë°åÁõÆ„Åæ„Åß */
[93m561 [m    // Save the word vectors
[93m562 [m    fprintf(fo, "%lld %lld\n", vocab_size, layer1_size); /* fo„Å´vocab_size„Å®layer1_sii[19;1H[93m    [mze„Çílong longÂûã„Åß„Åù„Çå„Åû„ÇåÂá∫Âäõ */
[93m563 [m    for (a = 0; a < vocab_size; a++) { /* 0 <= a < vocab_size„ÅÆÊôÇÔºå568Ë°åÁõÆ„Åæ„Åß */
[93m564 [m      fprintf(fo, "%s ", vocab[a].word); /* fo„Å´vocab[a].word„ÇíÊñáÂ≠óÂàó„Å®„Åó„Å¶Âá∫Âäõ */
[93m565 [m      if (binary) for (b = 0; b < layer1_size; b++) fwrite(&syn0[a * layer1_size + b]][23;1H[93m    [m, sizeof(real), 1, fo); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØ41Ë°åÁõÆ„ÅÆbinary = 0„Çà„ÇäÂãï„ÅèÔºå0 <= b < layer1__[24;1H[93m    [msize„ÅÆÊôÇfo„Å´„Éù„Ç§„É≥„Çøsyn0[a * layer1_size + b]„Åã„Çâsizeof(real) bytesÂçò‰Ωç„Åß1ÂÄã„ÅÆ„Éá„Éº„Çø[94m>>[m[25;1H[93m    [m„ÇíÊõ∏Ëæº„Åø */
[93m566 [m      else for (b = 0; b < layer1_size; b++) fprintf(fo, "%lf ", syn0[a * layer1_sizee[27;1H[93m    [m + b]); /* „Éá„Éï„Ç©„É´„Éà„Åß„ÅØÂãï„Åã„Å™„ÅÑ */
[93m567 [m      fprintf(fo, "\n"); /* fo„Å´ÊîπË°å„ÇíÂá∫Âäõ */[14;41H[?12l[?25h[?25l[29;1H/output_file[27m[m[H[2J[1;1H[93m663 [m    printf("\t-save-vocab <file>\n");
[93m664 [m    printf("\t\tThe vocabulary will be saved to <file>\n");
[93m665 [m    printf("\t-read-vocab <file>\n");
[93m666 [m    printf("\t\tThe vocabulary will be read from <file>, not constructed from the traa[5;1H[93m    [mining data\n");
[93m667 [m    printf("\t-cbow <int>\n");
[93m668 [m    printf("\t\tUse the continuous bag of words model; default is 1 (use 0 for skip-gg[8;1H[93m    [mram model)\n");
[93m669 [m    printf("\nExamples:\n");
[93m670 [m    printf("./word2vec -train data.txt -output vec.txt -size 200 -window 5 -sample 1ee[11;1H[93m    [m-4 -negative 5 -hs 0 -binary 0 -cbow 1 -iter 3\n\n");
[93m671 [m    return 0;
[93m672 [m  } /* 630Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñáÁµÇ„Çè„Çä */
[93m673 [m  output_file[0] = 0;
[93m674 [m  save_vocab_file[0] = 0;
[93m675 [m  read_vocab_file[0] = 0;
[93m676 [m  if ((i = ArgPos((char *)"-size", argc, argv)) > 0) layer1_size = atoi(argv[i + 1]);[18;1H[93m677 [m  if ((i = ArgPos((char *)"-train", argc, argv)) > 0) strcpy(train_file, argv[i + 1]))[19;1H[93m    [m;
[93m678 [m  if ((i = ArgPos((char *)"-save-vocab", argc, argv)) > 0) strcpy(save_vocab_file, arr[21;1H[93m    [mgv[i + 1]);
[93m679 [m  if ((i = ArgPos((char *)"-read-vocab", argc, argv)) > 0) strcpy(read_vocab_file, arr[23;1H[93m    [mgv[i + 1]);
[93m680 [m  if ((i = ArgPos((char *)"-debug", argc, argv)) > 0) debug_mode = atoi(argv[i + 1]);[25;1H[93m681 [m  if ((i = ArgPos((char *)"-binary", argc, argv)) > 0) binary = atoi(argv[i + 1]);
[93m682 [m  if ((i = ArgPos((char *)"-cbow", argc, argv)) > 0) cbow = atoi(argv[i + 1]);
[93m683 [m  if (cbow) alpha = 0.05;
[93m684 [m  if ((i = ArgPos((char *)"-alpha", argc, argv)) > 0) alpha = atof(argv[i + 1]);[14;7H[?12l[?25h[15;7H[16;7H[17;7H[18;7H[20;7H[22;7H[24;7H[25;7H[26;7H[27;7H[28;7H[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m685 [m  if ((i = ArgPos((char *)"-output", argc, argv)) > 0) strcpy(output_file, argv[i + 11[28;1H[93m    [m]);[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m686 [m  if ((i = ArgPos((char *)"-window", argc, argv)) > 0) window = atoi(argv[i + 1]);[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m687 [m  if ((i = ArgPos((char *)"-sample", argc, argv)) > 0) sample = atof(argv[i + 1]);
[93m688 [m  if ((i = ArgPos((char *)"-hs", argc, argv)) > 0) hs = atoi(argv[i + 1]);[27;7H[?12l[?25h[28;7H[?25l[1;28r[1;1H[3M[1;29r[26;1H[93m689 [m  if ((i = ArgPos((char *)"-negative", argc, argv)) > 0) negative = atoi(argv[i + 1]))[27;1H[93m    [m;
[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 1[28;1H[94m@                                                                                        [26;7H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m690 [m  if ((i = ArgPos((char *)"-threads", argc, argv)) > 0) num_threads = atoi(argv[i + 11[28;1H[93m    [m]);[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m691 [m  if ((i = ArgPos((char *)"-iter", argc, argv)) > 0) iter = atoi(argv[i + 1]);
[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 1[28;1H[94m@                                                                                        [27;7H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m692 [m  if ((i = ArgPos((char *)"-min-count", argc, argv)) > 0) min_count = atoi(argv[i + 11[28;1H[93m    [m]);[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m693 [m  if ((i = ArgPos((char *)"-classes", argc, argv)) > 0) classes = atoi(argv[i + 1]);[28;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m694 [m  vocab = (struct vocab_word *)calloc(vocab_max_size, sizeof(struct vocab_word)); /*  [28;1H[93m    [mvocab„Å´ÂãïÁöÑ„Å´„É°„É¢„É™Ââ≤ÂΩì */[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m695 [m  vocab_hash = (int *)calloc(vocab_hash_size, sizeof(int)); /* vocab_hash„Å´ÂãïÁöÑ„Å´„É°„É¢[28;1H[93m    [m„É™(vocab_hash_size = 30M)Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m696 [m  expTable = (real *)malloc((EXP_TABLE_SIZE + 1) * sizeof(real)); /* expTable„Å´ÂãïÁöÑ„Å´[28;1H[93m    [m„É°„É¢„É™Ââ≤ÂΩì(„Å©„Åì„ÅßËß£ÊîæÔºü) */[27;7H[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m697 [m  for (i = 0; i < EXP_TABLE_SIZE; i++) {
[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute th[28;1H[94m@                                                                                        [27;7H[?12l[?25h[?25l[1;28r[m[1;1H[2M[1;29r[26;1H[93m698 [m    expTable[i] = exp((i / (real)EXP_TABLE_SIZE * 2 - 1) * MAX_EXP); // Precompute thh[27;1H[93m    [me exp() table
[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);[18C // Precompute f([28;1H[94m@                                                                                        [26;7H[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m699 [m    expTable[i] = expTable[i] / (expTable[i] + 1);                   // Precompute f(([28;1H[93m    [mx) = x / (x + 1)[27;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[23;44H[46m{[m[28;1H[93m700 [m  [46m}[?12l[?25h[?25l[1;28r[m[28;1H
[1;29r[22;44H{[27;7H}
[93m701 [m  TrainModel(); /* 545Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„ÅüTrainModel„ÇíÈñã„Åè */[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m702 [m  return 0;[28;7H[?12l[?25h[?25l[1;28r[28;1H
[1;29r[28;1H[93m703 [m}[?12l[?25h[27;7H[26;7H[?25l[20;44H[46m{[25;7H}[?12l[?25h[?25l[m[20;44H{[25;7H}[23;7H[?12l[?25h[21;7H[20;7Hfor[?25l [46m([30C)[20;11H[?12l[?25h[?25l[m([30C)[20;12H[?12l[?25hi = 0; i < EXP_TABLE_SIZE; i+[?25l[20;11H[46m([30C)[?12l[?25h[?25l[m[20;11H([30C)[?12l[?25h[?25l [46m{[25;7H}[20;44H[?12l[?25h[?25l[m{[25;7H}[21;44H[?12l[?25h[?25l[20;44H[46m{[25;7H}[20;44H[?12l[?25h[?25l[m{[25;7H}[20;43H[?12l[?25h[?25l[20;11H[46m([30C)[?12l[?25h[?25l[m[20;11H([30C)[?12l[?25h[?25l[21;32H[46m([mreal[46m)[m[51Chh[22;1H[93m [21;32H[?12l[?25h[?25l[m(real)[51Chh[22;1H[93m [21;33H[?12l[?25h[mrea[?25l[46m([mreal[46m)[m[51Chh[22;1H[93m [21;37H[?12l[?25h[?25l[m(real)[51Chh[22;1H[93m [21;38H[?12l[?25h[mEXP_TABLE_SIZE * 2 - [?25l[21;27H[46m([32C)[m[28Chh[22;1H[93m [21;60H[?12l[?25h[?25l[m[21;27H([32C)[28Chh[22;1H[93m [21;61H[?12l[?25h[m * MAX_EX[?25l[29;1H/[?12l[?25hexpTable[?25l[23;9H[?12l[?25h[?25l[29;1H[23;23H[?12l[?25h[?25l[29;1H[23;38H[?12l[?25h[?25l[29;1H[38;5;224msearch hit BOTTOM, continuing at TOP[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;
[38;5;224msearch hit BOTTOM, continuing at TOP[14;35H[?12l[?25h[?25l[m[29;1H/expTable[29;10H[K[29;1H[27m[m[H[2J[1;1H[93m432 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] += syn0[c + last_word * layer1_sizee[2;1H[93m    [m];
[93m433 [m[7C cw++;
[93m434 [m      }
[93m435 [m      if (cw) {
[93m436 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] /= cw;
[93m437 [m[7C if (hs) for (d = 0; d < vocab[word].codelen; d++) {
[93m438 [m[9C f = 0;
[93m439 [m[9C l2 = vocab[word].point[d] * layer1_size;
[93m440 [m[9C // Propagate hidden -> output
[93m441 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1[c + l2];
[93m442 [m[9C if (f <= -MAX_EXP) continue;
[93m443 [m[9C else if (f >= MAX_EXP) continue;
[93m444 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))];
[93m445 [m[9C // 'g' is the gradient multiplied by the learning rate
[93m446 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;
[93m447 [m[9C // Propagate errors output -> hidden
[93m448 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];
[93m449 [m[9C // Learn weights hidden -> output
[93m450 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * neu1[c];
[93m451 [m[7C }
[93m452 [m[7C // NEGATIVE SAMPLING
[93m453 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) {
[93m454 [m[9C if (d == 0) {
[93m455 [m[11C target = word;
[93m456 [m[11C label = 1;
[93m457 [m[9C } else {
[93m458 [m[11C next_random = next_random * (unsigned long long)25214903917 + 11;[14;24H[?12l[?25h[13;24H[12;24H[11;24H[10;24H[9;24H[8;20H[7;24H[6;24H[5;19H[4;11H[3;17H[1;24H[?25l[1;28r[1;1H[L[1;29r[1;1H[93m431 [m[7C if (last_word == -1) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m430 [m[7C last_word = sen[c];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m429 [m[7C if (c >= sentence_length) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m428 [m[7C if (c < 0) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m427 [m[7C c = sentence_position - window + a;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m425 [m      cw = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m424 [m      // in -> hidden[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ [2;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[2;1H[93m    [m */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[2;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m418 [m    if (word == -1) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */[1;24H[?12l[?25h[?25l[1;28r[1;1H[3L[1;29r[1;1H[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï[2;1H[93m    [m„Ç°„Ç§„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[3;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m413 [m      sentence_length = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m412 [m      last_word_count = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m411 [m      word_count = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m408 [m      word_count_actual += word_count - last_word_count;[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå[2;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[2;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */[1;24H[?12l[?25h[?25l[1;28r[1;1H[4L[1;29r[1;1H[93m403 [m[7C if (sentence_length >= MAX_SENTENCE_LENGTH) break; /* sentence_length„ÅåMAX_SEE[2;1H[93m    [mNTENCE_LENGTH == 1000„Å´ÈÅî„Åó„ÅüÊôÇ389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ (i.e. ÈÖçÂàósen„ÅØMAX_SENN[3;1H[93m    [mTENCE_LENGTH + 1ÂÄã„ÅÆË¶ÅÁ¥†„ÅåÊúâ„Çã„ÅÆ„ÅßÔºåsen„ÅÆÂêÑË¶ÅÁ¥†„Å´word„Çí‰ª£ÂÖ•„ÅóÁµÇ„Çè„Å£„Åü„ÇâÁÑ°Èôê„É´„Éº„Éó„ÇíÊäú [4;1H[93m    [m„Åë„Çã) */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m402 [m[7C sentence_length++; /* „Åì„Åì„Åßsentence_length„ÅåÂ¢ó„Åà„Çã */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m401 [m[7C sen[sentence_length] = word; /* ÈÖçÂàósen„ÅÆÂêÑË¶ÅÁ¥†„Å´word„Çí‰ª£ÂÖ• */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[2;24H[3;24H[7;24H[8;24H[10;23H[11;24H[13;24H[14;24H[15;24H[16;24H[17;24H[18;24H[19;24H[22;24H[23;23H[24;24H[25;24H[26;24H[27;24H[?25l[1;28r[m[28;1H
[1;29r[27;1H[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[28;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */[27;24H[?12l[?25h[?25l[1;28r[1;1H[5M[1;29r[24;1H[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ [25;1H[93m    [m */
[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ[27;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */
[93m424 [m      // in -> hidden[24;24H[?12l[?25h[26;24H[28;24H[?25l[1;28r[28;1H
[1;29r[28;1H[93m425 [m      cw = 0;[?12l[?25h[?25l[1;28r[1;1H[2M[1;29r[27;1H[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {
[93m427 [m[7C c = sentence_position - window + a;[27;24H[?12l[?25h[?25l

/expTable[27m[m[H[2J[1;1H[93m432 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] += syn0[c + last_word * layer1_sizee[2;1H[93m    [m];
[93m433 [m[7C cw++;
[93m434 [m      }
[93m435 [m      if (cw) {
[93m436 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] /= cw;
[93m437 [m[7C if (hs) for (d = 0; d < vocab[word].codelen; d++) {
[93m438 [m[9C f = 0;
[93m439 [m[9C l2 = vocab[word].point[d] * layer1_size;
[93m440 [m[9C // Propagate hidden -> output
[93m441 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1[c + l2];
[93m442 [m[9C if (f <= -MAX_EXP) continue;
[93m443 [m[9C else if (f >= MAX_EXP) continue;
[93m444 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))];
[93m445 [m[9C // 'g' is the gradient multiplied by the learning rate
[93m446 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;
[93m447 [m[9C // Propagate errors output -> hidden
[93m448 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];
[93m449 [m[9C // Learn weights hidden -> output
[93m450 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * neu1[c];
[93m451 [m[7C }
[93m452 [m[7C // NEGATIVE SAMPLING
[93m453 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) {
[93m454 [m[9C if (d == 0) {
[93m455 [m[11C target = word;
[93m456 [m[11C label = 1;
[93m457 [m[9C } else {
[93m458 [m[11C next_random = next_random * (unsigned long long)25214903917 + 11;[14;24H[?12l[?25h[?25l[29;1H?expTable[27m[m[H[2J[1;1H[93m 39 [mchar save_vocab_file[MAX_STRING], read_vocab_file[MAX_STRING]; /* charÂûãsave_vocab_fii[2;1H[93m    [mle„Å®read_vocab_file„ÇíÂÆ£Ë®Ä */
[93m 40 [mstruct vocab_word *vocab; /* ÊßãÈÄ†‰ΩìÂûãstruct vocab_word„Åß„Éù„Ç§„É≥„Çøvocab(„Åì„Çå„ÅØÂ§âÊï∞„Å†„Åã[94m>>[m[4;1H[93m    [m„Çâvocab.cn, vocab.point, vocab.word, vocab.code, vocab.codelen„ÇíÊåÅ„Å§)„ÇíÂÆ£Ë®Ä */
[93m 41 [mint binary = 0, cbow = 1, debug_mode = 2, window = 5, min_count = 5, num_threads = 122[6;1H[93m    [m, min_reduce = 1; /* „Çπ„É¨„ÉÉ„ÉâÊï∞num_threads = 12Ôºåbinary = 0„ÅØ565Ë°åÁõÆ„Åß‰ΩøÁî® */
[93m 42 [mint *vocab_hash; /* intÂûã„Éù„Ç§„É≥„Çøvocab_hash(SearchVocab()„Åß‰ΩøÁî®) */
[93m 43 [mlong long vocab_max_size = 1000, vocab_size = 0, layer1_size = 100; /* long longÂûãvocc[9;1H[93m    [mab_max_size, vocab_size„Å®layer1_size„ÇíÂÆ£Ë®Ä */
[93m 44 [mlong long train_words = 0, word_count_actual = 0, iter = 5, file_size = 0, classes =  [11;1H[93m    [m0; /* 560Ë°åÁõÆ„Åßclasses„Çí‰ΩøÁî®) */
[93m 45 [mreal alpha = 0.025, starting_alpha, sample = 1e-3; /* 655, 656Ë°åÁõÆ„Çà„Çäalpha„ÅØÂ≠¶ÁøíÊØî(ll[13;1H[93m    [mearning rate) */
[93m 46 [mreal *syn0, *syn1, *syn1neg, *expTable; /* realÂûã„Éù„Ç§„É≥„Çø */
[93m 47 [mclock_t start;
[93m 48 
 49 [mint hs = 0, negative = 5; /* hs„ÅØ344Ë°åÁõÆÔºånegative„ÅØ350Ë°åÁõÆ„ÅßÂàùÂá∫ */
[93m 50 [mconst int table_size = 1e8;
[93m 51 [mint *table; /* intÂûã„Éù„Ç§„É≥„Çøtable */
[93m 52 [m/* voidÂûã(ÂÄ§„ÇíËøî„Åï„Å™„ÅÑÈñ¢Êï∞)InitUnigramTable()‚Üê„Åã„Å™„ÇäÂæå„Å´Âá∫„Å¶„Åè„Çã */
[93m 53 [mvoid InitUnigramTable() {
[93m 54 [m  int a, i;
[93m 55 [m  double train_words_pow = 0;
[93m 56 [m  double d1, power = 0.75;
[93m 57 [m  table = (int *)malloc(table_size * sizeof(int)); /* table_size * sizeof(int)ÂàÜ„ÅÆ„É°[94m>>[m[26;1H[93m    [m„É¢„É™„ÇíÂãïÁöÑ„Å´Ââ≤„ÇäÂΩì„Å¶(„Åì„ÅÆ„É°„É¢„É™„ÅØ„Å©„Åì„ÅßËß£ÊîæÔºü) */
[93m 58 [m  for (a = 0; a < vocab_size; a++) train_words_pow += pow(vocab[a].cn, power);
[93m 59 [m  i = 0;[14;35H[?12l[?25h[?25l[29;1H/expTable[27m[m[H[2J[1;1H[93m432 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] += syn0[c + last_word * layer1_sizee[2;1H[93m    [m];
[93m433 [m[7C cw++;
[93m434 [m      }
[93m435 [m      if (cw) {
[93m436 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] /= cw;
[93m437 [m[7C if (hs) for (d = 0; d < vocab[word].codelen; d++) {
[93m438 [m[9C f = 0;
[93m439 [m[9C l2 = vocab[word].point[d] * layer1_size;
[93m440 [m[9C // Propagate hidden -> output
[93m441 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1[c + l2];
[93m442 [m[9C if (f <= -MAX_EXP) continue;
[93m443 [m[9C else if (f >= MAX_EXP) continue;
[93m444 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))];
[93m445 [m[9C // 'g' is the gradient multiplied by the learning rate
[93m446 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;
[93m447 [m[9C // Propagate errors output -> hidden
[93m448 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];
[93m449 [m[9C // Learn weights hidden -> output
[93m450 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * neu1[c];
[93m451 [m[7C }
[93m452 [m[7C // NEGATIVE SAMPLING
[93m453 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) {
[93m454 [m[9C if (d == 0) {
[93m455 [m[11C target = word;
[93m456 [m[11C label = 1;
[93m457 [m[9C } else {
[93m458 [m[11C next_random = next_random * (unsigned long long)25214903917 + 11;[14;24H[?12l[?25h[?25l[29;1H/expTable[1;28r[1;1H[12M[1;29r[17;1H[93m459 [m[11C target = table[(next_random >> 16) % table_size];
[93m460 [m[11C if (target == 0) target = next_random % (vocab_size - 1) + 1;
[93m461 [m[11C if (target == word) continue;
[93m462 [m[11C label = 0;
[93m463 [m[9C }
[93m464 [m[9C l2 = target * layer1_size;
[93m465 [m[9C f = 0;
[93m466 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1neg[c + l2];
[93m467 [m[9C if (f > MAX_EXP) g = (label - 1) * alpha;
[93m468 [m[9C else if (f < -MAX_EXP) g = (label - 0) * alpha;
[93m469 [m[9C else g = (label - expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP  [28;1H[93m    [m/ 2))]) * alpha;[29;1H[K[27;33H[?12l[?25h[?25l

/expTable[27m[m[H[2J[1;1H[93m491 [m[7C for (c = 0; c < layer1_size; c++) neu1e[c] = 0;
[93m492 [m[7C // HIERARCHICAL SOFTMAX /* ÈöéÂ±§ÁöÑ„ÇΩ„Éï„Éà„Éû„ÉÉ„ÇØ„Çπ */
[93m493 [m[7C if (hs) for (d = 0; d < vocab[word].codelen; d++) { /* 507Ë°åÁõÆ„Åæ„Åß(„Éá„Éï„Ç©„É´„Éà[4;1H[93m    [m„Å†„Å®hs == 0„Å†„Åã„ÇâÂãï„Åã„Å™„ÅÑÔºÅ) */
[93m494 [m[9C f = 0; /* realÂûãÂ§âÊï∞f(368Ë°åÁõÆ„ÅßÂÆ£Ë®ÄÊ∏à)„Å´0„Çí‰ª£ÂÖ• */
[93m495 [m[9C l2 = vocab[word].point[d] * layer1_size;
[93m496 [m[9C // Propagate hidden -> output /* hidden„Åã„Çâoutput„Å´ÂèçÊò† */
[93m497 [m[9C for (c = 0; c < layer1_size; c++) f += syn0[c + l1] * syn1[c + l2];
[93m498 [m[9C if (f <= -MAX_EXP) continue; /* f <= -MAX_EXP(== -6, 23Ë°åÁõÆ)„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠[94m>>[m[10;1H[93m    [m„ÉÉ„Éó */
[93m499 [m[9C else if (f >= MAX_EXP) continue; /* f >= MAX_EXP(== 6, 23Ë°åÁõÆ)„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ[94m>>[m[12;1H[93m    [m„Ç≠„ÉÉ„Éó */
[93m500 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))]; //[14;1H[93m    [m* -MAX_EXP < f < MAX_EXP„ÅÆÊôÇ f„Å´expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX__[15;1H[93m    [mEXP / 2))]„Çí‰ª£ÂÖ• */
[93m501 [m[9C // 'g' is the gradient multiplied by the learning rate /* 'g'„ÅØÂãæÈÖç„Å®Â≠¶ÁøíÊØî [17;1H[93m    [m„ÅÆÁ©ç */
[93m502 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;
[93m503 [m[9C // Propagate errors output -> hidden /* „Ç®„É©„Éº„Çíoutput„Åã„Çâhidden„Å´ÂèçÊò† */
[93m504 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];
[93m505 [m[9C // Learn weights hidden -> output /* Èáç„Åø„ÇíÂ≠¶Áøí„Åó„Å¶hiden„Åã„Çâ */
[93m506 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * syn0[c + l1];
[93m507 [m[7C } /* 493Ë°åÁõÆ„Åã„Çâ */
[93m508 [m[7C // NEGATIVE SAMPLING /* „Éç„Ç¨„ÉÜ„Ç£„Éñ„Çµ„É≥„Éó„É™„É≥„Ç∞ */
[93m509 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) { /* 528Ë°åÁõÆ„Åæ„Åß(„Éá„Éï„Ç©[94m>>[m[26;1H[93m    [m„É´„Éà„Å†„Å®negative == 5„Å†„Åã„Çâ„Åì„Å£„Å°„ÅåÂãï„Åè) */
[93m510 [m[9C if (d == 0) { /* „É´„Éº„Éó„ÅÆÊúÄÂàù„Å†„Åë */
[93m511 [m[11C target = word;[13;24H[?12l[?25h[11;24H[9;24H[8;24H[7;24H[6;24H[5;24H[3;24H[2;24H[1;24H[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m490 [m[7C l1 = last_word * layer1_size; /* 366Ë°åÁõÆ„ÅßÂÆöÁæ©„Åó„Åül1„Å´last_word * layer1_sizee[2;1H[93m    [m„Çí‰ª£ÂÖ• */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m489 [m[7C if (last_word == -1) continue; /* last_word == -1„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m488 [m[7C last_word = sen[c];[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m487 [m[7C if (c >= sentence_length) continue; /* c >= sentence_length„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó [2;1H[93m    [m„Åó„Å¶485Ë°åÁõÆ„Å´Êàª„Çã(384Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØsentence_lengh == 0) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m486 [m[7C if (c < 0) continue; /* c < 0„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶485Ë°åÁõÆ„Å´Êàª„Çã */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m485 [m[7C c = sentence_position - window + a; /* 41Ë°åÁõÆ„Çà„Çäwindow == 5 */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m484 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) { /* 531Ë°åÁõÆ„Åæ„ÅßÔºå(422[2;1H[93m    [m2Ë°åÁõÆ„Çà„Çä next_random % window =) b <= a < window *2 + 1 -b„ÅÆÈñì„ÅßÔºåa != window„ÅÆÊôÇ */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m483 [m    } else {  //train skip-gram /* skip-gram„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà[94m>>[m[2;1H[93m    [m„Å†„Å®Âãï„Åã„Å™„ÅÑÔºÅ)Ôºå532Ë°åÁõÆ„Åæ„Åß */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m482 [m      }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m481 [m[7C }[27;1H[94m@                                                                                        [28;1H@                                                                                        [1;13H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m480 [m[9C for (c = 0; c < layer1_size; c++) syn0[c + last_word * layer1_size] += neu11[2;1H[93m    [me[c];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m479 [m[9C if (last_word == -1) continue;[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m478 [m[9C last_word = sen[c];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m477 [m[9C if (c >= sentence_length) continue;[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m476 [m[9C if [46m([mc < 0[46m)[m continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m475 [m[9C c = sentence_position - window + a;[2;18H(c < 0)[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m474 [m[7C for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m473 [m[7C // hidden -> in[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m472 [m[7C }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m471 [m[9C for (c = 0; c < layer1_size; c++) syn1neg[c + l2] += g * neu1[c];[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m470 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1neg[c + l2];[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m469 [m[9C else g = [46m([mlabel - expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP  [2;1H[93m    [m/ 2))][46m)[m * alpha;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m468 [m[9C else if (f < -MAX_EXP) g = (label - 0) * alpha;[2;24H([64C  [3;1H[93m [m[9C)[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m467 [m[9C if (f > MAX_EXP) g = (label - 1) * alpha;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m466 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1neg[c + l2];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m465 [m[9C f = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m464 [m[9C l2 = target * layer1_size;[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m463 [m[9C }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m462 [m[11C label = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m461 [m[11C if (target == word) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m460 [m[11C if (target == 0) target = next_random % (vocab_size - 1) + 1;[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m459 [m[11C target = table[(next_random >> 16) % table_size];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m458 [m[11C next_random = next_random * (unsigned long long)25214903917 + 11;[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m457 [m[9C } else [46m{[7;15H}[1;22H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m456 [m[11C label = 1;[2;22H{[8;15H}[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m455 [m[11C target = word;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m454 [m[9C if (d == 0) {[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m453 [m[7C if (negative > 0) for (d = 0; d < negative + 1; d++) {[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m452 [m[7C // NEGATIVE SAMPLING[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m451 [m[7C }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m450 [m[9C for (c = 0; c < layer1_size; c++) syn1[c + l2] += g * neu1[c];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m449 [m[9C // Learn weights hidden -> output[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m448 [m[9C for (c = 0; c < layer1_size; c++) neu1e[c] += g * syn1[c + l2];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m447 [m[9C // Propagate errors output -> hidden[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m446 [m[9C g = (1 - vocab[word].code[d] - f) * alpha;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m445 [m[9C // 'g' is the gradient multiplied by the learning rate[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m444 [m[9C else f = expTable[(int)((f + MAX_EXP) * (EXP_TABLE_SIZE / MAX_EXP / 2))];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m443 [m[9C else if (f >= MAX_EXP) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m442 [m[9C if (f <= -MAX_EXP) continue;[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m441 [m[9C for (c = 0; c < layer1_size; c++) f += neu1[c] * syn1[c + l2];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m440 [m[9C // Propagate hidden -> output[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m439 [m[9C l2 = vocab[word].point[d] * layer1_size;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m438 [m[9C f = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m437 [m[7C if (hs) for (d = 0; d < vocab[word].codelen; d++) {[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m436 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] /= cw;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m435 [m      if (cw) {[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m434 [m      }[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m433 [m[7C cw++;[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m432 [m[7C for (c = 0; c < layer1_size; c++) neu1[c] += syn0[c + last_word * layer1_sizee[2;1H[93m    [m];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m431 [m[7C if (last_word == -1) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m430 [m[7C last_word = sen[c];[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m429 [m[7C if (c >= sentence_length) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m428 [m[7C if (c < 0) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m427 [m[7C c = sentence_position - window + a;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m426 [m      for (a = b; a < window * 2 + 1 - b; a++) if (a != window) {[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m425 [m      cw = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m424 [m      // in -> hidden[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m423 [m    if (cbow) {  //train the cbow architecture /* ÈÄ£Á∂öÂçòË™ûÈõÜÂêà„É¢„Éá„É´CBOW„ÅÆÂ≠¶Áøí(41Ë°åÁõÆ [2;1H[93m    [m„Åã„Çâcbow == 1„Çà„Çä„Éá„Éï„Ç©„É´„Éà„Å†„Å®„Åì„Çå„ÅåÂãï„Åè)„Åì„Åì„Åã„Çâ482Ë°åÁõÆ„Åæ„ÅßË™≠„ÅøÈ£õ„Å∞„Åô */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m422 [m    b = next_random % window; /* 41Ë°åÁõÆ„Çà„Çäwindow = 5, „Åì„ÅÆb„ÅØ483Ë°åÁõÆ‰ª•Èôç„ÅÆelse„Åß‰Ωø„ÅÜ[2;1H[93m    [m */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m421 [m    next_random = next_random * (unsigned long long)25214903917 + 11; /* Á∑öÂΩ¢ÂêàÂêåÊ≥ï„Åß[2;1H[93m    [m‰π±Êï∞next_random„ÇíÁîüÊàê */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m420 [m    for (c = 0; c < layer1_size; c++) neu1e[c] = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m419 [m    for (c = 0; c < layer1_size; c++) neu1[c] = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m418 [m    if (word == -1) continue;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m417 [m    word = sen[sentence_position]; /* ÊúÄÂàù„ÅØword = sen[0] */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m416 [m    } /* 407Ë°åÁõÆ„Åã„Çâ */[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m415 [m      continue; /* ‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶375Ë°åÁõÆ„Å´‰∏ÄÊ∞ó„Å´Êàª„Çã */[1;24H[?12l[?25h[?25l[1;28r[1;1H[3L[1;29r[1;1H[93m414 [m      fseek(fi, file_size / (long long)num_threads * (long long)id, SEEK_SET);  /* „Éï [2;1H[93m    [m„Ç°„Ç§„É´fi„ÅÆ„Éï„Ç°„Ç§„É´‰ΩçÁΩÆÊºîÁÆóÂ≠ê„ÇíSEEK_SET„ÇíÂü∫Ê∫ñ„Å´file_size / (long long)num_threads * (ll[3;1H[93m    [mong long)id„Éê„Ç§„ÉàÁßªÂãï */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m413 [m      sentence_length = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m412 [m      last_word_count = 0;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m411 [m      word_count = 0;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m410 [m      if (local_iter == 0) break; /* „Åì„Åì„Åß374Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ÔºÅ */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m409 [m      local_iter--; /* local_iter„Çí1„Å§Ê∏õ„Çâ„Åô(366Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØlocal_iter == 5) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m408 [m      word_count_actual += word_count - last_word_count;[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m407 [m    if (feof(fi) || (word_count > train_words / num_threads)) { /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„Åå [2;1H[93m    [mÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüËã•„Åè„ÅØword_count„Ååtrain_words / num_threads„Çà„ÇäÂ§ö„ÅÑÂ†¥Âêà(416Ë°åÁõÆ„Åæ„Åß) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m406 [m    } /* 388Ë°åÁõÆ„Åã„Çâ */[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m405 [m      sentence_position = 0; /* 364Ë°åÁõÆ„Åßlong long sentence_position = 0„Å®ÁΩÆ„ÅÑ„Å¶„ÅÑ„Çã[94m>>[m[2;1H[93m    [m„ÅåÔºå„Åì„Åì„Åß„ÇÇÊîπ„ÇÅ„Å¶‰ª£ÂÖ•(533Ë°åÁõÆ„ÅÆsentence_position++„ÅØ„Åì„Åì„Å´Èüø„ÅèÔºü) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m404 [m      } /*  389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åì„Åì„Åæ„Åß */[1;24H[?12l[?25h[?25l[1;28r[1;1H[4L[1;29r[1;1H[93m403 [m[7C if (sentence_length >= MAX_SENTENCE_LENGTH) break; /* sentence_length„ÅåMAX_SEE[2;1H[93m    [mNTENCE_LENGTH == 1000„Å´ÈÅî„Åó„ÅüÊôÇ389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ (i.e. ÈÖçÂàósen„ÅØMAX_SENN[3;1H[93m    [mTENCE_LENGTH + 1ÂÄã„ÅÆË¶ÅÁ¥†„ÅåÊúâ„Çã„ÅÆ„ÅßÔºåsen„ÅÆÂêÑË¶ÅÁ¥†„Å´word„Çí‰ª£ÂÖ•„ÅóÁµÇ„Çè„Å£„Åü„ÇâÁÑ°Èôê„É´„Éº„Éó„ÇíÊäú[4;1H[93m    [m„Åë„Çã) */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m402 [m[7C sentence_length++; /* „Åì„Åì„Åßsentence_length„ÅåÂ¢ó„Åà„Çã */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m401 [m[7C sen[sentence_length] = word; /* ÈÖçÂàósen„ÅÆÂêÑË¶ÅÁ¥†„Å´word„Çí‰ª£ÂÖ• */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m400 [m[7C } /* 396Ë°åÁõÆ„Åã„Çâ„ÅÆifÊñá„Åì„Åì„Åæ„Åß */[1;23H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m399 [m[9C if (ran < (next_random & 0xFFFF) / (real)65536) continue; /* ran < (next_raa[2;1H[93m    [mndom & 0xFFFF) / (real)65536 „ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶390Ë°åÁõÆ„Å´Êàª„Çã */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m398 [m[9C next_random = next_random * (unsigned long long)25214903917 + 11;[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m397 [m[9C real ran = (sqrt(vocab[word].cn / (sample * train_words)) + 1) * (sample *  [2;1H[93m    [mtrain_words) / vocab[word].cn;[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m396 [m[7C if (sample > 0) { /* sample > 0 „ÅÆÊôÇ(400Ë°åÁõÆ„Åæ„Åß) */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m395 [m[7C // The subsampling randomly discards frequent words while keeping the rankingg[2;1H[93m    [m same[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[L[1;29r[1;1H[93m394 [m[7C if (word == 0) break; /* 389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„Åã„ÇâËÑ±Âá∫ */[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m393 [m[7C word_count++;[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m392 [m[7C if (word == -1) continue; /* word == -1„ÅÆÊôÇÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m391 [m[7C if (feof[46m([mfi[46m)[m) break; /* „Éï„Ç°„Ç§„É´„Éù„Ç§„É≥„Çø„ÅåÁµÇÁ´Ø„Å´ÈÅî„Åó„ÅüÊôÇ389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº[2;1H[93m    [m„Éó„Åã„ÇâËÑ±Âá∫ */[1;24H[?12l[?25h[?25l[1;28r[1;1H[2L[1;29r[1;1H[93m390 [m[7C word = ReadWordIndex(fi); /* 114Ë°åÁõÆ„ÅßÂÆöÁæ©„ÅÆÂçòË™û„ÇíË™≠Âèñ„ÇäÔºåË™ûÂΩô‰∏≠„Åß„ÅÆÂçòË™û„ÅÆÁï™[94m>>[m[2;1H[93m    [mÂè∑„ÇíËøî„ÅôReadWordIndex */[3;21H(fi)[1;24H[?12l[?25h[?25l[1;28r[1;1H[L[1;29r[1;1H[93m389 [m      while (1) { /* ÁÑ°Èôê„É´„Éº„Éó(404Ë°åÁõÆ„Åæ„Åß) */[28;1H[94m@                                                                                        [1;24H[?12l[?25h[?25l[1;28r[m[1;1H[2L[1;29r[1;1H[93m388 [m    if (sentence_length == 0) { /* ifÊñá(406Ë°åÁõÆ„Åæ„Åß),364Ë°åÁõÆ„Çà„ÇäÂΩìÂàù„ÅØsentence_lengthh[2;1H[93m    [m == 0„Å†„Åå389Ë°åÁõÆ„Åã„Çâ„ÅÆÁÑ°Èôê„É´„Éº„Éó„ÅßÊúÄÁµÇÁöÑ„Å´sentence_length„Åå1000„Å´„Å™„Çã */[1;24H[?12l[?25h[?25l[29;1H:[?12l[?25hw[?25l"word2vec.c" 703L, 41431C written[1;24H[?12l[?25h[?25l[29;1H[K[29;1H:[?12l[?25hq[?25l[29;1H[K[29;1H[?1l>[?12l[?25h[?1049lbash-3.2$ exit
exit

Script done on Mon Oct 26 15:44:44 2015
